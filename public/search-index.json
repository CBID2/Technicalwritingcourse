[{"content":"\rThese fantastic folks volunteered their time and skills to create this Open Source Markdown Course for Beginners.\nIt\u0026rsquo;s packed with useful stuff and totally FREE for everyone!\nEditor: Wisdom Nwokocha: a seasoned software engineer and a technical writer Meet the Authors: Mercy Miracle Makinde: a blockchain frontend developer and a technical content writer\nEdun Rilwan Omobolanle: a backend software developer and a technical content writer.\nWhy free?\nWe believe everyone deserves to learn tech writing, no matter what! So grab this open-source course and unlock your future in tech writing.\n","date":"2024-01-15","id":0,"permalink":"/docs/markdown-course/authors/","summary":"These fantastic folks volunteered their time and skills to create this Open Source Markdown Course for Beginners.\nIt\u0026rsquo;s packed with useful stuff and totally FREE for everyone!","tags":[],"title":"Authors"},{"content":"\rThese fantastic folks volunteered their time and skills to create this Open Source Technical Writing Course for Beginners.\nIt\u0026rsquo;s packed with useful stuff and totally FREE for everyone!\nEditor: Wisdom Nwokocha: a seasoned software engineer and a technical writer Meet the Authors: Susan Odii:: Susan is a passionate frontend developer who loves simplifying complex concepts, making them more accessible and resonant for her readers.\nTemitope Victoria: Temitope is an experienced and certified IT professional. She is skilled in Technical Writing, Search Engine Optimization, and Cloud Computing.\nBlessing Ene Anyebe: Blessing is a well-rounded tech person with skills that include design and frontend engineering. Currently she focuses on Technical Writing, API documentation, and Search Engine Optimization.\nRejoice Anodo: Rejoice focuses on curating technical written content for B2B SaaS companies.\nLove Otudor: an Android developer and technical writer. She is a Women Techmakers Ambassador and Google Developers Group co-organizer.\nPrince Onyeanuna: Prince is a technical writer and DevOps engineer who believes in the power of showing up. He is passionate about helping others learn and grow through writing and coding.\nAkorede Da silva: Akorede is an experienced and multi-disciplinary designer, product manager, XR developer and Technical writer. He is an XRI Ambassador and also a community manager for Extend Africa (An XR community), Checkmate Africa, and Designers DAO.\nPeace Sandy: Peace Sandy is a software developer who loves to break down technical jargon into simpler terms through writing. She is a technical writer who loves research, and is highly skilled in writing technical articles, how-to manuals, API documentation, tutorials, and release notes.\nRuth Charles: A skilled Technical writer and DevOps engineer, with a passion for learning, solving problems, and helping others understand complex information through writing.\nWhy free?\nWe believe everyone deserves to learn tech writing, no matter what! So grab this open-source course and unlock your future in tech writing.\n","date":"2024-01-15","id":1,"permalink":"/docs/technicalwritingcourse/authors/","summary":"These fantastic folks volunteered their time and skills to create this Open Source Technical Writing Course for Beginners.\nIt\u0026rsquo;s packed with useful stuff and totally FREE for everyone!","tags":[],"title":"Authors"},{"content":"\rIn this lesson, you will be learning:\nBest tips and practices in markdown. Markdown style guides. Markdown tools (both web and desktop). Let\u0026rsquo;s get started\nBest practices and tips in markdown. Markdown like any other type of writing also has rules and laws guiding its use. Any practise that is opposite to these rules and principles can lead to erroneous and disorganized documentation. Below are the best practises and tips to apply when working with markdown:\nUse headings and subheadings: Headings provide a way to arrange your content. It divides your document into digestible chunks that readers can easily read and understand. Using headings in markdown can help anyone reading the document navigate between sections and topics of choice.\nWell written headings provide an insight into what the next set of paragraphs talk about. Sub-headings on the other hand are used to narrow-down each heading to its other component parts.\nFor example, a documentation/article on a video editing software named VidEdit will have headings and sub-headings as seen below:\n## What is VidEdit?\r## Features of VidEdit\r### Download images with VidEdit\r#### Download via URL.\r### Extract audio from video\r### Add audio to videos\r## VidEdit Integrations\r### Integrate VidEdit with Youtube\r### Integrate VidEdit with Tiktok You can also preview it below:\nWhat is VidEdit? Features of VidEdit Download images with VidEdit Download via URL. Extract audio from video Add audio to videos VidEdit Integrations Integrate VidEdit with Youtube Integrate VidEdit with Tiktok From the headers above, readers can easily navigate between the sections that matter to them. The headings are written first, followed by the sub-headings. Each sub-heading has an extra hash (#) before it. This helps to maintain a proper hierarchy of the file content.\nUse whitespaces and line breaks: Whitespaces refer to the spaces between the words and paragraphs of a written work. They help to separate words and paragraphs for easy comprehension and readability. However, whitespaces needs to be used carefully so your work doesn’t look vacant or over-spaced. Below is an example of a document with whitespaces defect like over-spacing and under-spacing:\nPython is a high-level, interpretedprogramming language known for its simplicity andreadability. It is widely used in various fields, including webdevelopment, data science, artificial intelligence, and more. Python's syntax allows programmers to write clear and logical code for small and large-scale projects.\rAfter writing, it is important to cross-check your document to enable you spot and correct whitespace errors. Below is a correction of the document above:\nPython is a high-level, interpreted programming language known for its simplicity and readability. It is widely used in various fields, including web development, data science, artificial intelligence, and more. Python's syntax allows programmers to write clear and logical code for small and large-scale projects.\rUse descriptive texts for links and images: One of the ways to create a versatile and readable markdown file is by adding descriptive texts to links and images. These texts provide extra information about the link and image displayed.\nCheck the examples below:\n# Bad link text\rFacebook is a very popular messaging app. [click here](https://web.facebook.com/) to sign up.\r# Descriptive link text\r[Facebook](https://web.facebook.com/) is a very popular messaging app. You can create an account within 10 seconds.\r# Bad image text\r!\\[Image\\](image_link)\r# Descriptive image text\r!\\[An image of a man carrying a dog\\](image_link)\rCheck the preview below:\nBad link text Facebook is a very popular messaging app. click here to sign up.\nDescriptive link text Facebook is a very popular messaging app. You can create an account within 10 seconds.\nEscape special characters with backslash: In some cases, you may want to include special characters like asterisks (*), hash(#), etc. in your markdown document. This can prove difficult since these special characters are also used to format elements in markdown. One way to solve this is by using a backslash (). Below is an example:\n# The text below will be italicized\r*me and you*\r# The backslash prevents the text from being italicized\r\\*me and you\\*\rCheck the preview below:\nThe text below will be italicized me and you\nThe backlash prevents the text from being italicized *me and you*\nUse lists appropriately and consistently: Use the normal counting numbers (1, 2, 3, …) to create ordered lists, like a step-by-step process. Use asterisks () or dash (-) to create unordered lists. If you decide to use asterisks () to create a list in your first paragraph, consider using it throughout your document for consistency. The same thing applies to when you use a dash (-). Here is an example below:\nAt the musical fest, we ate and drank the following:\r- fish\r- meat\r- wine\r- youghurts.\rThere were also fun events like,\r- games\r- musical challenge\r- dance battle, etc.\rEdit tables for readability: Creating tables in markdown can be tricky, especially when each row and cells have words and characters of unequal length. To ensure readability of your markdown files, apply enough spaces to align each column with their respective data. Below is a comparison between a wrong table format and a readable one:\n# Wrong table format\r| Name | Email |\r|---|---|\r| Edun Rilwan | edun...@gmail.com |\r| Oladapo Alex| alex...@gmail.com |\r# Readable table format\r| Name | Email |\r| --- | --- |\r| Edun Rilwan | edun...@gmail.com |\r| Oladapo Alexandra | alex...@gmail.com |\rCheck the preview below:\nMarkdown table Name Email Edun Rilwan edun\u0026hellip;@gmail.com Oladapo Alexandra alex\u0026hellip;@gmail.com NOTE: Both format will render your table correctly. However, it is useful when editing your markdown file and sharing it with others. Editors can quickly find out which column each row data belongs to.\nUsing backticks for writing code: Markdown allows you to create code snippets using backticks (`). It’s usage can differ based on what you want to achieve. Below is a breakdown on how to use backticks in different scenarios:\n# For a simple code or inline code\r``your code goes here``\r# For a code block or long code snippet\r```\ryour code goes here\r```\r# Specify the programming lanaguage (1)\r```python\rnumbers = [1, 2, 3]\rfor n in numbers:\rprint(n)\r```\r# Specify the programming lanaguage (2)\r```javascript\rconst name = \u0026quot;Rilwan\u0026quot;\rconsole.log(name)\r```\rCheck the preview below:\nFor a simple code or inline code your code goes here\rFor a code block or long code snippet 1your code goes here Specify the programming lanaguage (1) 1 2# Python 3 4numbers = [1, 2, 3] 5for n in numbers: 6 print(n)\rSpecify the programming lanaguage (2) 1 2// Javascript 3 4const name = \u0026#34;Rilwan\u0026#34; 5console.log(name)\rAdd metadata to your markdown file: When creating a markdown file for a blog post or documentation site, it is important to include a metadata that contains vital information about the file and its content. This piece of information is useful as it gives documentation sites, blogs, and markdown editors a summary of your file.\nMetadata are included in a section of the markdown file called Front matter. It is always in the beginning of the markdown file and are enclosed by triple dashes (\u0026mdash;). Below is an example of a metadata for a markdown file on Introduction to Python:\n--- title: \u0026quot;Introduction to Python\u0026quot; author: \u0026quot;Edun Rilwan\u0026quot; date: \u0026quot;2024-08-03\u0026quot; description: \u0026quot;An introductory guide to Python programming language, covering basic concepts and syntax.\u0026quot; tags: [\u0026quot;python\u0026quot;, \u0026quot;programming\u0026quot;, \u0026quot;beginner\u0026quot;, \u0026quot;tutorial\u0026quot;] category: \u0026quot;Programming Tutorials\u0026quot; ---\rThese markdown tips helps create markdown documents that are easy to read, edit, and maintain, whether you\u0026rsquo;re writing documentation, articles, or any other text-based content. They are also instrumental to keeping your markdown file clean and readable.\nUsing image as link text: This tip allows you to create a clickable image in markdown. This image is wrapped around a link which directs users to a new web page when it is clicked. Here is an example of how to implement it below:\n# Format\r\\[![Alt text\\]()](link_url)\r# Sample Usage\r\\[![Django framework icon](https://cdn-icons-png.flaticon.com/512/9307/9307630.png)](https://docs.djangoproject.com/en/5.1/)\rCheck the preview below: When you click on the image above, you will be redirected to django\u0026rsquo;s official documentation.\nConsistent formatting and styles in markdown There are different style guide documentation for creating consistent styles in markdown. Each documentation provide detailed guide on how to ensure consistency in markdown. Here is a list of some of these guide:\nMarkdown style guide by Google. Formatting standards for readable \u0026amp; consistent Markdown by Carwin on GitHub. Markdown style guide by Gruntwork docs. Tools for markdown editing There are various tools used for writing and editing markdown files. Below is a list of the top 5 popular markdown files:\nDillinger: Dillinger is the first on the list as a user-friendly markdown editor that allow users to create markdown files and also see the live preview of the markdown content on the right side of the screen.\nFeatures\nDillinger allows you to export your markdown file as a styled HTML file, pure HTML file, and PDF. Dillinger is integrated with cloud storages like Dropbox, Google Drive, OneDrive to allow seamless file exchange. You can also save your markdown files to Medium, Github and Bitbuket directly from Dillinger. Files stored on the cloud storages listed above can also be imported to Dillinger. Pricing: Dillinger is a free web based markdown editor.\nTypora: Typora is a markdown editor for windows, MacOS and Linux systems. It is created to enable users to focus on writing and eliminate any distractions. There is no preview window, mode switcher, etc. Your markdown content is immediately converted to plain text as you type along. This allows you to focus on the content itself and correct any errors from your markdown syntax.\nFeatures\nWith Typora, you can add diagrams and mathematical formulas or equations to your markdown file. Typora has an autocomplete feature to quickly write out common markdown syntax. Markdown files can be exprted as a PDF, Epub, HTML, and other document types with Typora. Typora allows you to chose different themes for your markdown editor interface. Pricing: Typora is not free to use. Users have access to a free 15 days trial after which they will have to pay a one time fee of $14.99 for a lifetime access.\nStackEdit: StackEdit is an inbrowser Markdown editor. It allows you to visualize and preview the final rendering of your files as you write.\nFeatures\nStackEdit has a WYSIWYG editor. StackEdit can sync your files with cloud storages like Google Drive, Dropbox, and Github. Your markdown files can also be published directly to CMS systems like blogger, wordpress, zendesk. StackEDIT can be used to edit markdown files both online and offline. You can add emojis and musical notes to your markdown files with StackEdit. Pricing: StackEdit is free to use.\nGhostwriter: Ghostwriter is a markdown editor for both Windows and Linux systems. It allows you to create markdown files without distractions. You can choose to see the live preview as you write along or focus mainly on the writing canvas.\nPricing: Ghostwriter is free and open source.\nMou: Mou is a markdown editor for MacOS operating systems. It has a live preview feature and allow users to choose custom themes for their editors.\nPricing: Mou is a free markdown editor for MacOS systems.\n","date":"2024-08-23","id":2,"permalink":"/docs/markdown-course/best-practices-and-tips-in-markdown/","summary":"This detailed guide covers how to write quality markdown documents easier and faster. You will also find the top markdown tools to create markdown files seamlessly.","tags":[],"title":"Best practices and tips in markdown"},{"content":"\rFrom the previous lesson, you’ve learnt what Markdown is, its Importance, its advantages, and its comparisons to WYSIWYG Editors.\nHere is saying “The best way to learn is to practice” This way you will be able to identify common errors and avoid them in your next project. In this lesson, you will be doing a lot of practicals and getting your hands dirty in markdown.\nIn the lesson, you will be learning:\nHow to Set Up Markdown Tools. Markdown basic syntaxes and Formatting. How to Structure Contents in Markdown. Let\u0026rsquo;s Get the ball Rolling. You must have got used to downloading and installing packages before you can use certain tools or software on your computers. In this case, you won’t need that at all, as some applications already support writing in Markdown such as Code editors like VScode for Read.md **files, Blog sites like Hashnode, Dev.to, social apps like Discord, Slack, Whatsapp etc.\nAside from these, there are Markdown editors the same way there are Code editors. Markdown editors are simple, lightweight tools for converting text to HTML. They can be used to format lists, headers, and importantly, to add images, videos, and links.\nIn simple terms, these editors allow writers to create markdown documents like how code editors enable developers to write code. They use shorthand syntax to format text, which is then converted into a readable format.\nHere are some Markdown editors you can use to try writing in Markdown:\nStackEdit Dillinger Typora Markdown Journal Dingus GhostWriter Wri.pe Setting Up Markdown Tools For this lesson, you will be using StackEdit. StackEdit is a free online Markdown editor with a visual toolbar for formatting (bold, emphasis, lists, etc.). It can sync with cloud storage services such as Dropbox and Google Drive, and import files from a URL or your computer\u0026rsquo;s hard drive.\nVisit StackEdit. Click on **Start Writing** at the top of the page. You will see a welcome file that contains various Mardown syntax and its usage together with the Outcome on the right hand.\n3.Click on the Folder icon at the left side of the Nav bar. 4.Create a New File or Folder depending on your choice and name it. This is where You will be carrying out all your practicals.\nBasic Syntax and Formatting In this section, you will learn the basic syntax in Markdown\n1. Headers # is used to create a heading in Markdown. The number of # signs at the beginning of a line determines the heading level. For example, one # creates the largest heading, while six # creates the smallest.\nThere are six levels of heading as seen below:\nSyntax: 1# Heading One (H1) 2## Heading Two (H2) 3### Heading Three (H3) 4#### Heading Four (H4) 5##### Heading Five (H5) 6###### Heading Six (H6)\rResult: Heading One (H1) Heading Two (H2) Heading Three (H3) Heading Four (H4) Heading Five (H5) Heading Six (H6) Take note of the space between the ‘#’ tag and the text or phrase\nRight ✅ Result Wrong ❌ ## Technical Writing Technical Writing ##Technical writing ## Technical Writing\nTechnical Writing is … Technical Writing\nTechnical Writing is … ##Technical Writing\nTechnical writing is … 2.Emphasis (Bold, Italics) You can add emphasis in markdown either as a Bold text or Italic text. This can be achieved using asterisk(s).\nBold: Use two asterisks before the text and after the text (**).\nItalic: Use one asterisk or underscore before the text and after the text. (*/ _).\nCheck the usage ⬇️\nSyntax: 1**Bold text** 2*Italic text*\rResult: Bold text Italic text\n3.Lists (Ordered and Unordered) You can itemize as an Ordered or Unordered list.\n- Ordered Add numbers followed by content, as seen below ⬇️\nSyntax ✅ Result ✅ 1. Writing\n2. Documentation\n3. Technical Writing\n4. Training\n1. Training 1\n2. Training 2\n3. Training 3\n5. Troubleshooting 1. Writing\n2. Documentation\n3. Technical Writing\n4. Training\n1. Training 1\n2. Training 2\n3. Training 3\n5. Troubleshooting - Unordered Add dashes (-), asterisks (*), or plus signs (+) in front as seen below ⬇️\nSyntax: 1- First item 2- Second item 3- Third item 4 - Indented item 5 - Indented item 6 - Extra item 7- Fourth ite\rResult: First item Second item Third item Indented item Indented item Extra item Fourth item Note: for nested listing either as an ordered or unordered list, maintain the same syntax and add extra spacing before nest items e.g Press the space bar four times before you begin the nest list\nRight ✅ Wrong ❌ - First item\n- Second item\n- Third item\n- Indented item\n- Indented item\n- Extra item\n- Fourth item - First item\n- Second item\n- Third item\n- Indented item\n- Indented item\n- Extra item\n- Fourth item - First item\n- Second item\n- Third item\n- Indented item\n- Indented item\n- Extra item\n- Fourth item - First item\n- Second item\n- Third item\n+ Indented item\n* Indented item\n- Extra item\n- Fourth item 1. First item\n2. Second item\n3. Third item\n1. Indented item\n2. Indented item\n1. Extra item\n4. Fourth item 1) First item\n2) Second item\n3) Third item\n1) Indented item\n2) Indented item\n1) Extra item\n4) Fourth item 4.Links and Images Links: To create a link, enclose the link text in brackets and then follow it immediately with the URL in parentheses e.g [Google](https://www.google.com) The outcome is Google Image: To add an image, add an exclamation mark (!), followed by alt text in brackets, and the path or URL to the image asset in parentheses. 1![Stellar Bridge illustration\\](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x32gn1w21u095qfkw3ie.png \u0026#39;stellar\u0026#39;)\rThe output will look like this ⬇️\nStructuring Content In this section, you will learn how to structure your content in an organised and readable manner through Headings and Subheadings, Tables and Blockquotes.\n1. Headings and Subheadings This is an important aspect of structuring content in markdown. Headings and subheadings help the readers quickly scan the content, understand its structure, and easily locate specific information.\nIdeally, H1 are best suitable for Title or Main Heading. This is the most prominent heading level and should be used sparingly, typically once per page.\nH2: Used for primary section headings. These are subheadings under the main topic. - Example: Introduction, Methods, Results, Conclusion.\nH3: Used for subheadings within sections. They provide further structure and organization. - Example: Study Participants, Data Collection, Data Analysis\nH4, H5, H6: These lower-level headings can be used for smaller subsections or to emphasize specific points within the content. - Example: Demographics, Instrumentation, Statistical Analysis\nSyntax 1# H1: Main Title or Page Heading 2 3This is the most important heading on the page. It should clearly and concisely convey the main topic of the content. 4 5## H2: Primary Section Heading 6 7- **Section 1** 8- **Section 2** 9- **Section 3** 10 11### H3: Subheading within a Section 12 13#### Section 1 14 15- Subtopic A 16- Subtopic B 17 18#### Section 2 19 20- Subtopic C 21- Subtopic D 22 23##### H5: Lower-level Heading (Optional) 24 25This level of heading is used less frequently, but can be useful for providing additional structure within a subsection. 26 27###### H6: Even Lower-level Headings (Rarely Used) 28 29These headings are typically not necessary for most content, but can be used in very complex documents with multiple layers of organization.\rResult⬇️ H1: Main Title or Page Heading This is the most important heading on the page. It should clearly and concisely convey the main topic of the content.\nH2: Primary Section Heading Section 1 Section 2 Section 3 H3: Subheading within a Section Section 1 Subtopic A Subtopic B Section 2 Subtopic C Subtopic D H5: Lower-level Heading (Optional) This level of heading is used less frequently, but can be useful for providing additional structure within a subsection.\nH6: Even Lower-level Headings (Rarely Used) These headings are typically not necessary for most content, but can be used in very complex documents with multiple layers of organization.\n2. Creating Tables To create a table,\nstart by adding pipes | before and after the table heading to create rows. use three or more hyphens (---) to create each column’s header. use pipes (|) to separate each column. For compatibility, you should also add a pipe on either end of the row.\n4.Add the table data on a new line\ndon’t add space between the column\nSyntax 1| Frontend | Backend | Smart contract| 2|---|---|---| 3| Html | Python | Solidity | 4| Css | Node.js | Rust | 5| Javascript | PhP | Vyper |\rResult Frontend Backend Smart contract Html Python Solidity Css Node.js Rust Javascript PhP Vyper Comparison 1 Right ✅ 2 | Frontend | Backend | Smart contract| 3 |:---|:---|:---| 4 | Html | Python | Solidity | 5 | Css | Node.js | Rust | 6 | Javascript | PhP | Vyper |\r1 Wrong ❌ 2 | Frontend | Backend | Smart contract| 3 4 |:---|:---|:---| 5 6 | Html | Python | Solidity | 7 8 | Css | Node.js | Rust | 9 10 | Javascript | PhP | Vyper |\rAlignment You can align text in the columns to the left, right, or centre.\nRight: add : the right side of the hyphens within the header row. Left: add : to the left side of the hyphens within the header row. Center: add : on both sides of the hyphens within the header row. Syntax For Center Alignment 1| Frontend | Backend | Smart contract| 2|:---:|:---:|:---:| 3| Html | Python | Solidity | 4| Css | Node.js | Rust | 5| Javascript | PhP | Vyper |\rResult For Center Alignment Frontend Backend Smart contract Html Python Solidity Css Node.js Rust Javascript PhP Vyper Syntax For Right Alignment 1| Frontend | Backend | Smart contract| 2|---:|---:|---:| 3| Html | Python | Solidity | 4| Css | Node.js | Rust | 5| Javascript | PhP | Vyper |\rResult For Right Alignment Frontend Backend Smart contract Html Python Solidity Css Node.js Rust Javascript PhP Vyper Syntax For Left Alignment 1| Frontend | Backend | Smart contract| 2|:---:|:---:|:---:| 3| Html | Python | Solidity | 4| Css | Node.js | Rust | 5| Javascript | PhP | Vyper |\rResult For Left Alignment Frontend Backend Smart contract Html Python Solidity Css Node.js Rust Javascript PhP Vyper 3.Using Blockquotes for Text Formatting Blockquotes are used to set off long quotations from other sources. To create a blockquote, add the greater than sign \u0026gt; in the font of the paragraph.\n1\u0026gt; Here is saying “_The_ _best way to learn is to practice_” This way you will be able to identify common errors and avoid them in your next project. For multiple paragraphs, add \u0026gt; before the next paragraph to create a space between them.\n1\u0026gt; Here is saying \u0026#34;_The_ _best way to learn is to practice_\u0026#34; This way you will be able to identify common errors and avoid them in your next project. 2\u0026gt; 3\u0026gt; In simple terms, these editors allow writers to create markdown documents like how code editors enable developers to write code.\rYou can also create a nested blockquote by adding \u0026gt;\u0026gt; or more in front of the paragraph you want to nest.\n1 \u0026gt; In this lesson, you will be doing a lot of practicals and getting your hands dirty in markdown. 2 \u0026gt; \u0026gt; In the lesson, you will be learning: 3 \u0026gt;\u0026gt; + How to Set Up Markdown Tools. 4 \u0026gt;\u0026gt; + Markdown basic syntaxes and Formatting. 5 \u0026gt;\u0026gt; + How to Structure Contents in Markdown. 6 \u0026gt;\u0026gt;\u0026gt;+ kkkkkkkkkkkkk 7 \u0026gt;\u0026gt;\u0026gt;\u0026gt;+ kkkkkkkkk\rCheck the output below ⬇️\nIn this lesson, you will be doing a lot of practicals and getting your hands dirty in markdown.\nIn the lesson, you will be learning:\nHow to Set Up Markdown Tools. Markdown basic syntaxes and Formatting. How to Structure Contents in Markdown. Additional nested item Further nested item The best way to learn markdown is to use it at all times e.g. after this lesson, write an article in StackEdit.\nSee you in the next lesson.\n","date":"2024-08-21","id":3,"permalink":"/docs/markdown-course/getting-started-with-markdown/","summary":"This detailed guide covers how to Set Up Markdown Tools, markdown basic syntaxes and Formatting and how to Structure Contents in Markdown.","tags":[],"title":"Getting Started with Markdown"},{"content":"\rTechnical writing is a highly valued skill today, and the demand for technical writers will keep growing because of rapid advancements in science and technology.\nWhether you\u0026rsquo;re new to technical writing or just trying to improve your writing skills, get ready for a rewarding journey!\nSo, buckle up as we delve into the essentials of technical writing!\nErnest Hemingway says - “It’s none of their business that you have to learn to write. Let them think you were born that way.\nIn this Module, you will learn:\nWhat is technical writing? Different types of technical writing The audience for technical documentation The purpose of technical documentation The technical writing process What is technical writing? Technical writing is a specialized field that delivers clear and understandable instructions, directions, guidance, or information to a specific audience through documentation.\nIt mainly aims to break down hard concepts or information into simple concepts easily understood by the targeted audience.\nIn simple terms, technical writing gives people clear instructions so they can easily use things or solve problems.\nDifferent Types of Technical Writing Technical writing involves creating detailed instructions, step-by-step guides, or information about products or technology. A good technical writer needs to know the subject well so that their audience can easily understand the content.\nFor example, if a technical writer doesn’t understand programming, they won’t be able to write clear API documentation. API documentation requires knowledge of programming concepts like data types, arrays, and objects.\nMastering Technical Writing:\n1. Understand what\nyou\u0026#39;re writing about.\n2. Determine who it\u0026#39;s for.\n3. Keep it concise.\n4. Make it user-friendly.\n5. Refine, review, revise.\nMake it your mission to make the complex simple. The mysterious, known. pic.twitter.com/Ar76RE8AtK\n\u0026mdash; Wisdom Nwokocha 🥑 (@Joklinztech) January 15, 2024 Common types of technical documentation: 1. Technical reports: These documents provide detailed results of projects, research findings, investigations, and experiments in a specified field. They may include recommendations and conclusions.\nThe key elements of technical reports are the title, introduction, summary, experimental details, results and discussions, body, and conclusion.\nAn example of a technical report is the Complete Engineering and Economics of Solar Photovoltaic Hybrid Power System .\n2. Installation Guides: These documents assist users or customers in installing software, products, or systems correctly.\nInstallation guides give general instructions about products or software and step-by-step instructions for installation. Examples\nHome appliances Computer software Etc. An example is the Visual Studio Code set up guide that provides detailed step-by-step instructions for installing VScode on your computer.\n3. User manuals: These are also known as user guides or instruction manuals. It is a written document that provides information on product features, step-by-step guides, product functionality, and troubleshooting instructions in case of issues.\nAn example of a user manual is WhatsApp User Manual.\n4. Technical Specifications: These are manuals or documents that detail a product\u0026rsquo;s technical aspects. They also provide vital information about product development.\nFor instance, in software development, the technical specification manual provides essential information about an app, such as the problems it is solving, the features of the app, implementation plans, software\u0026rsquo;s architecture, programming languages, and libraries to be used for developing the app, the hardware requirement and testing procedures.\nAn example of a technical specification document is the Software Requirements Specification document.\n5. API Documentation: These documents guide users on integrating an application programming interface(API). It includes details on endpoints, authentication, request and response formats.\nAn example is the Paystack API documentation.\n6. Technical proposal: These are well-written documents that outline details of a proposed technical project, product, solution, and so on.\nThe primary goal of a technical proposal is to show actionable plans to stakeholders or decision-makers, persuading them to accept and support the proposed project.\nFor instance, if a writer proposes a project to a company, the proposal should provide an overview, scope, target audience, and other essential project details.\nClick on this Technical Proposal Template to learn how to structure your technical proposal.\n7. White Papers: These documents provide comprehensive analysis, information, or recommendations on a specific topic, product, or technology.\nWhite papers are used across various fields to provide in-depth reports to aid understanding and decision-making.\nAn example of a white paper is the WhatsApp Security White Paper.\n8. Release notes: These are documents that inform users, developers, or administrators about recent features of a software product, bug fixes, or any other update.\nFor example, a software company may introduce new features in their product, such as dark mood support, improved mobile responsiveness, streamlined navigation, and bug fixes, through release notes.\nThe Google Cloud Release Note is an example of a release note.\n9. Online help: These digital documents provide instructions, guidance, or information to assist users in effectively using products.\nFor example, Google Chrome\u0026rsquo;s online help informs users about the browser, new features, and issues reporting.\nOnline help enhances the user experience by offering troubleshooting guides and product insights.\nResearch\nExplore various forms of technical documentation, understand their purposes, and delve into their organizational structures\nAudience for technical documentation To become an effective technical writer, you must know your audience. Your audience is the people for whom you are writing.\nUnderstanding your audience is crucial because it determines what and how you communicate, allowing you to convey your message in a way that resonates with them. How can you know your audience?\nYou can understand your audience by asking yourself who they are. Consider questions like: Are my audience software developers, engineers, or technicians?\nAre they beginners or experts in their field? Why are they reading my documentation? What do they expect from it?\nAnswering these questions will help you determine your target audience and guide you in tailoring your writing style and content to meet their needs effectively.\nFor instance, you want to write an article titled: Introduction to technical writing.\nSome questions you need to ask yourself:\nIf you answer the questions above, this will help your readers understand this topic very well.\nNow, let’s use the questions above to know your target audience.\nWho am I writing for? Technical writers,\nWhat is their level of expertise? Beginners\nWhat do they expect from my article? They expect this article to give a comprehensive overview of technical writing, the audience for technical writing, types of technical documentation, tools and software for technical writing, and so on.\nPurpose for Technical Documentation There are numerous reasons for writing technical documentation. The purpose of technical documentation includes:\n1. Guidance: It provides comprehensive and easy-to-follow guidance, instructions, and directions on using a product, software, or service.\n2. Reference: It serves as reference materials for product or service users, as it details a product\u0026rsquo;s different features.\n3. Training materials: Technical documentation can be used to train new users, employees, or technicians.\n4. Updates: It is used by companies to provide information about upgrades in their product or service.\n5. Troubleshooting: Technical documentation provides troubleshooting guides that can help users when they encounter a problem while using a product.\nCheck your knowledge:\nQuestion 1:\rTo create effective technical documentation, a technical writer must possess subject matter expertise\nTrue False Maybe\rQuestion 2:\rTechnical specifications are documents that:\rDetail a product's technical aspects. They also provide vital information about product development.\rProvide comprehensive analysis, information, or recommendations on a specific topic, product, or technology. Inform users, developers, or administrators about recent features of a software product, bug fixes, or any other update. Technical writing process There are five technical writing steps.\nFigure 1: Technical writing steps\n1. Plan: A popular saying goes, “If you fail to plan, you plan to fail”. This principle applies to technical writing as well.\nBefore you begin writing, planning and preparing for your topic is essential. Planning can be as straightforward as creating bullet points outlining the project you want to cover.\nThis mental exercise will help you address important questions about your audience.\nAt the planning stage, you need to determine your document\u0026rsquo;s purpose and scope, writing style, and length. A well-thought-out plan saves time and ensures a successful outcome.\n2. Structure: Structure serves as the backbone of your documentation, providing the necessary organization for the hierarchy of your document.\nYou lay a framework for how your document will unfold at this stage. For instance, creating a table of contents enhances the organization of your content and mentally prepares you for the writing journey.\nIt is also important to note that the structure of your document is not a rigid constraint; it evolves as you write, allowing for adaptability as you write.\n3. Research: This stage is the foundational step in the documentation process. It involves getting all the information you need for your writing.\nThis includes reading relevant documents, watching videos, and interviewing experts in the field.\nFor instance, if you want to write about Google Chrome, you will need to read Google Chrome documentation and other relevant documents to know about its features and how they work. Watching tutorial videos, if needed, will help you gain more insights.\nTaking this approach will enable you to give your audience detailed and up-to-date information about the Google Chrome browser.\n4. Write: In this stage, you will put all the information you have gathered into a logical and cohesive document. You must also write simply, clearly, and concisely, always keeping your audience in mind.\nAdapt your language to resonate with the specific needs of your readers. For instance, if you are writing for beginners, focus on clarity and provide explanations to ensure solid understanding.\nFor experts, delve into technical details assuming a deeper knowledge base.\nRemember that the document’s structure established in the earlier stage is your guide.\nEnsure seamless navigation through the content by adhering to this structure.\nFor clarity, incorporate images, code snippets, tables, screenshots, and diagrams in your document as it helps your readers comprehend the message you are passing faster.\nAs you craft your document, envision your audience engaging with the material and tailor your writing to meet their expectations.\n5. Review: This stage is the polishing stage. In this stage, your goal is to ensure the overall quality of your document. Start with reviewing your document.\nAs you review, pay close attention to maintaining a consistent writing style, correcting grammatical errors, and addressing misspelled words.\nNext, consider seeking the input of experts or colleagues in the field to review your document formally.\nThe goal of this stage is not just error correction but the refinement of your document to meet the highest standard of clarity and professionalism.\n6. Publish: This stage is the final step in releasing your document to reach your intended audience.\nPlatforms like Medium, Hashnode, Devrel, and other social media platforms can serve as avenues for sharing your work with the world.\nConsider the nature of your content and your target audience when deciding the suitable platform for publication.\nExercise\nComplete the following exercises before procedding to the next module.\nNavigate to the Technical Writers Mentorship Program YouTube page and complete the following exercises:\nList and explain additional forms of technical documentation not addressed in this module\nChoose a subject that captivates your curiosity for our writing adventure\nIdentify your audience and articulate what they\u0026rsquo;re looking to gain from your article.\nClearly outline the structure of your document On which platform do you plan to publish your article?\nAlso, adhere to all the tips and measures from this documentation. After review, tag @TechnicalWriti6 on Twitter to the link to your article.\nAnswer the following questions.\nLoading...\r","date":"2023-11-15","id":4,"permalink":"/docs/technicalwritingcourse/intro-to-technical-writing/","summary":"This detailed guide covers the fundamentals of technical articles, effective technical writing strategies, various types of technical documentation, identifying your target audience, and the essential steps in the technical writing process.","tags":[],"title":"Intro to technical writing"},{"content":"\rIntroduction As a technical writer, it is important to know how to manage your activities, resources, and stakeholders or clients to ensure that the final document:\nMeets its objectives, Is delivered on time, and Is within the budget. This will require you to:\nCarefully plan and schedule your tasks, Manage your resources, Maintain a good communication channel and collaborate with stakeholders, while Keeping track of deadlines and budget constraints. In this Module, you will learn how to:\nPlan and schedule a technical writing project Manage resources Collaborate with other stakeholders Deliver the project on time and within budget Planning and Scheduling a Technical Writing Project Planning and scheduling are at the core of any successful technical writing project. This process involves:\nUnderstanding the scope of the project, Setting clear objectives, Developing a comprehensive project plan, and Establishing a realistic timeline. All of these steps ensure that every aspect of the writing project is thoughtfully put into consideration and carefully organized, facilitating its smooth execution and timely delivery.\n1. Understand the Project Scope Having a clear understanding of a project’s scope involves understanding not just the technical details of the content you are expected to develop, but also the expectations of your audience, the purpose of the document, and the overall objectives of the project.\nTo help you better understand the scope of your documents, you should ask questions like:\nWhat is the end goal of this project? Who will be reading this document? What level of detail and technicality is required? Answering these questions will set the foundation for all your subsequent planning and scheduling efforts.\n2. Set Clear, Achievable Objectives After defining the scope of your document, the next step is to set clear and achievable objectives.\nYour objectives should be SMART:\nSpecific, Measurable, Attainable, Relevant, and Time-bound. For example, rather than setting an unclear objective like:\n1 Write a user manual.\ra SMART objective would be:\n1 Write a 25-page user manual for the X software, targeting first-time users. To be completed in four weeks.\rClear objectives provide direction and focus for your project.\n3. Develop a Comprehensive Project Plan With your objectives in place, it\u0026rsquo;s time to develop an exhaustive project plan.\nThis plan will outline all the tasks that need to be completed, assigning them to the person responsible for each task, and attaching the deadlines for each of them.\nYou can divide your technical writing project into different time-bound phases, stating the deliverables and tasks within each phase.\nA well-thought-out project plan acts as a roadmap that will guide you and your team through the project\u0026rsquo;s lifecycle. It should be detailed enough to provide clear guidance but flexible enough to accommodate any unforeseen changes.\n4. Craft a Realistic Timeline One very crucial aspect of planning is creating a realistic timeline. This timeline should capture all the project’s phases, from:\nPlanning, to the Initial research and information gathering, to Writing, Reviewing, and Revising the document. Before allocating time for each task, consider the complexity of the subject-matter and the availability of resources and then allocate sufficient time, giving room for unforeseen events.\nRemember, underestimating the time required for tasks is a common pitfall in project planning.\n5. Milestones: Markers of Progress Identifying key milestones plays a crucial role in achieving your project’s objectives.\nMilestones serve as significant checkpoints where you can assess your project’s progress and help to ensure that your project is on track while providing opportunities to make any necessary adjustments.\nSome examples of milestones include:\nCompleting the first draft, Finishing the review process, or Finalizing illustrations and graphics. 6. Task Delegation and Team Coordination When working with a team, task delegation becomes a very essential part of the planning process.\nAssign tasks based on each team member’s strengths and expertise. Expectations, deliverables, and deadlines should be communicated, documented, and tracked.\nIf you\u0026rsquo;re working alone, break-down the project into manageable tasks and allocate time for each task to ensure steady progress.\nYou can make use of project management tools such as Trello, Asana, or Jira to enable efficient task delegation, tracking, and communication. These tools enhance collaboration among team members, helping in organizing workflow, while providing transparency.\n7. Anticipate and Manage Risks Every project has its risks and possible challenges. These could include anything from technical problems to delays in receiving information or feedback. When planning your project you need to anticipate these risks and have backup plans in place.\nThis might include allocating extra time to the project\u0026rsquo;s timeline for unforeseen tasks or having backup resources.\n8. Regular Reviews and Adjustments Finally, include regular reviews in your project’s timeline. These reviews will help you monitor progress, address any challenges, and modify the project timeline if necessary.\nPeriodic check-ins ensure that your project stays aligned with its objectives and can easily adapt to any changes or challenges that may arise.\nCheck your knowledge:\nQuestion 1:\rWhich of the following is NOT a crucial step in understanding the scope of a technical writing project?\nUnderstanding the audience's needs\rClarifying the purpose of the document\rDefining the budget constraints\rQuestion 2:\rA SMART objective for a technical writing project should be:\nWrite a user manual for a new software.\rCreate a 20-page user guide for the X software, targeting first-time users, to be completed in four weeks.\rWrite a comprehensive guide for the X product. Targeting Technical users.\rManaging Resources in Technical Writing Projects Effective resource management is integral to the success of your technical writing project. It ensures that your project is completed within the stipulated time frame and meets the desired objectives.\nResource management involves identifying, allocating, and utilizing various resources such as time, personnel, information, and technology efficiently.\n1. Identify Key Resources: To manage your project resources, you need to first identify them.\nThese resources can be:\nHuman resources: writers, editors, subject matter experts, etc. Information resources: technical documentation, research material, etc. Technological resources: writing and editing tools, project management software You need to know the readily available resources, what additional resources might be needed, and any constraints on these resources.\n2. Allocate Resources Effectively: Once you have identified the resources, the next step is to allocate them effectively.\nSteps to help you allocate human resources effectively:\n(a). Balancing Workloads: Assign the right tasks to the right persons. To do this you need to understand each team member’s capacity and assign tasks that match their skills, experience, and areas of specialization.\n(b). Balance Complexity and Routine: Distribute a mix of complex and routine tasks to keep the work engaging. When working in a team, periodically rotate tasks among team members to provide variety and prevent burnout.\n(c). Monitor Work Progress: Regularly check in on the progress of tasks. This allows you to identify any challenges early on and make adjustments to task assignments if needed.\n(d). Provide Feedback and Recognition: Acknowledge and appreciate team members for their efforts. Positive feedback and recognition contribute to a positive work environment and motivate individuals to maintain sustainable work practices.\n(e). Prioritize Tasks Effectively: Communicate task priorities. Ensure that team members understand which tasks are critical and require immediate attention, helping them manage their time effectively.\n(f). Provide Clear Instructions: Communicate expectations and guidelines for each task. Well-defined instructions reduce the likelihood of misunderstandings and ensure that tasks are completed efficiently.\n(g). Encourage Open Communication: Create an environment where team members feel comfortable communicating about their workload and potential challenges. Encourage them to ask for help when needed.\n(h). Use Project Management Tools: Leverage project management tools to assign, track, and manage tasks efficiently. Tools like Trello, Asana, or Jira provide visibility into task progress, making it easier to monitor workloads.\nSteps to help you allocate information resources effectively:\n(a). Understand Project Requirements: Have a clear understanding of your project\u0026rsquo;s scope, objectives, and information needs. Identify the types of information required for the specific technical content you are creating. You can check out this page of this course to learn more about information gathering.\n(b). Identify Key Information Sources: Determine the primary sources of information needed for the project. This may include:\nTechnical documentation, Subject-matter experts, Research materials, Existing documentation, and Any relevant databases. (c). Organize an Information Repository: Establish a well-organized system for storing project-related documents, research materials, and drafts. This will make it easy to access relevant information easily. You can use:\nFolders, Categories, or Tagging systems to streamline information retrieval. (d). Access to Subject Matter Experts (SMEs): Establish communication channels or meetings between yourself, the writing team, and SMEs. If you don\u0026rsquo;t have external SMEs, you can reach out to industry forums, online communities, or colleagues for insights and feedback on specific technical topics.\n(e). Utilize Document Management Systems: Even for a solo project, consider using document management tools or version control systems to keep track of different document versions and revisions.\n(f). Security and Access Controls: Implement security measures to protect sensitive information, especially if your project involves proprietary or confidential data.\nSteps to help you allocate technological resources effectively:\n(a). Assess Technological Requirements: Understand the technological needs of your technical writing project. Identify the software, hardware, and tools required to create, edit, and manage documentation effectively.\n(b). Choose Appropriate Writing and Editing Tools: Select writing and editing tools that align with your project\u0026rsquo;s requirements. This may include word processors, collaborative writing platforms, or specialized technical writing software.\n(c). Invest in Version Control Systems: Implement version control systems, such as Git, to track changes and manage document versions. This is crucial for solo projects or collaborative efforts to avoid confusion and track the evolution of documents.\n(d). Use Communication and Collaboration Tools: Employ communication tools like Slack, Microsoft Teams, or other collaborative platforms to enable real-time communication, file sharing, and quick collaboration among team members.\n(e). Explore Content Management Systems (CMS): If your documentation involves web content, consider using a content management system like WordPress, Drupal, or others. CMS platforms simplify content creation, publishing, and maintenance.\n(f). Leverage Graphic Design and Multimedia Tools: Depending on your project\u0026rsquo;s requirements, use graphic design and multimedia tools for creating visuals, illustrations, or multimedia elements. Tools like Adobe Creative Cloud or Canva can be valuable.\n(g). Ensure Accessibility Tools: If your audience includes individuals with accessibility needs, ensure your documentation complies with accessibility standards. Use tools and features that support accessibility, such as screen readers and alternative text.\n(h). Provide Training on Tools: Ensure that all team members are trained on the tools and technologies being used. Familiarity with these tools promotes efficiency and consistency in the writing process.\n(i). Regularly Update Software: Keep all software and tools up-to-date to benefit from the latest features, security patches, and improvements. Regular updates contribute to a stable and secure technological environment.\n(j). Consider Cloud-Based Solutions: Explore cloud-based solutions for document storage and collaboration. Platforms like Google Drive or Microsoft 365 enable real-time collaboration, version control, and accessibility from various devices.\n(k). Evaluate Tool Integration: Choose tools that integrate seamlessly with each other. Integration enhances workflow efficiency by reducing the need for manual data transfer between different software. An example integrating Slack with Google Calendar, Google Drive, and Jira, for seamless notifications, file sharing, and task management within a unified workspace.\n3. Monitoring Resource Usage: Throughout the project, it’s important to monitor how these resources are being used.\nAre team members overworked or underutilized? Are the tools and information sources proving effective? Regular monitoring helps in making necessary adjustments and ensures resources are being used optimally.\n4. Adapting to Changes: Project requirements may change, unforeseen challenges may arise, and team availability may fluctuate. Being prepared to adapt resource allocation in response to these changes is crucial for maintaining project momentum and quality.\n5. Post-Project Analysis: Finally, conducting a post-project analysis to review how resources were managed can provide valuable insights. This analysis can reveal areas of strength and opportunities for improvement, guiding better resource management in future projects.\nCollaborating with Other Stakeholders in Technical Writing Projects Working effectively with various stakeholders – including subject-matter experts, project managers, graphic designers, end-users, and clients – is essential for ensuring the accuracy, clarity, and usability of your technical document. Collaborating with stakeholders not only enriches the content but also helps in aligning the technical documentation with the broader goals and objectives of the project.\n1. Identify Stakeholders: The first step in effective collaboration is identifying all the stakeholders involved in your project.\nThis group might consist of:\nTechnical experts: who provide the necessary technical details, Project managers: who oversee the project\u0026rsquo;s progress, Graphic designers: responsible for visual elements, The Client: who has a vested interest in the project\u0026rsquo;s success, and The End-users: who will use the document. Understanding who these stakeholders are and what their roles and interests in the project are is crucial for successful collaboration.\n2. Establishing Communication Channels: Once stakeholders are identified, establishing clear and effective communication channels is key.\nThis might involve:\nRegular meetings, Email updates, or Using collaborative tools like Slack or Microsoft Teams. Your chosen methods should accommodate the preferences and needs of all the parties involved, ensuring that everyone is kept informed and can easily share their input.\n3. Building Relationships: Building strong, positive relationships with stakeholders is as important as the project itself. This involves understanding their perspectives, respecting their expertise, and valuing their contributions. A good working relationship can lead to more open communication, increased trust, and a more cooperative working environment.\n4. Creating a Collaborative Environment: Encourage a collaborative environment where your stakeholders feel comfortable sharing their ideas and feedback. This might involve brainstorming sessions, open discussions, or workshops. In such an environment, stakeholders are more likely to provide valuable insights and constructive criticism.\n5. Integrating Stakeholder Feedback: Actively seeking and integrating feedback from stakeholders is an important part of the collaboration process. This feedback can provide new perspectives, highlight potential issues, and improve the overall quality of the document.\nIt is important to balance stakeholders\u0026rsquo; feedback with the project\u0026rsquo;s objectives and constraints.\n6. Acknowledging Contributions: Recognize and acknowledge the contributions of each stakeholder. This will help foster a sense of ownership and pride and can lead to more engaged and committed stakeholders.\n7. Managing Conflicting Interests: In any collaborative project, there are bound to be conflicting interests or opinions. It’s important to manage these conflicts diplomatically and find compromises or solutions that align with the project\u0026rsquo;s objectives. Effective conflict resolution skills can help maintain a positive and productive working environment.\n8. Evaluating Collaboration Success: Post-project, evaluate the success of the collaboration.\nAsk these questions:\n1 What worked well?\r1 What could be improved?\rThis evaluation can provide valuable insights for future projects, helping to refine collaboration strategies and techniques.\nDelivering the Project on Time and Within Budget Delivering a technical writing project on time and within budget is a key measure of its success. This will involve not just careful planning and efficient execution but also proactive management of time and resources throughout the project lifecycle.\nStaying on schedule and within budget constraints requires a disciplined approach, constant monitoring, and the flexibility to adapt to unexpected challenges.\n1. Effective Time Management: Time management is critical in ensuring on-time delivery.\nThis involves:\nSetting realistic deadlines, Creating a detailed schedule, and Tracking progress against these timelines. Utilizing project management tools will help you visualize the project timeline and identify any potential delays early on. It\u0026rsquo;s also important to allocate extra time for unforeseen tasks or challenges, as they are common in complex projects.\n2. Budget Planning and Monitoring: Budgeting effectively means estimating costs accurately at the beginning of the project and then monitoring expenses throughout the project’s lifecycle. These expenses may include costs related to personnel, materials, software, and any other resources. Some steps to take when planning and managing your budget:\n(a). Choose the Right Budget Planning Tool: Select a budget planning tool that aligns with the size and complexity of your technical writing project. Popular options include Microsoft Excel, Google Sheets, or specialized project management tools with budgeting features.\n(b). Detailed Budget Breakdown: Break down the project budget into detailed categories such as:\nPersonnel costs, Software tools, Research materials, Outsourcing fees, and Any other relevant expenses. This allows for better tracking and analysis.\n(c). Allocate Resources Appropriately: Use a budget planning tool to allocate resources appropriately to different phases of the project. Ensure that each aspect of the project has a designated budget, preventing overspending in one area and shortages in another.\n(d). Realistic Cost Estimates: Provide realistic cost estimates for each budget category. Research costs associated with tools, materials, and services to ensure that your budget is based on accurate and up-to-date information.\n(e). Automate Calculations: Leverage the automation features of your chosen tool to perform calculations and generate reports. This will save time and reduce the likelihood of manual errors when tracking your budget.\n(f). Include Contingency: Allocate a contingency fund in your budget to account for unforeseen expenses or changes in project scope. This reserve helps you manage unexpected challenges without jeopardizing the overall budget.\n(g). Regular Monitoring and Updates: Regularly update and monitor the budget using the planning tool. Track actual expenses against the budgeted amounts and make adjustments as needed. This ongoing monitoring ensures that you stay aware of your project\u0026rsquo;s financial health.\nKeeping a close eye on the budget helps in identifying any overspending early, allowing for timely adjustments. Regular budget reviews should be scheduled to ensure expenses align with the project plan.\n3. Prioritizing Tasks and Milestones: Prioritize tasks based on their importance and deadlines. Focus on completing critical tasks that have the most significant impact on the project\u0026rsquo;s progress.\nUse milestones to break the project into smaller, manageable segments, each with its own set of tasks and deadlines. This will help track and maintain a steady pace throughout your project\u0026rsquo;s lifecycle.\n4. Resource Optimization: Efficient use of resources plays a vital role in staying within budget. Allocating the right amount of manpower and tools to each task and regularly ensuring that resources are used optimally to avoid wastage.\n5. Risk Management: Identify potential risks at the beginning of the project and develop strategies to mitigate them. Regular risk assessments should be conducted throughout the project to address any new risks that may arise.\n6. Adapting to Changes: Be prepared to adjust schedules, resources, and strategies in response to changing circumstances. This adaptive approach can help overcome challenges without significantly impacting the project timeline or budget.\n7. Effective Communication: Keeping all stakeholders informed about the project\u0026rsquo;s progress, any changes in the plan, and potential risks is crucial. This ensures that everyone involved is aligned and can respond quickly to any necessary changes.\n8. Post-Delivery Review: After your project’s completion, conduct a post-delivery review to evaluate the project\u0026rsquo;s success in terms of time and budget management. Analyze what worked well and where improvements can be made.\nComplete the following exercises before proceeding to the next module.\nThis exercise will challenge your ability to apply the principles discussed in this module to a practical scenario. It emphasizes the importance of planning, collaboration, and adaptability in real-world technical writing projects.\nExercise Imagine you are a technical writer assigned to document the launch of a new software product. Your task is to create a comprehensive project plan that covers all stages from the initial planning to final delivery. The software has several features, and it will be used by both technical and non-technical users.\nProject Scope: Define the scope of the project, considering the technical details, target audience, and overall objectives. Identify at least three critical questions you need to answer to understand the project\u0026rsquo;s scope effectively. SMART Objectives: Develop SMART objectives for the project. Ensure they are specific, measurable, attainable, relevant, and time-bound. Provide an example of one objective and explain how it meets each SMART criterion. Project Plan: Create a detailed project plan outlining tasks, responsible team members, and deadlines. Divide the project into phases. Include at least five tasks and their respective deadlines. Consider the complexity of each task in your timeline. Realistic Timeline: Craft a realistic timeline for the entire project. Consider the time required for planning, research, writing, reviewing, and revisions. Explain how you determined the time allocation for each phase and the factors influencing your decisions. Milestones and Progress: Identify three key milestones in your project. These could be related to drafting, reviewing, or finalizing specific sections. Describe how these milestones will help monitor progress and ensure the project stays on track. Task Delegation: If you are working with a team, delegate tasks based on each team member\u0026rsquo;s strengths and expertise. Specify at least three tasks and assign them to team members. If working alone, describe how you would break down the project into manageable tasks. Project Management Software Integration: Select a project management tool such as Jira, Trello, or Asana. Briefly explain your choice and how it suits technical writing projects. Task and Deadline Integration: Input tasks into the software corresponding to your project plan. Assign tasks to team members or yourself if working alone and set deadlines. Milestone Incorporation: Integrate project milestones into the software to mark significant points. Risk Management: Anticipate potential risks for the project, such as technical challenges, delays in feedback, or resource constraints. Propose at least two strategies for mitigating each identified risk. Submission Guidelines: Submission\nCreate a document outlining the above steps. Clearly label each section. Provide detailed explanations for your choices and decisions. Capture a screenshot of your project management software interface, showcasing the tasks, assignments, deadlines, and milestones you\u0026rsquo;ve added. Host your document on our blog or any other blog you wish to. Make a post and tag us on Twitter @TechnicalWriti6 Quiz: Answer the following questions.\nLoading...\r","date":"2023-09-15","id":5,"permalink":"/docs/technicalwritingcourse/managing-technical-writing-projects/","summary":"Build a solid foundation in project management practices for effective technical documentation","tags":[],"title":"Managing Technical Writing Projects"},{"content":"Content Marketing Content marketing is a sales strategy that shares unique, compelling content to attract and engage a target audience.\nIt is a business plan focused on driving profitable customer action. Content marketing is a relatively modern approach because it has become popular in selling products and services online.\nHowever, convincing people to purchase products has a solid history, even back to the age of trade and barter!\nContent Marketing and Traditional Advertisement Content marketing and traditional advertisement serve the same purpose: driving profitable customer action. Although their methods differ in achieving this purpose, they are different.\nTraditional advertisement does not allow two-way communication. Businesses advertise their products and expect results that come from selling more products.\nContent marketing, which is closely tied to digital marketing, is a two-way process. It caters to specific audiences that business owners can communicate with in real time through different media channels.\nWhile content marketing has been used for some time, we must understand the fundamentals. Many job roles require it as a skill, and most job descriptions for technical writers include some content marketing.\nThis article discusses the common terms used in content marketing, its benefits, how to choose a working strategy, various content formats to implement, and useful integrations. Let’s take a deep dive!\nBasic Terms in Content Marketing Lead A lead is an individual or company (representative) that interacts with your brand through your content about the services you offer.\nThis lead becomes a prospective customer who can be convinced to patronize you when they encounter more persuasive, compelling content about your brand.\nLead Generation Lead generation is a marketing strategy that involves attracting prospects for your business.\nThese efforts focus on areas or sites with a large demographic of people likely to be interested in the products and services your brand offers. For example, posting Instagram reels about Spring fashion ideas as a clothing brand is bound to attract customers.\nSales Cycle A sales cycle summarizes all the steps needed to turn a lead into a customer. It has seven stages, each covering the steps taken by the marketing team to make leads satisfied customers.\nThis cycle starts by looking for potential customers/leads and reaching out to them. When they respond, the team evaluates them to see if they’d likely purchase the product. Remember that while you aim to sell your product, you do not want to waste your time.\nAfter evaluation, the marketing team follows up with a sales pitch, where the individual is presented with the product/service and why it is the best option for them.\nNote that a product is a solution to a problem, so the product has to be the best for their needs.\nThe prospect will have doubts. They will want to be sure the product is a suitable choice and that they are not being ripped off. It is the marketing team\u0026rsquo;s job to assure them that they are making the right choice.\nAfter this is done, the marketer in charge can proceed to close the sale. This is where they fill out the paperwork, make payments, and ask for directions on how to set up their newly acquired purchase.\nWhile customers (that’s right, your lead is a customer now) are still basking in the euphoria of their newly acquired purchase, you can politely request a referral. Word-of-mouth goes a long way in marketing.\nThese are simple steps to make a sale; however, note that not all sales sail smoothly. Some leads require special attention. You might need to go over some steps in the sales cycle twice or more, hereby lengthening the bargaining process. Do not be rash with them.\nInbound Marketing This type of marketing uses content creation based on your brand’s goal to attract customers. It presents your product as a necessary solution instead of an option and places it at the top of their mental list when they need such services.\nThis is a continuous process that attracts site visitors, informs them about your services, and keeps them engaged until they are ready to take action that profits your business. The key here is to inform, not sell.\nWhen leads are adequately informed about your product and how well it suits their needs, they naturally drift toward a purchase without persuasion.\nCustomer Retention While it is good to make sales, it isn’t favorable to lose customers after a one-time purchase. Customer retention involves taking steps to prevent customers from making purchases from your competitors, that is, other businesses that offer the same services you do.\nAdvertisements cannot achieve customer retention. It is only possible when customers are pleased with the products they get from you and the accompanying customer service. If they sense a slight shift or experience discomfort, they can be easily convinced to try another business outlet.\nHow can you achieve customer retention? There are several sure-fire customer retention strategies, such as gamification and asking for feedback to keep customers engaged.\nBusiness-to-Business (B2B) B2B is a popular marketing term that refers to business-to-business interactions and transactions, in contrast to B2C - business-to-customer transactions.\nB2B is the crux of commerce, as businesses tend to make wholesale purchases, contributing large profits to your company’s purse. B2C focuses on retail transactions, often involving end consumers.\nContent Strategy A content strategy is a detailed roadmap that entails the production, release, circulation, and maintenance of content to increase brand awareness and sales.\nA brand’s content marketing team handles it. Their work covers determining the content format to produce and release at appropriate times, choosing the right distribution channels, and generating the most value with the released content.\nA good content strategy is not static; it is dynamic. Unforeseen factors can arise that require changes to the strategy. Developing a content strategy that works can prove daunting, but it can be remedied with a detailed tutorial.\nContent Calendar While a content strategy tells you what kind of content to create, a content calendar lets you know when to release it.\nA content calendar is a compiled rundown of all the events the marketing team will handle.\nTarget Audience A brand’s target audience is the group of people whose needs align with the brand’s products and services.\nThis means that they are potentially interested in what you have to sell; you just need to find them. The brand targets all of its content and advertising efforts at informing and engaging this audience for profitable customer action and continued loyalty after sales have been made.\nOwned Media Owned media refers to digital communication channels.\nExamples are official blog sites, social media pages, and newsletters. This contrasts earned media, also known as public relations (PR), where information about the company is shared by agencies and publications not affiliated with the brand.\nCompanies often pitch to these publications so their stories can be shared as news. In some cases, they have to pay for this kind of promotion.\nBenefits of Content Marketing You know that the sole purpose of marketing is sales and profit, but did you know there are more benefits attached? These are some advantages of content marketing.\nImprovement in Online Visibility A brand aims to increase the number of people who know about its products and purchase them. Marketing is predominantly on the internet, and online visibility is a key factor in ensuring that your brand remains relevant and in tune with the target audience’s needs.\nThis can be achieved through unique and consistent marketing strategies.\nLead Generation While it is easy to argue a producer knows the users’ needs, you cannot tell what all of them are thinking, at the same time. Content marketing creates a pathway for constant communication between you and potential customers.\nAs your brand gains more visibility, people interested in your services will contact it, and you will learn their needs, preferences, and how to keep them engaged. This will generate leads, thereby spurring the sales cycle into action.\nAuthority as an Industry Expert Being an industry expert is no mean feat; however, it can be achieved with the right steps. One of these involves consistently sharing high-quality content with the audience.\nThis keeps your brand at the forefront when topics concerning your services are raised. Over time, your brand will become associated with such topics, increasing the percentage of potential customers and sales.\nCustomer Retention Content marketing keeps your customers in close range after single or multiple purchases. Content serves as constant reminders for them that your company and its services can still satisfy their needs.\nIt also prevents them from being lost to competition, which also has their active marketing strategies.\nWhat is a Content Marketing Campaign? A content marketing campaign or strategy is a sum of the plans created to kick off the sales cycle and make a profit. This includes creating content that caters to your target audience and business plans.\nWhy do you need a content marketing campaign? As easy as it sounds, you cannot just create content and post it at will.\nYou need a plan that guides you toward your goal of making a profit. It also keeps you on track and prevents excessive spending that may occur through advertisements.\nMaking a content marketing campaign might seem difficult, but with the right steps, it can prove to be a profitable venture for you.\nChoosing a Content Marketing Strategy that Works Making a content marketing campaign might seem difficult, but with the right steps, it can prove to be a profitable venture for you.\nDefine Your Goals Defining your goals is the first step to a successful content strategy. Clearly state the end result you want for your brand, how you start, and the process you intend to take to achieve those results.\nDo you want more subscribers? Increased brand awareness? Increased profit?\nGoals help you keep track of milestones and recognize achievements.\nFor example, if you want more subscribers for a YouTube channel, more people who frequent YouTube must be aware that your channel exists.\nThis is your target audience; therefore, your content strategy should focus on releasing compelling content about your channel.\nThis informs them about your channel, its offers, and why they should prefer it over the competition. This will increase the number of subscribers who value your content.\nThey can also refer people to your page (word-of-mouth adverts), leading to more subscribers: your result!\nUnderstand Your Audience It is one thing to know your audience; it is another to understand them. The specific number of amassed followers on your social media pages and email lists is significant, but knowing the kind of content you send out that keeps them hooked is more important.\nTheir interests, needs, and challenges, this is the kind of information you need to make more actionable decisions going forward.\nFactors to consider include location, language, age group, and financial capabilities. These are not readily visible but can be gathered through data analytics. Knowledge of these leads to the creation of meaningful content that your target audience can resonate with and benefit from.\nYou also achieve optimal user experience.\nChoose Content Formats Content formats are several ways you can present information about your brand. Some popular formats are articles, blog posts, videos, social media posts, and newsletters.\nWhat you are reading now is a content format: an article discussing content marketing. A content marketing agency can use this means to inform its target audience about the importance of meaningful content creation.\nThey can also introduce their brand and why they are the best option for the job. Interested individuals can inquire about their pricing, and from there, sales kick in. All of these are possible with the right content format.\nA content format that is in tune with the target audience’s needs should be chosen.\nAlso, consider the type of message being passed across. Technical information would need detailed information such as videos and courses.\nFor faster dissemination, announcements and launches would need social media posts. Updates, reviews, and use cases can be shared as blog posts.\nThere is no one-size-fits-all measurement in content creation. Feel free to experiment based on your resources and gauge the success rate by the audience response. Consider factors like your goals, SEO, and current market trends.\nAnswer The Public is a great search tool for finding out market trends. Remember to consider best practices while creating content.\nPlan Distribution Channels After content has been created, it needs to be distributed to reach the target audience. Distribution channels vary, and while in-house channels bear the brunt of the work, earned media can provide a much-needed boost. People tend to believe what others tell them about a product rather than what the origin says. This is ironic, but it has been a long-lasting marketing strategy.\nCertain content formats have associated distribution channels. For instance, we know articles and blog posts are readable content, so they are posted on company blogs. Videos can be shared on YouTube channels. They can also be shortened to reels and TikToks. Newsletters are best sent to individual emails.\nMeasure Success Setting milestones is a sure-fire way to remain on track. We tend to ignore small successes because they seem insignificant, in the face of the main goal. Take a deep breath and acknowledge it.\nLet us examine this instance. For a food blog, how can you track your content marketing strategy performance?\nAssess key performance indicators (KPIs) on analytical platforms. KPIs are performance results of actions taken in a marketing campaign.\nThese KPIs include page views, social media engagement, impressions, and bounce rate. Several others can be found on analytical websites.\nSome social media platforms like Twitter have embedded analytics tools. You can add Google Analytics to the website for a detailed breakdown of your website visitors. A marketing dashboard can also be created to pool your data.\nContent Formats Used in Content Marketing These are common content formats used to boost content marketing efforts.\nArticles Articles are the longer version of blog posts. They are in-depth and often written to educate the target audience about an industry concept. Articles may not contain actionable content, as their main purpose is to inform, not to persuade.\nThey can be published on the company’s official blog or third-party blogs. Articles are often shared as how-to guides, listicles, landing pages, courses, and opinion pieces.\nArticles are very crucial when building the foundation of written content. They should be comprehensive, plagiarism-free, and focused on imparting knowledge.\nBlog Posts Blog posts are brief written pieces that can cover a wide range of information. A while ago, blogging was associated with journaling - storytelling sprinkled with carefree images.\nBrands however, have taken over the scene to build a perimeter about their business. Coupled with SEO, blog posts present well-researched, unique content, audio transcriptions, stock photos, and compelling pop-ups.\nMaybe you want to share a software update—there’s a blog post for that. A blog post can also suffice to announce a change in terms and conditions or to release content that ensures your relevance as an industry expert.\nVideos Almost every social media platform permits video uploads. Video content receives more engagement than written content. This shows that content marketing is a vast field with space for varying content formats.\nAt the Technical Writing Mentorship Program, we include content formats that resonate with our target audience. We figured out that most students learn better when they can revisit our lessons, so we record live classes and upload them on YouTube.\nWe also have lively discussions on technical writing with industry experts. Here are some examples:\nHow to get hired as a technical writer in Google Season of Docs 2024 How to make 4,000 dollars as a freelance technical writer Document and design API documentation using readme.io and Postman Videos can be posted on different channels in long or short form. In short form, they can be Facebook and Instagram reels, TikToks, and YouTube Shorts.\nIn long form, they can be presented as YouTube videos and standalone courses.\nEmails Emails are a great way to dispense information and create long-lasting customer relationships. You can build an email list by creating engaging content and including forms to collect vital information.\nThe form does not have to be complex; it should just be enough to know their names and email addresses.\nSend emails when necessary, using attractive headlines and engaging content. You can also send newsletters weekly or monthly highlighting new information about your business. Even if customers do not revisit your site frequently, they’d be kept up to date with recent developments.\nSocial Media Posts Posting on social media platforms boosts businesses, and can bring in more profit when handled professionally.\nPotential and existing customers get to build a relationship with the brand, and companies can gather first-hand data from these interactions.\nEach social media platform is unique. Posts should be made according to the type of content that resonates with the audience there.\nWhen this content naturally engages them, they tend to share the information on their personal pages. Such platforms include LinkedIn, Twitter, Facebook, TikTok and YouTube.\nIntegration with Marketing Channels and Their Tools Marketing channels are different avenues companies use to advertise their products. While it is not an aspect of content marketing, marketing channels also serve to attract customers. Here, we will discuss some types of marketing channels.\nWe will also examine their tools. With the right marketing channel tools, content marketing efforts can yield great results.\nEmail Marketing Email marketing is contacting customers by sending personalized content to their emails. It is an effective way to generate leads, site traffic, and sales.\nYou can also measure the success of content marketing campaigns by observing the audience response.\nThese are some industry-leading email marketing platforms you can use for your business.\nMailChimp\nMailChimp is an email marketing software suitable for all business types, from small startups to large enterprises. It sports pre-built email templates and automation that promise ease of use.\nThe platform houses various tools that support business email creation and marketing. These tools include drag-and-drop features, integrated analytics to monitor campaign data and AI support.\nIt is also beginner-friendly and offers onboarding services.\nZoho Campaigns\nZoho Campaigns is an email marketing software that promises to be an exclusive solution for e-commerce businesses. You can implement its features by connecting your e-commerce website.\nMost of its unique features are SMS marketing, email cadence, and contact path tracing. It allows third-party integrations with Shopify, HubSpot, Zapier, and others.\nBest Practices for Email Marketing\nKeep these in mind when preparing content for your email list.\nUse short, eye-catching titles. Use sub-headings, bold, and italics where necessary. Keep your paragraphs short; a minimum of three sentences a maximum of 5. Add visuals. Include a call-to-action (CTA). Make sure it is suited for mobile devices. Remember, email marketing is just one part of the process. Other factors should also be considered to ensure a successful marketing campaign.\nFor instance, if you include an actionable link to a website in your email—that is, a link you want your readers to click on—make sure it has a fast loading time.\nIf the page loads slowly, both the content and images, readers might get impatient and leave your site. This ultimately ruins the aim of the email sent to their inboxes.\nSocial Media Marketing This involves using social media platforms to generate leads and build personalized relationships with the customer base. Social media apps with a large majority of the target audience are perfect for marketing.\nSome include Facebook, Instagram, Reddit, Twitter, LinkedIn, and YouTube.\nWhile people do not purchase from display ads in content, they’d readily buy the same item off a Facebook page. This makes social media an important pawn in the marketing game.\nBest Practices for Social Media Marketing\nDo you want to boost conversions on your social media pages? Dig in!\nDetermine the social media platforms your target audience is based on. Set clear goals and milestones. Open professional accounts. Establish important KPIs. Create and share engaging content. Observe your competition. Schedule posts to ensure consistency. Engage the audience by replying to messages and holding live sessions. Review your strategy after meeting milestones. With the rise of influencer marketing, other factors like viral marketing and public relations (PR) have an added advantage. Influencers use products and share their experiences with others.\nWhile this is a good marketing strategy, it requires patience. This form of marketing shares information about your brand. For sales to happen, more actionable content is needed. Mutual collaboration between your marketing team and influencers of your choice can solve this.\nSearch Engine Optimization (SEO) Search engine optimization (SEO) is the process of improving content so it can appear organically on search engines like Google and Microsoft Edge. When you publish content, search engine bots crawl it to determine whether it is AI-generated, plagiarized, or not useful.\nIf your content is free from these, it will appear on the first and second pages of search engine result pages (SERPs). There are free and paid analytical tools to help you optimize your content so it can rank organically.\nGoogle Analytics\nGoogle Analytics is a free analytical tool that provides detailed insights into your customers. When you connect it to your website, it presents information about your site visitors, their geographic location, and the interests that brought them to your page.\nYou can also check the revenue your page generates. Google Analytics works well with other tools that fuel marketing efforts, such as Google Ads, Google Search Console, and Google Ads 360.\nSEMrush\nSEMrush is a SaaS platform that houses several tools for marketing content and offers specialized SEO services to optimize content for organic ranking.\nIts features include domain overview, site traffic analytics, organic research, and backlink authority.\nIt is beginner-friendly, and allows real-time content creation with the SEO writing assistant. This tool can also be added as a browser plugin. If you have difficulty creating an outline, the SEO content template can help.\nBest Practices for Search Engine Optimization (SEO)\nThese are SEO best practices to boost your content marketing efforts for visibility.\nWork with a content brief. A content brief is a guide that ensures all your content has the same tone, structure, and message. Post high-quality content consistently to establish relevance. Include keywords in your content. Observe competition on SERPs. Analytical software like Google Analytics and SEMrush help you focus on gaining more visibility. Use them to combine your SEO and content marketing efforts effectively. You can also plan an SEO strategy alongside your content marketing campaign for the best results.\nPut Your Content to Work Marketing involves conducting research, handling campaigns, and creating content. With a detailed content marketing campaign, SEO strategy, and marketing channels, you can reach your target audience. Use the right tools within your reach, create unique content, and let your content work for you.\nTechnical writing mentorship program is your one-stop shop for learning technical writing. With free videos and written courses, you’re on your way to becoming a technical writer!\n","date":"2024-05-01","id":6,"permalink":"/blog/what-is-content-marketing/","summary":"Content Marketing Content marketing is a sales strategy that shares unique, compelling content to attract and engage a target audience.","tags":["content marketing","writing","content strategy"],"title":"What is Content Marketing?"},{"content":"\rPhoto Credit: Neowin\nAre you enthusiastic about exploring the Visual Studio code editor as a noob?. If yes, this article is for you.\nVisual Studio(VS) code is a lightweight code editor developed by Microsoft. It supports Windows, Linux, and MacOS operating systems.\nVisual Studio code can also be used as a text editor. It is written in typescript and Javascript.\nThis Integrated Development Environment (IDE) is developer-friendly and easy to use. This documentation will guide you through the:\nThe system requirement for installing VS code The installation process Features of Visual Studio Code Navigating through Visual Studio code System Requirement To install the VS code editor you must have the following system requirement\n1.6 GHz or a faster processor. Above 1GB RAM space. Windows, Linux, or MacOS operating system. Stable internet connection for the installation process. Getting Started Follow these steps for easy installation of the VS code IDE\nStep 1: Go to the Visual Studio code website\nStep 2: Click on your preferred operating system(OS) and download. In this guide, I will be using Windows OS.\nStep 3: Locate the downloaded file in your folder\nStep 4: Click on open\nStep 5: Select the I accept the agreement and click on Next\nStep 6: Select the Create Desktop Icon and click on Next\nStep 7: Click on Install\nStep 8: Allow to install\nStep 8: Click on Finish\nStep 9: Visual Studio code will open with this interface\nFeatures of Visual Studio Code VS code IDE has a lot of beautiful features that enhance developers in its coding environment. Some of the features are listed:\n1. Debugging: This feature allows you to debug your code using a breakpoint.\n2. Syntax highlighting: VS code highlights your code when there is a syntax error.\n3. Code refactoring: This feature allows you to restructure your code without altering the behavior or performance.\n4. Embedded Git: VS code comes with an embedded Git feature that enables you to store your projects remotely.\n5. Code Completion: This feature enhances the developer\u0026rsquo;s speed and eases the stress of fully typing cnertain keywords or code. It auto-completes and also suggests code for you.\nExample\nIf you want to type a keyword in a particular programming language, VS code automatically displays various keywords related to what you want to type for you to select.\n6. Custom theme: This feature allows you to customize the user interface of your VS code.\n7. Keyboard shortcuts: VS code provides you with numerous keyboard shortcuts for navigating within the editor.\n8. Extensions and support for other programming languages: VS code allows you to download and install various extensions into the IDE. It also supports various programming languages such as Java, Python, C++, Kotlin, etc.\nNavigating through Visual Studio Code Navigating through VS code doesn\u0026rsquo;t require much experience as a beginner. This IDE is simple and easy to navigate. Upon launching your VS code a beautiful interface will be displayed on your screen.\nI will explain each section of the User Interface (UI) using the label in the images below.\nActivity Bar 1. Explorer: This allows you to navigate between the files inside your folder.\n2. Search: To search for files in the directory that open in VScode.\n3. Source Control: Label three represents where you make your commits, push, pull, and other GitHub activities to and from your remote repository.\n4. Run and debug: Label four allows you to run your code and debug.\n5. Extension: Label five allows you to search for different extensions you want to download in the marketplace.\n6. Account: Label six indicates your account on VS code.\n7. Settings: Label seven comes with different features that allow you to customize your VS code theme, check for updates, keyboard shortcuts, etc.\nWelcome 1. New file: Create a new file\n2. Open file: Open previous files\n3. Open folder: Open a folder from a different location on your PC.\n4. Clone git repository: Allows you to clone a git repository\n5. Connect to: Allows you to connect to a remote development workspace.\nMenu Bar 1. File: Create, save, open, files e.t.c\n2. Edit: Edit the document or files you are working on.\n3. Selection: This tab consists of keyboard options that allow you to make selections while working on your file.\n4. View: Shows and allows you to switch between different views within VS code.\n5. Go: Allows you to switch between editors.\n6. Run: Allows you to run and debug your code.\n7. Terminal: Allows you to run different git commands while working on your project.\n8. Help: Provides different options on how to navigate through VS code. It also contains documentation, a playground, video tutorials, etc.\n9. Search Bar: Search for files in the directory that is open in VS code\n10. Toggle Primary Sidebar: Splits your screen into two parts in the left direction.\n11. Toggle Panel: Opens the terminal where you can debug, run git commands, check for errors e.t.c\n12. Toggle Secondary sidebar: Splits your screen into two parts in the right direction.\n13. Customize layout: This allows you to customize your layout by setting the visibility. It also has some other cool features full screen mode, zen mode e.t.c\nWrap Up VS code is a code editor whose IDE is easy for beginners to adapt. In this guide, we discussed\nGetting started with VS code. Some basic features of VS code. How to navigate through VS code. Hope you enjoyed my article.\nConnect with me on Linkedln and Twitter\n","date":"2024-03-23","id":7,"permalink":"/blog/how-to-use-visual-studio-code-for-beginners/","summary":"Photo Credit: Neowin\nAre you enthusiastic about exploring the Visual Studio code editor as a noob?. If yes, this article is for you.","tags":["coding","VS Code"],"title":"How To Use Visual Studio Code For Beginners"},{"content":"\rGoogle Summer of Code (GSoC) is an annual program sponsored by Google that helps introduce students and open-source beginners to software development.\nIt aims to encourage students to participate in open-source projects and allow them to gain real-world experience, mentorship, and financial support. GSoC is a highly competitive program, but it offers numerous benefits for those who are accepted.\nIn this blog post, you will understand what GSoC is and why you should apply. You will also get tips for applying for the program.\nBy the end of this post, you will clearly understand the program and be inspired to take the first step toward participating in GSoC.\nWhat is GSoC? GSoC provides a platform for students to learn from experienced developers, contribute to meaningful projects, and gain valuable experience that can help kickstart their careers in software development.\nSince its inception in 2005, GSoC has connected over 20,000 contributors to over 19,000 mentors associated with more than 800 open-source organizations. The program has produced millions of lines of code and has significantly impacted the open-source community.\nGSoC typically takes place during the summer for three months (12 weeks). During this time, contributors work full-time on their projects, receiving guidance and feedback from their mentors.\nAt the end of the program, students showcase their work to the global community through presentations, demos, and written reports.\nGoogle loves open source, and GSoC is one of the ways they show their commitment to supporting and nurturing the open source ecosystem.\nBy participating in GSoC, students can gain exposure to real-world software development, learn from experienced mentors, and make meaningful contributions to open-source projects.\nWhy Should You Apply? GSoC is aimed at students or open-source beginners, so if this describes you, you should consider applying.\nThe program is designed to help you grow as a developer and gain valuable experience to help you stand out in the job market.\nThe following are some reasons why you should apply for GSoC:\nIt looks good on your CV: Having GSoC on your resume will make you stand out. It shows the recruiter that you have built real-world software, worked with a team and delivered results. This can be a huge advantage when applying for internships or full-time positions.\nYou get paid: Writing code all summer wouldn\u0026rsquo;t be the dream of any student. But with GSoC, you get paid for your work. This can be a great way to earn some money while gaining valuable experience. It\u0026rsquo;s not life-changing money, but it\u0026rsquo;s a nice bonus.\nAffiliation with cool organizations: Imagine being a cloud engineer and getting to contribute to Kubernetes via the CNCF organization. That\u0026rsquo;s the kind of opportunity GSoC provides. You get to work with some of the coolest open-source organizations in the world such as Apache, Chromium, Webpack, etc.\nMentorship: More than any internship can provide, close hand-holding from experienced mentors is what you get with GSoC. You get to learn from the best and get feedback on your work. This is one of the most effective ways of growing as a developer.\nNeed more convincing?\nCheck out the Why Should I Apply section of the Google Summer of Code Guide.\nHow Does GSoC Work? GSoC is a 12-week program; however, the application process starts months before the coding period begins.\nThe first two phases of the program involved the organizations. Organizations submit applications to be part of the program and after evaluation, the accepted organizations are announced.\nThe next phase is the contributor application period. During this time, students can apply to work on projects proposed by the accepted organizations.\nStudents are expected to submit a project proposal that outlines their plan for the summer, including the features they plan to work on, the timeline for their work, and the skills and experience they bring to the table.\nThe GSoC contributor application phase for 2024 commences March 18 - April 2. So start preparing your proposals now.\nAfter the application period, organizations review the proposals and select the students they want to work with.\nOnce you have been selected, you\u0026rsquo;re required to work full-time on your project for the duration of the program. During this period, it is essential to maintain constant communication with your mentor.\nDuring the first three weeks of the program, you\u0026rsquo;re expected to familiarize yourself with the codebase and community as well as begin preparation for the coding phase.\nAfter the back-and-forth hassle from the contributor to mentor during the coding phase comes the evaluation phase.\nHere, mentors and contributors submit their evaluations of one another. After which, the contributors submit their code and project summaries for a final evaluation from their mentors.\nThe mentors evaluate the submission of the contributors and determine if they have successfully passed the program.\nAfter this final evaluation, contributors are then notified of the status (pass/fail) of their GSoC project.\nDon\u0026rsquo;t fret; even if you fail, you still get paid for your work. However, it\u0026rsquo;s advisable to give your best.\nTips for Applying The following tips will give you a head start in the application process:\nChoose an organization that aligns with YOU:\nBefore applying, take the time to research the organizations that are participating in GSoC.\nLook for organizations that align with your interests, skills, and career goals. This will help you find a project that you are passionate about and that will help you grow as a developer.\nA good way to do this is by asking yourself:\nWho am I? and Who are they?\nThe answers to these questions will help you find the organization that aligns perfectly with you.\nSubmit proposal early:\nThe organizations and mentors have a lot of proposals to review, so it\u0026rsquo;s a good idea to submit your proposal early.\nThis will give the mentors more time to review your proposal and ask you questions if they need more information. It also shows that you are proactive and organized.\nCoupled with submitting on time, you’ll need a strong proposal. A strong proposal is well thought out and detailed and shows that you clearly understand the project you are applying for. It should also demonstrate that you have the skills and experience needed to complete the project.\nMost organizations have templates that you should follow. However, in the absence of any, use the format on the Writing a Proposal page of the GSoC guide.\nGet actively involved in the community:\nBefore applying, it\u0026rsquo;s a good idea to get involved in the community or the organization you are interested in.\nThis will help you familiarize yourself with the codebase and the community and show the mentors that you are serious about contributing to the project.\nTo actively participate in your potential organization\u0026rsquo;s community, you must find and join its communication channels.\nThese could be its mailing list, Slack, Discord, or any other platform it uses. You can also start contributing to the project by fixing bugs, writing documentation, or helping other contributors.\nGive your best:\nGSoC is a highly competitive program, so always giving your best is important.\nFrom the application phase down to the final evaluation, always show up, contribute, and be a good teammate. In the end, all you can do is your best, so just do it!\nIn the end What\u0026rsquo;s stopping you from applying? GSoC is a great fit for anyone new to open source or a student willing to elevate their software development skills.\nThe perks of this program are numerous, and the experience is invaluable. So, if you fit this category, you should consider applying for GSoC.\nIf you\u0026rsquo;re still not convinced, check out the GSoC archive to see the amazing projects built by thousands of students worldwide over the past ten years.\nFurther Reading Google Summer of Code Guide GSoC FAQs Contributor Stipend GSoC 2024 organizations ","date":"2024-03-18","id":8,"permalink":"/blog/gsoc-for-beginners-a-guide-to-google-summer-of-code/","summary":"Google Summer of Code (GSoC) is an annual program sponsored by Google that helps introduce students and open-source beginners to software development.","tags":["Open Source","GSoC"],"title":"GSoC for Beginners: A Guide to Google Summer of Code"},{"content":"\rSearch engine optimization(SEO) focuses on optimizing website content for better visibility on the search engine result page (SERP).\nThe goal is to drive organic traffic/results that are not paid i.e., the traffic is not gotten through Google ads.\nAccording to Brian Dean, Over 60% of traffic on the web comes from search engines such as Google, Binge, Yahoo, YouTube, etc.\nThis guide covers core SEO concepts to help improve website visibility. Outline includes:\nThe basics of SEO Finding effective keywords to target Optimizing content for search crawlers Strategies for building high-quality backlinks Tracking and analyzing search performance over time You will also get detailed information on how search engines work and the key ranking factors that Google uses.\nWhat is SEO and Why it Matters SEO is a strategy for optimizing your website for higher ranking on search engines such as Google, binge, YouTube, yahoo, etc.\nThis process involves detailed research on the needs of your audience and creating high-quality content that is relevant, useful, and accurate.\nWhy it Matters SEO is crucial in getting traffic, leads, and customers to your web page. It also boosts your brand recognition. SEO comprises both technical and content practices.\nThere are three key factors taken into consideration for optimizing your website visibility on various search engines:\nRelevancy: This focuses on how relevant your content is on various search engines; for example, Google filters pages that are closely related to your keyword e.g., a user searches for the best shoe brand in the world, Google looks for a page that contains information and keywords related to the user’s search. Authority: This focuses on the accuracy and truthfulness of your content. The authority of a page is determined by the number of pages that link to your webpage. Note\nBacklinks are links from other pages. The more backlinks a page possesses, the higher its ranking will be on Google.\nHowever, Google\u0026rsquo;s ability to measure the authority of webpages using links makes it stand out from other search engines.\nUsefulness: Usefulness of content is very important in SEO as this gives room for higher ranking. It focuses on how you organize your content. According to Google, there is a clear distinction between higher-quality and useful content. Google measures the usefulness of your page through how users interact with search results. Example\nWhen a user searches for specific information, an expert writes the first result, which contains quality content and many backlinks.\nHowever, if the content is not well organized and full of jargon, Google will rank a page with well-organized content that is easy to understand.\nKeyword Research Keyword research is the process of finding keywords that users search for. It is SEO\u0026rsquo;s most crucial component.\nYou can better understand your target audience by conducting keyword research. It provides you with information about what people are looking for.\nHow to Develop Seed Keywords Seed keywords give you keyword ideas that are less competitive to rank for. You must use seed keywords on your keyword research tools to get a better keyword.\nHow do you develop seed keywords?\nStart by brainstorming relevant words and phrases related to your business or industry. e.g., an industry that sells sports kits and wear will search for seed keywords like soccer cleats for midfielders, best soccer shoes, etc.\nFind searches related to terms in Google search. For example, you have a term in mind, such as best soccer shoe. When you scroll down, you will find a list of keywords closely related to your search term.\nNote\nThese are keyword ideas from Google, meaning tons of people are searching for these keywords.\nClick on one of the related search terms, scroll down again, and you will see a bunch of keywords you can add to your seed keyword list.\nCheck out Wikipedia: Head over to Wikipedia and enter a keyword related to your niche that will take you to the Wikipedia entry for the broad topic. Go to the content section and you will see a list of subtopics with awesome keywords. You can also click on the internal links on the page and check the table of contents and other related entries. Semrush keyword magic tool: Semrush keyword tools make it easy for you to choose keywords with low difficulty For example, when you type your seed keyword in the Semrush keyword magic tool, you will see various keywords with different degrees of difficulty.\nExample\nWhen you type your seed keyword in the Semrush keyword magic tool, you will see various keywords with different degrees of difficulty.\nLink to the Sermrush keyword magic tool Find topics on Reddit: You can find a lot of great keywords on Reddit, a social media platform where users share information, news, discussion, etc. Head to Reddit and enter a keyword that interests your target audience and about your niche. Choose a subreddit and check out for threads with many comments and likes. Generate Keyword ideas using Semrush Now that you have seed keywords compiled in a list. Take these seed keywords to the Semrush keyword research tool for an overview. For example, if your keyword is pet names, enter the keyword and click on search; Semrush will give you a bunch of metrics.\nChoose Keywords Choose keywords with the most potential. You can do this by checking out three key pointers\nCompetition: This is how hard it is to start ranking on Google. For beginners, you should target keywords with low competition keywords. To find the low, competitive keywords in Semrush, click on kd%; you will see a drop-down ranging from easy to hardest. Select easy or very easy; this will bring up the lowest competition terms on the list. Revenue potential: This explains the revenue that the specific keyword can make. To get the revenue potential, use the Semrush tool by checking out the cost-per-click CPC\nProduct keyword fit: This explains what the keyword has to do with your brand or what you sell. Consider if the keyword fits your brand or the product you are selling.\nSearch volume: This explains the number of persons searching for the keyword you entered.\nChoosing a keyword with a high search volume for your industry is important. You can do that using the Semrush tool. The Semrush tool brings up various search volumes for various keywords.\nNote\nYou get more traffic if your keyword has a high search volume.\nUser Intent: Your user intent is what your users search for.\nTypes of Keyword Long tail: are usually more targeted and specific. It has 3-5 words, for example, best shoe brand in the world. This keyword is more specific.\nShort tail: A short tail is usually short, like 1-2 words; for example,** shoe brand** is an example of a short tail keyword. They are nonspecific.\nOptimizing your Content for Search Crawlers The key to SEO is publishing great content, which is the foundation of SEO. The key to publishing great content is to use:\nProven content templates These are templates that are designed specifically for Ranking in Google.\nExpanded list post: This is like a regular list post. A list post is like a content main state; they are a collection of bite-sized tips that people can use to get specific results. With the expanded list post, you can give a lot of details about each item on your list Ultimate guide: This is a complete resource that covers everything. Your guide should complete all the knowledge or information the user needs in your content. Tools of the trade: This is a list of tools you recommend. For example, you wrote content on how to rank on Google and recommended that your users study Brian Dean\u0026rsquo;s SEO course. On-page SEO Optimization On-page SEO is making sure that Google finds your web pages so that they can show users search results. It also involves having valuable content. You need to let Google know what your page is all about.\nGoogle scans your webpage for unique words and phrases, recognizing these keywords. This tells Google the main focus of your content and accounts for the importance of using your target keyword on your page.\nTop 3 steps for optimized SEO content\nYour title tag is KEY: Front-load your main keyword i.e. start your title tag with your main keyword. This is important because search engines pay close attention to the terms you use and your title tag. Internal Linking: Adding a link from one page on your site to another page on your site. It is recommended to link to other pages on your site that are closely related to your main topic (write examples)For example you have a topic titled Best Soccer cleat, you can add a link from your blog with the topic Soccer cleats for men. Optimize your page for user experience: This involves improving your site\u0026rsquo;s user experience. UX improves your SEO when users stick to the page Google thinks you have a great page, which will boost your ranking to make your page easier to find. UX also helps with SEO, as people are likely to share and link to user-friendly sites. So, if your site has a bunch of broken links, intrusive pop ups, and ads, people aren\u0026rsquo;t going to link to it even if you have great content. After doing these three steps, use the Semrush SEO writing assistant. This feature analyses your content and provides detailed recommendations on optimizing your content. If your content is already published, you can import content from Google Docs or text from a live webpage to the SEO writing assistant.\nBuild backlinks to your site Link building refers to having links from other websites to your website.\nQuality links Building backlinks to your site involves getting quality links; quality links here refer to links with high authority. Quality links have three features which include:\nThe authority of the page and website linking to you: Links from authoritative pages and websites pass more authority to your website. To check for the authority of a website, copy the URL, go to Semrush, and place the link on Domain Overview you; will see the authority score. The higher the authority score, the more authority your site will have. In the above image, search for a keyword on Google\u0026rsquo;s best soccer cleats, copy the first URL link, and place it on the SemrushSermrush Domain Overview tool. You can see that the website has an authority score of 97%\nRelevance of the site linking to you: Links from sites related to your site or niche give more SEO value than those from other industries. Links from relevant sites show Google that your site is legit. Using the Backlink Analytics tool, you can also check the type of sites you are getting backlinks from on Semrush. In the above image, you can see the categories of websites the URL gets backlinks from, which is related to the site niche.\nEditorially placed links: Editorial links are hyperlinks where someone links back to you because your site has high-quality content, useful resources, etc. Strategies for Building High-Quality Links The sky-scrapper technique Find a piece of content in your industry that performed well regarding backlinks: A simple Google search is the easiest way to do that. Search for a keyword on Google, copy the URL of the first page that appears, and place it on the Semrush Backlink Analytic tool. Create a piece of content that is 5-10x better: Go through the content on the first page and find a way to write more unique and better content. Broken link Find a page that you would like to get a link from Use a tool like Check My Links to scan the page for broken links: Let the site owner know that their page has a broken link and that you have a page on your site that can replace the link by suggesting replacing your content with the dead link. This method is very effective. Instead of asking for something, you offer help first. You can do this by sending a mail using the sample below. Credit: Brian Dean Crash SEO Publish original data and industry studies: With studies, you are giving bloggers and journalists what they want, data that they can site in their articles\nBuild links from unlinked brand mentions: This involves someone mentioning your site, but they won\u0026rsquo;t link to your site. These brand mentions are great opportunities to get backlinks.\nCompetitor analysis: This involves analyzing your competitor\u0026rsquo;s backlinks. To do this, pop a competitor into Semrush and then hit the backlink analytics tool. This approach gives you insight into what approaches work best in your niche so you can double it down.\nEmail outreach: This method also works but involves sending the right kind of emails; your email content should provide value to the people you are emailing. Semrush has a cool feature called a link-building tool. The tool speeds up the process; all you need to do is set up a project for your site and it automatically generates a list of link prospects for you. You can also send outreach emails directly using the tool.\nTracking, Monitoring and Analyzing SEO Performance Tracking SEO results is very important. This will help you check whether the approach you are using works well. Monitoring your results is also very important, as this lets you know whether you are on the right track.\nKey Metrics to Track Organic Traffic: Traffic from search engines. You should also track Google rankings for your main keywords. Website ranking alone doesn\u0026rsquo;t provide all the information about your SEO because website rankings are unstable. You can see your site\u0026rsquo;s organic traffic in the Google Analytics and Sermrush organic research tools. The above image shows the domain or URL of a website e.g. fourfourtwo; click on search, which will display information about your website\u0026rsquo;s organic traffic.\nNote\nSEO takes a lot of time for improvement\nIndividual Keyword Ranking: Ranking your keywords will give valuable insight into whether your site is trending in the right direction. Clicks and Impressions: The Google console gives you a ton of information on your site\u0026rsquo;s overall SEO performance, and you can use it to measure results from your SEO results. The total number of Google users clicked on your website from the search results is called clicks. Impressions are the total number of users that saw your site in the search results. Traffic Cost: Semrush traffic cost estimates the value of a site\u0026rsquo;s SEO traffic. This tool also measures traffic quality. Conversions: for example, you can track the number of persons that sign up to your email list, purchases, etc. Other Keyword Tools There are varieties of keyword tools, which include:\nAhref Google Keyword Planner Uber Suggest Keyword.io tool etc. Wrap Up Mastering SEO requires doing the essential work, dedication, and patience. We discussed\nWhat is SEO and why it matters Keyword Research Building backlinks to your site Tracking and Monitoring SEO Other Keyword Tools Applying the knowledge gained from this guide can enhance your online visibility and drive sustainable growth in your business or industry.\nConnect with me on Linkedln and Twitter\n","date":"2024-03-07","id":9,"permalink":"/blog/master-the-basics-of-seo-using-semrush/","summary":"Search engine optimization(SEO) focuses on optimizing website content for better visibility on the search engine result page (SERP).\nThe goal is to drive organic traffic/results that are not paid i.","tags":["SEO","writing","Semrush"],"title":"Master the Basics of SEO Using Semrush"},{"content":"\rAntora is a static site generator that transforms AsciiDoc content into documentation sites.\nAsciiDoc is a lightweight markup language for creating notes, articles, books, and web pages. Its simplicity allows complex documents using plain text files.\nThis guide walks you through building a documentation site with Antora and AsciiDoc, including exporting to PDF, HTML, and other formats.\n1. Install Antora First, make sure you have Node.js installed on your system. Then, follow these steps:\nCreate a new directory for your documentation project.\nOpen a terminal and navigate to the project directory.\nRun the following command to install Antora:\n1 node -e \u0026#34;fs.writeFileSync(\u0026#39;package.json\u0026#39;, \u0026#39;{}\u0026#39;)\u0026#34; \u0026amp;\u0026amp; npm i -D -E @antora/cli@3.1 @antora/site-generator@3.1\rThis command creates a package.json file and installs the Antora CLI and site generator as development dependencies in your project.\nTo verify that Antora is installed, run the following command:\n1 npx antora -v\rIf you encounter any issues during the installation, refer to the official installation guide.\n2. Set Up Your Documentation Content Create an Antora playbook file (e.g., antora-playbook.yml) in your project directory. This file defines the structure of your documentation.\nSpecify the content sources (e.g., Git repositories, local directories) where your documentation files reside.\nDefine the UI bundle (e.g., a theme) that Antora will use to generate your site.\nPlaybook configuration\nA playbook is a configuration file that tells Antora where to find the content and UI resources it needs to generate a documentation site.\nTo create a playbook, follow these steps:\nUsing your preferred text editor or IDE, create a new file.\nPopulate the file with the configuration information provided below.\n1 site: 2 title: Antora Docs 3 start_page: component-b::index.adoc 4 content: 5 sources: 6 - url: https://gitlab.com/antora/demo/demo-component-a.git 7 branches: HEAD 8 - url: https://gitlab.com/antora/demo/demo-component-b.git 9 branches: [v2.0, v1.0] 10 start_path: docs 11 ui: 12 bundle: 13 url: https://gitlab.com/antora/antora-ui-default/-/jobs/artifacts/HEAD/raw/build/ui-bundle.zip?job=bundle-stable 14 snapshot: true\rThis is the default playbook configuration from Antora.\nThis playbook file will create a site using the Antora demo repositories.\nSave the file as antora-playbook.yml in the root folder.\nSite: Contains the documentation site’s title and start page. Content: Specifies content repository locations. UI: Defines the location of the UI bundle. URL: Content repository URL. Branches: Selected branches from the content repository. Start Path: Root path in the content repository. Bundle: UI bundle URL. Snapshot: Determines whether to use the UI bundle as a snapshot. 3. Generate Your Documentation Site In the terminal, navigate to your project directory.\nRun the following command to generate your site in the root folder:\n1 npx antora generate antora-playbook.yml\rThis command tells Antora to generate the documentation site in this folder build/site using your created playbook.\nSite generation complete!\nOpen file:///Users/wisdomnwokocha/Desktop/Doctest/build/site/index.html in a browser to view your site.\nCopy the URL and open the index.html file in your browser to see the result.\nTo run Antora remotely, use the following command:\n1 npx antora -fetch antora-playbook.yml\rAdd this flag --fetch to fetch from a remote repo.\nAntora will clone the content and UI repositories and generate your documentation site to the default output directory.\nCongratulations!\nYou’ve successfully built your first site with Antora.\nBasic Syntax Now that you’ve created a documentation site, it’s time to learn how to create content using AsciiDoc.\nTo create content in AsciiDoc, you need to understand basic syntax.\nHere’s a simple example:\n1 = Getting Started with Antora 2 John Doe \u0026lt;john.doe@asciidoctor.org\u0026gt; 3 4 == Section 1 5 6 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed sagittis metus at est scelerisque, nec faucibus neque dapibus. Duis vitae mi at eros tincidunt consequat. 7 8 === Subsection 1.1 9 10 Integer eget nibh nec nulla euismod finibus. Proin non ipsum vel leo rhoncus venenatis. Nam nec pharetra lorem. 11 12 .Table Title 13 |=== 14 |Name of Column 1 |Name of Column 2 |Name of Column 3 15 16 |Cell in column 1, row 1 17 |Cell in column 2, row 1 18 |Cell in column 3, row 1 19 20 |Cell in column 1, row 2 21 |Cell in column 2, row 2 22 |Cell in column 3, row 2 23 |===\rThis example demonstrates the basic structure of an AsciiDoc document.\nThe = character is used to define the document title. The == characters are used to define the section titles. The === characters are used to define the subsection titles. The \u0026lt;\u0026gt; character is used to define the author’s email address. To learn more about the syntax, refer to the AsciiDoctor Quick Syntax Reference.\n4. Export as PDF, HTML, DocBook You can export your AsciiDoc documents to PDF, HTML, and DocBook formats.\nAn easy way to export your documents is to use the AsciiDoc extension for Visual Studio Code.\nAsciiDoc Extension for VSCode To use the AsciiDoc extension for Visual Studio Code, you need to install it from the Visual Studio Code Marketplace.\nMake sure the extension you install is published by Asciidoctor.\nThe extension looks like this:\nAfter installation, ensure the extension is enabled in your Visual Studio Code settings.\nExport as PDF To export your AsciiDoc document as a PDF, follow these steps:\nOpen the command palette using the following command: ctrl+shift+p // On Windows. Alternatively, use F1. cmd+shift+p // On Mac\nSelect AsciiDoc: Export document as PDF. The AsciiDoc extension will prompt you to select the PDF\u0026rsquo;s desired file name and location.\nSave as HTML To generate HTML from your Asciidoc file, follow the steps below:\nOpen the command palette.\nSelect AsciiDoc: Save HTML document. The file is generated in the same folder as the source document.\nTo quickly do this, use the shortcut keys below:\n1 ctrl+alt+s \\\\ On Windows 2 cmd+alt+s \\\\ On Mac\rSave to DocBook Docbook is another type of markup language used in technical documentation.\nTo save your AsciiDoc file to Docbook, follow the steps below:\nFrom the command palette.\nSelect AsciiDoc: Save to DocBook.\nThe file is generated in the same folder as the source document.\nOnly DocBook 5 is supported.\n5. Customize your Playbook and publish Antora on Github Create a /docs in the root folder of your project.\nCopy the content from the GitHub repository’s docs folder into your own.\nModify the content as needed.\nWork Offline:\nRun the following command to generate your site using the modified playbook: 1 npx antora antora-playbook.yml\rUpdate Your Playbook:\nEdit your playbook (antora-playbook.yml) with the following configurations:\nYour URL is pointing to the root folder (.)\n1 site: 2 title: Wizzy Docs 3 start_page: component-b::index.adoc 4 content: 5 sources: 6 - url: . 7 start_path: docs 8 ui: 9 bundle: 10 url: ./ui-bundle 11 antora: 12 extensions: 13 - \u0026#34;@antora/lunr-extension\u0026#34;\rPush all changes to your GitHub repository. Configure GitHub Pages for your repo[Link to do this on Github]. Use the following Git Action workflow to deploy your Antora page to GitHub Pages: Ensure you have enabled your repository\u0026rsquo;s GitHub Pages by creating a gh-pages branch.\n# Simple workflow for deploying static content to GitHub Pages\r1 name: Deploy Antora static content to Pages 2 on: 3 # Runs on pushes targeting the default branch 4 push: 5 branches: [\u0026#34;main\u0026#34;] 6 # Allows you to run this workflow manually from the Actions tab 7 workflow_dispatch: 8 # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages 9 permissions: 10 contents: write 11 pages: write 12 id-token: write 13 # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. 14 # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. 15 concurrency: 16 group: \u0026#34;pages\u0026#34; 17 cancel-in-progress: false 18 jobs: 19 deploy: 20 environment: 21 name: github-pages 22 url: ${{ steps.deployment.outputs.page_url }} 23 runs-on: ubuntu-latest 24 steps: 25 - name: Checkout 26 uses: actions/checkout@v4 27 - name: Setup Pages 28 uses: actions/configure-pages@v4 29 - name: Upload artifact 30 uses: actions/upload-pages-artifact@v3 31 with: 32 # Upload entire repository 33 path: \u0026#34;./build/site\u0026#34; 34 - name: Deploy to GitHub Pages 35 id: deployment 36 uses: actions/deploy-pages@v4 37 with: 38 github_token: ${{ secrets.GITHUB_TOKEN }} 39 publish_dir: ./build/site # Update this to match your Antora output directory\rTo Publish Your Changes:\nMake Edits: Update your documentation files as needed.\nCommit: Commit your changes to Git.\nPush to GitHub: Always push your changes to GitHub.\nLive Updates: Your updated content will be live once it’s pushed to the repository.\n6. Azure DevOps pipeline for publishing Antora Page to AzureStaticWeb: Follow the Same Process as GitHub:\nJust like you did for GitHub, follow a similar process for AzureStaticWebApp. Make sure your documentation is ready and committed in your repository. Create an Azure Pages Workflow:\nSet up a workflow file (e.g., azure-pages.yml) in your repository. This workflow will deploy your Antora page to AzureStaticWebApp. 1 name: Azure Static Web Apps CI/CD 2 pr: 3 branches: 4 include: 5 - main 6 trigger: 7 branches: 8 include: 9 - main 10 jobs: 11 - job: build_and_deploy_job 12 displayName: Build and Deploy Job 13 condition: or(eq(variables[\u0026#39;Build.Reason\u0026#39;], \u0026#39;Manual\u0026#39;),or(eq(variables[\u0026#39;Build.Reason\u0026#39;], \u0026#39;PullRequest\u0026#39;),eq(variables[\u0026#39;Build.Reason\u0026#39;], \u0026#39;IndividualCI\u0026#39;))) 14 pool: 15 vmImage: ubuntu-latest 16 steps: 17 - checkout: self 18 submodules: false 19 - task: AzureStaticWebApp@0 20 inputs: 21 azure_static_web_apps_api_token: [TOKEN-HERE] 22 ###### Repository/Build Configurations - These values can be configured to match your app requirements. ###### 23 # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig 24 app_location: \u0026#34;./\u0026#34; # App source code path 25 app_build_command: \u0026#34;npx antora --fetch antora-playbook.yml\u0026#34; 26 api_location: \u0026#34;\u0026#34; # Api source code path - optional 27 output_location: \u0026#34;./build/site\u0026#34; # Built app content directory - optional 28 ###### End of Repository/Build Configurations ######\rConclusion ","date":"2024-02-29","id":10,"permalink":"/blog/introduction-to-antora-for-beginners/","summary":"Antora is a static site generator that transforms AsciiDoc content into documentation sites.\nAsciiDoc is a lightweight markup language for creating notes, articles, books, and web pages.","tags":["antora","guide","doc as code","documentation"],"title":"Introduction to Antora for beginners"},{"content":"\rContainers are a way to package, deploy, and manage applications. Docker is a popular open-source containerization platform that allows you to package your application, its OS libraries, and dependencies together into a container image.\nThis container image can be run on any system regardless of the underlying OS.\nUsually, companies could have very few containers, which can be easily managed. However, with companies rapidly adopting containers, several containers can be managed.\nThis is where container orchestration platforms come in. Kubernetes is an open-source container orchestration platform that automates containerized applications\u0026rsquo; deployment, scaling, and management.\nWhen setting up a Kubernetes cluster, you have to create and manage the Kubernetes control plane and the worker nodes.\nThese individual tasks can become complicated because of the complexity of the Kubernetes architecture.\nFor this reason, most companies rely on managed Kubernetes services that abstract the complexity of managing the Kubernetes control plane while still providing the flexibility to manage the worker nodes.\nAWS provides a managed Kubernetes service called Elastic Kubernetes Service (EKS), and you\u0026rsquo;ll learn how to deploy your containerized application to it in this tutorial.\nUltimately, you\u0026rsquo;ll understand why major companies adopt managed Kubernetes services, especially Amazon EKS.\nWhy EKS? Amazon EKS is a managed Kubernetes service that allows you to run Kubernetes on AWS without installing, operating, and maintaining your own Kubernetes control plane.\nIt is fully compatible with the Kubernetes API, and you can use it to run your applications in a highly available manner across multiple availability zones.\nWith EKS, you only have to create and manage the worker nodes. AWS manages the control plane.\nThis means you can focus on building and running applications without worrying about the complexity of managing the Kubernetes control plane.\nEKS automatically upgrades the Kubernetes control plane and applies patches to the underlying nodes. This ensures your cluster is always updated with the latest security patches and features.\nSince EKS is part of the AWS ecosystem, you can use other AWS services like IAM, VPC, and CloudWatch to manage and monitor your EKS cluster. This makes it easy to integrate your EKS cluster with other AWS services.\nProject Setup There are several ways to create an EKS cluster, such as through the AWS EKS console, AWS CLI, or Terraform. However, in this tutorial, you\u0026rsquo;ll learn how to use the eksctl command-line tool to create an EKS cluster.\nThe application will be containerized using Docker, and the container image will be pushed to the Amazon Elastic Container Registry (ECR).\nThe EKS cluster will then be created using eksctl, and the application will be deployed from the container image in ECR.\nThe deployment will be done using the Kubernetes CLI, Kubectl and the application will be exposed to the internet using an AWS Load Balancer.\nWhat is eksctl? eksctl is a simple command-line utility created by Weaveworks that makes it easy to create, manage, and operate Kubernetes clusters on Amazon EKS. It automates the creation of an EKS cluster and the worker nodes via the CLI.\nIt is the official CLI tool for Amazon EKS and is written in Go. It is open-source and is actively maintained by the community.\nPrerequisites This tutorial will be done on the AWS cloud platform. You\u0026rsquo;ll need an AWS account to follow along. If you don\u0026rsquo;t have an AWS account, you can create one here. You\u0026rsquo;ll also need the following:\nAWS CLI installed and configured with your AWS account credentials. Install the AWS CLI by following the instructions here. Kubectl. Install kubectl by following the instructions here. Docker. Install Docker by following the instructions here. Application Setup The application you\u0026rsquo;ll be deploying is a sample hello-world application provided by Google Cloud Platform. It is a simple web application that listens on port 8080 and returns a \u0026ldquo;Hello, World\u0026rdquo; message.\nThe application is written in Go and the source code is available on GitHub. Clone the repository by running the following command:\n1 git clone https://github.com/GoogleCloudPlatform/kubernetes-engine-samples.git\rChange into the directory of the application:\n1 cd kubernetes-engine-samples/quickstarts/hello-app\rStep 1 - Containerize the Application You need a Dockerfile to containerize the application, however, the application already has a Dockerfile. View the content of the directory to confirm the presence of the Dockerfile.\nThe following steps will guide you in building the Docker image and pushing it to Amazon ECR.\nBuild the Docker image:\n1 docker build -t hello-app .\rCreate an ECR repository. Navigate to the AWS console and search for ECR. Click on Get Started. Give the repository a name and leave the other settings as default. Once you\u0026rsquo;re done, click on Create repository.\nFigure 1. Create ECR Repository\nAuthenticate Docker to the ECR registry:\n1 aws ecr get-login-password --region \u0026lt;region\u0026gt; | docker login --username AWS --password-stdin \u0026lt;account-id\u0026gt;.dkr.ecr.\u0026lt;region\u0026gt;.amazonaws.com\rImportant:\nReplace \u0026lt;region\u0026gt; with your AWS region and \u0026lt;account-id\u0026gt; with your AWS account ID. You can get the exact push commands for your ECR repository by clicking on the View push commands button on the ECR console.\nFigure 2. View Push Commands (ECR Repository)\nTag the Docker image:\n1 docker tag hello-app:latest \u0026lt;account-id\u0026gt;.dkr.ecr.\u0026lt;region\u0026gt;.amazonaws.com/hello-app:latest\rImportant:\nReplace \u0026lt;account-id\u0026gt; with your AWS account ID and \u0026lt;region\u0026gt; with your AWS region.\nPush the Docker image to ECR:\n1 docker push \u0026lt;account-id\u0026gt;.dkr.ecr.\u0026lt;region\u0026gt;.amazonaws.com/hello-app:latest\rImportant:\nReplace \u0026lt;account-id\u0026gt; with your AWS account ID and \u0026lt;region\u0026gt; with your AWS region.\nView the pushed Docker image on the ECR console.\nFigure 3. ECR Repository Image\nStep 2 - Install eksctl You\u0026rsquo;ll need to install eksctl if you haven\u0026rsquo;t already. This tutorial uses a Linux machine. If that\u0026rsquo;s not the case, you can find the installation instructions for your OS here.\nDownload and install eksctl:\n1 curl --silent --location \u0026#34;https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz\u0026#34; | tar xz -C /tmp\rMove the extracted binary to /usr/local/bin:\n1 sudo mv /tmp/eksctl /usr/local/bin\rTest the installation:\n1 eksctl version\rYou should see the version of eksctl installed.\nStep 3 - Create an EKS Cluster You\u0026rsquo;ll use eksctl to create an EKS cluster. The following command will create an EKS cluster with two worker nodes of type t3.medium in the us-east-1 region.\n1 eksctl create cluster --name test-cluster --version 1.29 --region us-east-1 --nodegroup-name linux-nodes --node-type t3.medium --nodes 2\rThe --version flag specifies the Kubernetes version to use. The --nodegroup-name flag specifies the name of the node group and the --nodes flag specifies the number of nodes to create.\nModify the flags to suit your needs. The command will take a few minutes to complete and you\u0026rsquo;ll see the progress in the terminal. After completing the command, you can view the created EKS cluster on the AWS console.\nFigure 4. EKS Cluster on AWS Console\nStep 4 - Deploy the Application Using eksctl, your EKS cluster information gets automatically added to the kubeconfig file. This means you can use kubectl to interact with the EKS cluster.\nTo verify, run the following command:\n1 kubectl get nodes\rThis should display the two worker nodes you created.\nDeploy the application using the helloweb-deployment.yaml file. This file contains the deployment configuration for the application.\nNavigate to the kubernetes-engine-samples/quickstarts/hello-app/manifests directory and view the content of the helloweb-deployment.yaml file.\nThe deployment configuration specifies the container image, the number of replicas, and the port to expose. However, you need to modify the helloweb-deployment.yaml file to use the container image you pushed to ECR.\nImportant:\nReplace the image field with the URL of the container image in ECR. The URL should be in the format \u0026lt;account-id\u0026gt;.dkr.ecr.\u0026lt;region\u0026gt;.amazonaws.com/hello-app:latest.\nAfter modifying the file, apply the deployment configuration:\n1 kubectl apply -f helloweb-deployment.yaml\rThis will create a deployment for the application. You can view the created deployment by running the following command:\n1 kubectl get deployments\rStep 5 - Deploy the Service The application is deployed but it\u0026rsquo;s not accessible from the internet. You\u0026rsquo;ll create a service to expose the application to the internet. The service configuration is in the helloweb-service-load-balancer.yaml file. In the same directory, view the content of this file.\nThe service configuration specifies the type of service to create, the port to expose, and the target port. The service type is LoadBalancer which means an AWS Load Balancer will be created to expose the application to the internet.\nApply the service configuration:\n1 kubectl apply -f helloweb-service-load-balancer.yaml\rThis will create a service for the application. View the created service by running the following command:\n1 kubectl get services\rThe service will take a few minutes to be created after which you can view the Load Balancer on the AWS console.\nFigure 5. Load Balancer on AWS Console\nStep 6 - Access the Application After the service is created, you can access the application online. Run the following command to get the URL of the Load Balancer:\n1 kubectl get svc\rAccess the application by visiting the URL in your browser.\nFigure 6. Hello World Application running on Browser\nClean Up After you\u0026rsquo;re done with the application, eksctl makes it easy to delete the EKS cluster and the worker nodes automatically. You can also delete the ECR repository to avoid incurring unnecessary costs.\nDelete the EKS cluster:\n1 eksctl delete cluster --name test-cluster\rDelete the ECR repository: Navigate to the ECR console and delete the repository.\nCommon Issues You might encounter a few issues when deploying an application to Amazon EKS. The following are some of the common issues and how to fix them:\nVersion incompactability. This error is encountered when connecting to the EKS cluster using kubectl. The error message looks like this:\n1 Unable to connect to the server: getting credentials: decoding stdout: no kind \u0026#34;ExecCredential\u0026#34; is registered for version \u0026#34;client.authentication.k8s.io/v1alpha1\u0026#34; in scheme \u0026#34;pkg/client/auth/exec/exec.go:62\u0026#34;\rThe key thing to note in this error message is the version v1alpha1. This means the kubectl version is not compatible with the EKS cluster version\nTo fix this, upgrade the AWS CLI package installed on your machine. You can do this by running the following commands:\n1 curl \u0026#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\u0026#34; -o \u0026#34;awscliv2.zip\u0026#34; 2 unzip awscliv2.zip\rAccess Denied. This error occurs when you try to create an EKS cluster using eksctl and you don\u0026rsquo;t have the necessary permissions or the AWS CLI is not properly configured. The error message looks like this:\n1 Error: checking AWS STS access – cannot get role ARN for current session: operation error STS: GetCallerIdentity, get identity: get credentials: failed to refresh cached credentials, no EC2 IMDS role found, operation error ec2imds: GetMetadata, http response error StatusCode: 404, request to EC2 IMDS failed\rTo fix this, ensure you have the necessary permissions to create an EKS cluster and that the AWS CLI is properly configured.\nYou can also check the AWS CLI configuration by running the following command:\n1 aws configure list\rThis will display the AWS CLI configuration. Ensure that the aws_access_key_id and aws_secret_access_key are properly configured.\nConclusion In this tutorial, you learned how to deploy a containerized application to an Amazon EKS cluster. You containerized the application using Docker, pushed the container image to Amazon ECR, and created an EKS cluster using eksctl. You then deployed the application to the EKS cluster and exposed it to the internet using an AWS Load Balancer.\nAs much as this looks like an easy process, it is still quite manual and not feasible for large-scale applications or companies. For a better approach, DevOps teams rely on automating the process using IaC and CI/CD tools. This ensures that the deployment process is repeatable, consistent, and reliable.\n","date":"2024-02-28","id":11,"permalink":"/blog/how-to-deploy-a-dockerized-application-to-amazon-eks-cluster/","summary":"Containers are a way to package, deploy, and manage applications. Docker is a popular open-source containerization platform that allows you to package your application, its OS libraries, and dependencies together into a container image.","tags":["AWS","DevOps"],"title":"How to Deploy a Dockerized Application to Amazon EKS Cluster"},{"content":"\rWriting compelling and Google-friendly content is essential. The Google developer documentation style guide provides invaluable insights and guidelines to help you achieve this goal.\nFollow these steps to harness the power of the style guide and craft stellar articles that captivate your audience.\nWant to write clear, concise, and Google-approved content? Look no further than the Google developer documentation style guide!\nStep 1: Identify your content type The first step is to understand the type of content you\u0026rsquo;re creating. Is it a blog post, technical documentation, user guide, or something else?\nEach type may have slightly different formatting and style considerations.\nStep 2: Break down your content Once you understand the content type, identify specific areas where you might need guidance. For example, are you including:\nLists of items Code snippets Technical terms Definitions Step 3: Consult the Google writing style guide Head over to the Google developer documentation style guide: https://developers.google.com/style. Navigate through the relevant sections based on your identified content areas.\nStep 4: Find specific recommendations For instance, if you\u0026rsquo;re writing a list, search for \u0026ldquo;lists\u0026rdquo; in the guide. You\u0026rsquo;ll find helpful insights on:\nFormatting: Bullet points vs. numbered lists Punctuation: Commas or semicolons after list items Clarity: Ensuring each item is clear and concise Step 5: Apply \u0026amp; adapt Based on the guide\u0026rsquo;s recommendations, adapt your content to adhere to the suggested formatting and style. Remember, adapt the guidance to your specific content and context.\nStep 6: Proofread \u0026amp; refine Finally, proofread your content thoroughly, ensuring consistency with the style guide\u0026rsquo;s recommendations and your own unique voice.\nBy following these steps and leveraging the Google writing style guide, you can create polished, informative, and Google-friendly content!\n","date":"2024-02-20","id":12,"permalink":"/blog/how-to-use-a-google-writing-style-guide-to-write-performing-articles/","summary":"Writing compelling and Google-friendly content is essential. The Google developer documentation style guide provides invaluable insights and guidelines to help you achieve this goal.","tags":["writing style guide"],"title":"How to Use a Google Writing Style Guide to Write Performing Articles"},{"content":"\rDo you love to explore the depths of the internet and share your insights with the world?\nAre you a master at extracting valuable information from websites and distilling it into concise summaries?\nIf so, then the Glasp Writing Contest is tailor-made for you!\nObjective: Craft an informative and engaging article that showcases how Glasp can be utilized to highlight key points, add insightful notes, and generate summaries from websites and YouTube videos.\nKey Points to Cover: 1. Highlighting and Annotating Web Pages and PDFs: Describe how Glasp allows you to highlight essential content directly on web pages and PDFs.\nShare examples of how you’ve used Glasp to mark key passages, important concepts, and relevant data.\nExplain how this feature has improved your comprehension and retention.\n2. YouTube Summaries Made Easy: Explore Glasp’s ability to provide concise summaries of educational YouTube videos.\nDiscuss how you’ve leveraged this feature to grasp complex topics quickly.\nHighlight specific instances where Glasp’s summaries have been a game-changer for your learning process.\n3. Efficiency Boosts and Joyful Learning: Dive into the impact Glasp has had on your overall learning efficiency.\nReflect on moments when Glasp made studying more enjoyable and engaging.\nShare any “aha” moments or breakthroughs you’ve experienced.\nSubmission Guidelines Article Length: Your article should be over 1000 words.\nOriginal Content: Avoid plagiarism; write in your own words.\nAudience: Assume your readers are novices eager to learn.\nGrammar and Clarity: Proofread meticulously; clarity is key.\nImages: Include relevant screenshots or visuals demonstrating Glasp in action.\nCitations: Properly cite external sources (if any).\nDeadline: Submit your article by March 5th, 2024.\nPrizes: Winners will receive $100 Amazon gift cards and recognition.\nHow to Submit Write your article. Tag Glasp (@glaspco) and TWMP (@twmp_org) on Twitter. Use the hashtag #GlaspTWMPContest. Winners will be announced on March 10th, 2024. ","date":"2024-02-20","id":13,"permalink":"/blog/glasp-writing-contest-how-glasp-helped-you-learn-faster-and-better/","summary":"Do you love to explore the depths of the internet and share your insights with the world?\nAre you a master at extracting valuable information from websites and distilling it into concise summaries?","tags":["writing contest"],"title":"Glasp writing contest: How Glasp Helped You Learn Faster and Better"},{"content":"(Tips from GSOD’s past Interns) The Google Season of Docs is one of the most influential open source platforms for technical documentation beneficial to organizations and technical writers. It supports open source projects to improve their documentation and allows professional technical writers to gain experience in open source.\nCurrently many technical writers worldwide are clamoring to get into Google season of docs, so you need to get it right – to GET IN.\nAlso, Google Season of Docs focuses on technical documentation and technical writing-based contributions. Unlike Google Summer of Code and other Google open source initiatives, the Google Season of Docs is an annual paid internship program. It aims to improve the technical documentation of open source projects and provides opportunities for technical writers to contribute to open source.\nWho can participate in GSOD? The Google rules that concern writers state that, as long as you are above 18 years old at the time of registration, you are eligible to work in your country of residence. You should also have prior experience as a technical writer.\nKeep in mind:\nThe Google Season of Docs program is said to favor professional technical writers, but it is not necessary to have extensive documentation experience to be accepted. Quoting Nelson from his interview with Linda Ikechukuw on Everything Technical Writing, he stated that he had no prior knowledge of documentation - but saw it as a valuable learning experience. While some technical writing experience is required, having top-notch documentation skills is not a prerequisite. However, being able to learn quickly is vital.\nBenefits of participating in GSOD GSOD aims to improve the documentation of open source projects and technical writers. It provides an avenue of mentorship from the open source organization, gains exposure to real-world documentation challenges, and contributes to the broader open source community.\nLet’s explore some more benefits in detail;\nYou gain Open source experience: Participating in GSOD has several benefits. It allows you to learn more about open source and its significance and helps you understand how to contribute. Moreover, you connect with like-minded open source enthusiasts, maintainers, and organizations. By participating in GSOD, you can claim the Open Source contributor badge with evidence, which is a solid achievement.\nYou improve your skills: Contributing to GSOD gives you more real-world experience working on technical documentation. In addition to improving your technical skills, participating in projects and collaborative work can help you enhance your ability to work well with others, communicate effectively, work in teams, generate ideas, conduct research, and more. This sort of work can also help you identify areas where you may need to improve your skills and provide opportunities to develop and strengthen those areas.\nYou earn: In participating, you get stipends from Google paid through the organization. It is a rewarding experience to learn, contribute, and get paid. GSOD provides a completely stellar open source package.\nAccess to future opportunities: GSOD helps expand your network. You become the person other beginners want to learn from, someone mentors/seniors can work with for other opportunities.\nGSOD gives you the access to be easily recommended and referred by mentors you work with to opportunities they would be sure you can handle based on their experience working with you.\nIf you plan on stalling this year – Here is your cue – Don’t!\nWorking tips to get into GSOD 2024 Prepare your proof of experience: The GSoD program provides an excellent opportunity for seasoned technical writers to leverage their expertise and explore the world of open source software. However, the program is for individuals familiar with technical writing and requires training to enhance their skills.\nOrganizations do not have the time or resources to train. They require solid evidence showing your abilities to deliver high-quality documentation and articles. Therefore, you must have a portfolio of past work to show.\nAs the saying goes from our Nigeria Twitter space, \u0026ldquo;You go explain tire, no evidence.\u0026rdquo; In other words, it is not enough to claim you are a professional technical writer. You need a robust body of work demonstrating your capabilities.\nSo what do you do? Show your already demonstrated technical writing skills through blog posts, documentation projects, etc. How do your skills and experience benefit the organization? Do you know the tech stacks used by the organization? Your portfolio should answer yes to the above questions. Contribute to Open Source beforehand: You need prior interactions with open source, even if GSOD introduces you to the open source world. One important thing to note is that previous contributors have a better chance of being selected if they have merged contributions to the organization\u0026rsquo;s project beforehand.\nRegardless of your solid proposal, organizations likely work with names and people with evidence of contributing to their open source project earlier. Past contributions play a vital role in your selection because that shows your proficiency and also gives your application an edge against others. Make at least one contribution to the Open Source Organization.\nIt is not too late to start contributing to Open source projects; look at organizations that gave GSOD a shot previously and start making your contributions to their project.\nKeep in mind:\nIt is important to note that while contributing to open source organizations is not mandatory, it can significantly increase your chances of being accepted. Such contributions demonstrate your commitment to the field and your ability to collaborate effectively with others.\nApply to more than one organization: You can apply to as many organizations as your skills align with. If your skills align with all, apply to all and try not to overdo it. You can do a maximum of 3 and a minimum of 2. It is to ensure that your attention is not overly saturated.\nYes, shooting as many shots as possible is wise, but it could hurt you if there are too many. Follow your strengths and select the organizations you can deliver best to.\nHow do you select organizations that work best? Your tech stack strength. Your passion for the project and organization at large. How does the project motivate you? Do you have experience with the project or organization? Is that right for you? Get involved with the organization: Once you have selected the organization you want to work with, take some time to read about them. Get familiar with the tools and programming stack they use. Make sure to demonstrate your understanding of their documentation. It is also a good idea to join their community chat forum, attend community calls, and participate in their events to learn more about the organization. It\u0026rsquo;s important to remain active in their community even after the application deadline.\nOne other detail is to follow up with the project mentors. Ask questions and try not to overburden them.\nWrite a proposal: Your proposal is a vital part of the application process. It is the avenue to prove how and why you are the best candidate. It gives you a clear understanding of the project goal, things to put in place for the project, your timeline, and so on.\nAlso, writing a proposal shows your mentor your goals for the project, why you believe you are the right person for the role, your experience, and more.\nYour proposals should contain you selling what you can actionably do to improve their documentation.\nI have included proposals in the Resources to give you a guide at yours.\nPray to God: I will end with this final tip from Wisdom Nwokocha: PRAY TO GOD. One of my favorite verses from the scripture says, \u0026ldquo;Man may prepare, but it is God’s purpose that prevails\u0026rdquo; (Proverbs 19:21). After you have done all you can, hold onto hope that things will work out.\nIf it doesn\u0026rsquo;t, remember there is always next year to try again!\nBonus Tips: Edit your Github: Let it show you are either open source enthusiasts or maintainers. Network: Connect with current and past GSOD participants. Their insights and experiences are valuable. Stay organized, positive, and intentional. Take and use feedback: View constructive criticism as an opportunity to grow and improve your writing skills. Don\u0026rsquo;t be discouraged by setbacks: Even the most skilled writers face rejection. Learn from each experience and apply what you learn to future endeavors. Summary Cracking Google Season of Docs 2024 requires doing the work, dedication, and combining your technical skills. Maximize your chances of success by familiarizing yourself with OS projects, showcasing your expertise, and aligning your goals with the organization\u0026rsquo;s needs.\nFinally, while preparation is key, a resilient spirit and a sense of purpose can push you toward achieving your aspirations in Google Season of Docs.\nResources Proposals Improving Wikimedia\u0026rsquo;s onboarding processes and documentation standards - Bello Gbadebo\nGSoD’22 statement of interest Palisadoes - Vedant Jain\nGSoD 2019 Project Proposal (Modernize the VLC user documentation) - Edidiong Asikpo\nMoja Global GSOD 2022 proposal - Amarachi Iheanacho\nFurther References How to crack Google Season of Docs 2022 application stage – Wisdom Nwokocha\nHow to Crack the Google Season of Docs Application Process for 2020 - Edidiong Asikpo\nMy journey of getting accepted in Google Season of Docs 2023 - Bhaswati Roy\nGoogle Season Of Docs: Everything You Need To Know To Get Accepted (TCCS #7) – Linda Ikechukuw\nGoogle Season of Docs call with Wisdom Nwokocha – Technical Writing Mentorship Program\nEnjoyed reading this?\nBuy me coffee Connect with me on;\nTwitter: BibiTheWriter LinkedIn: Blessing Anyebe. ","date":"2024-02-12","id":14,"permalink":"/blog/how-to-crack-google-season-of-docs-2024/","summary":"(Tips from GSOD’s past Interns) The Google Season of Docs is one of the most influential open source platforms for technical documentation beneficial to organizations and technical writers.","tags":["Open source","Google Season Of Docs"],"title":"How to crack Google Season of Docs 2024"},{"content":"\r","date":"2023-09-07","id":15,"permalink":"/blog/","summary":"\r","tags":[],"title":"Blog"},{"content":"{{ range .Pages.ByDate.Reverse }}\n[{{ .Title }}]({{ .Permalink }}) {{ end }} ","date":"2024-08-23","id":16,"permalink":"/docs/markdown-course/","summary":"{{ range .Pages.ByDate.Reverse }}\n[{{ .Title }}]({{ .Permalink }}) {{ end }} ","tags":[],"title":"Markdown Course"},{"content":"{{ range .Pages.ByDate.Reverse }}\n[{{ .Title }}]({{ .Permalink }}) {{ end }} ","date":"2024-04-07","id":17,"permalink":"/docs/technicalwritingcourse/","summary":"{{ range .Pages.ByDate.Reverse }}\n[{{ .Title }}]({{ .Permalink }}) {{ end }} ","tags":[],"title":"Technical writing course"},{"content":"","date":"2023-10-07","id":18,"permalink":"/docs/talent/","summary":"","tags":[],"title":"Trusted Talent"},{"content":"","date":"2022-10-07","id":19,"permalink":"/docs/portfolio/","summary":"","tags":[],"title":"Build Your Portfolio"},{"content":"Our program is designed for individuals looking to improve their technical writing skills and advance their careers in software development, community management, and developer advocacy.\nParticipants will be matched with experienced technical writers who mentor them, providing guidance and feedback on their writing projects.\nThe mentors will share their knowledge of industry-specific terminology and best practices and offer tips on explaining complex technical concepts in simple terms.\nParticipants will work on real-world writing projects throughout the program, such as documentation, tutorials, and blog posts.\nThey will also have access to various resources and tools, including templates, style guides, and documentation software.\nThe program is flexible and can be tailored to fit each participant’s schedule and goals. It will run for a period of 12 weeks, with weekly check-ins and progress reports.\n","date":"2023-10-07","id":20,"permalink":"/docs/about-us/about-us/","summary":"Our program is designed for individuals looking to improve their technical writing skills and advance their careers in software development, community management, and developer advocacy.","tags":[],"title":"About Us"},{"content":"Assignment Title: The Movie Database (TMDb) API Documentation Objective\rIn this assignment, you will create API documentation for The Movie Database (TMDb) API using Postman or any API platform you can use (Eg, Readme,Postman), a popular movie and TV show database API.\nThe goal is to teach you how to access and document real-world APIs effectively.\nPostman guide: Read this article to understand postman as a beginner\nNote\nPlease use an interactive API platform, where users can test without leaving the platform.\nPrerequisites:\nBasic understanding of API concepts. Familiarity with Markdown for documentation. Assignment Tasks: 1. Sign Up for TMDb API Access: Sign up for a TMDb API key by visiting TMDb API. 2. Explore TMDb API Documentation: Review the official TMDb API documentation to understand the available endpoints and how to use the API. 3. Create an API Overview: Write a brief introduction to the TMDb API, explaining its purpose and key features. Provide an example use case for the TMDb API. 4. Document Endpoints: Document all the TMDb API (e.g., searching for movies, retrieving movie details, listing genres, etc.) For each endpoint, provide the following information: Endpoint URL HTTP Method Request Parameters Request Headers (including the API key) Response Status Codes Response Body (sample JSON response) Authentication Requirements (using the API key) Example Request Example Response (sample JSON response) 5. Explain Rate Limiting: Describe any rate limiting or usage restrictions imposed by the TMDb API. 6. Add Usage Guidelines: Provide guidelines on best practices for using the TMDb API effectively and responsibly. 7. Include Testing Instructions: Suggest methods for testing the TMDb API, such as writing test scripts. 8. Submission Guidelines: Format your documentation using Markdown. Submit your documentation via this link Resources: TMDb API documentation: TMDb API Documentation\nAPI documentation class 1\nAPI documentation class 2 Document API docs using Readme.io and Postman Submission Deadline: No Deadline Postman API Documentation Assignment Submission\nName: Samuel Theophilus LinkedIn Profile: https://www.linkedin.com/in/samuel-theophilus/ Postman Documentation: https://documenter.getpostman.com/view/26159839/2s9YsQ9AQD ","date":"2023-08-07","id":21,"permalink":"/docs/portfolio/api-documentation-assignment/","summary":"Assignment Title: The Movie Database (TMDb) API Documentation Objective\rIn this assignment, you will create API documentation for The Movie Database (TMDb) API using Postman or any API platform you can use (Eg, Readme,Postman), a popular movie and TV show database API.","tags":[],"title":"API Documentation Assignment"},{"content":"Assignment Title: Glasp user guide Objective\rIn this assignment, you will create write a user guide for Glasp using any writing platform you can use (Eg, Hashnode,Medium or even our blog).\nThe goal is to teach you how to wrte a well detailed user guide with neccessary images and annotations.\nDo the following:\nUnderstand what they are building at Glasp Generate the table of content . Choose a suitable title. This article should have the following.\nArrange the order of the content. Attention to details Work on the information architecture It should be over 1000 words No plagiarism Don’t use AI-generated content Your audience are beginners Proper citation No grammatical or spelling error No repetitive and filler words Must have necessary images Use the Google Writing style guide Note\nAfter review, tag Glasp on Twitter and Linkedin, mentioning it\u0026rsquo;s your second task from the technical writing mentorship program organized by @TechnicalWriti6 on your Twitter handle or LinkedIn.\nSubmission Deadline: N/A ","date":"2023-08-07","id":22,"permalink":"/docs/portfolio/glasp-user-guide-assignment/","summary":"This assignment, you will write an article covering everything about Glasp https://glasp.co/ and how to use it","tags":[],"title":"Glasp User Guide Assignment"},{"content":"At our disposal, we have a talented pool of trusted writers who are poised to create world-class content tailored to your needs.\nWhether you require assistance with technical writing, documentation, API guides, or any other aspect of technical articles, we’ve got you covered.\nFeel free to reach out to us, and let’s embark on a journey of exceptional content creation together!\nContact us:\nEmail us at writingt82@gmail.com\nSample Projects API Docs\rDocumentation guides\rTechnical blogs\rC-one wallet\nDummy API\nNylas Docs\nInterswitchgroup\nAccumulatenetwork\nNylas\nHow to Automate A Blog Post App Deployment With GitHub Actions, Node.js, CouchDB, and Aptible\nPostman Guide for Beginners: A Comprehensive Introduction to API Testing and Collaboration\n","date":"2023-08-07","id":23,"permalink":"/docs/talent/technical-writing-talent/","summary":"At our disposal, we have a talented pool of trusted writers who are poised to create world-class content tailored to your needs.","tags":[],"title":"Technical Writing Talent"},{"content":"","date":"2023-08-07","id":24,"permalink":"/docs/write-for-us/write-for-us/","summary":"","tags":[],"title":"Write For Us"},{"content":"\rPeter Morville says - “Findability precedes usability; you can’t use what you can’t find. which makes information architecture vital when curating technical documentation that we want readers to find useful.\nIn this Module, you will learn:\nAll about information architecture Its importance to technical writers and readers Information architecture taxonomy and its importance How to create efficient technical documentation Key principles guiding information architecture What is information architecture Information Architecture, or IA, streamlines complex information by organizing it logically, sequentially, and concisely. It is the way we structure and label content in an effective and user-friendly manner.\nInformation architecture helps improve the usability and accessibility of digital products and services.\nIt is how the content of applications, websites, and information systems are organized and labeled for easy access and usage, saving users considerable time.\nA good information architecture anticipates user needs and ensures a logical flow of information is followed through intelligent grouping and intuitive navigation medium.\nFigure 1: Key element of information architecture\nGood information architecture equates to a good user experience. For that reason, information architecture focuses on where users can find information easily and connect three important elements for effective delivery, namely:\nUser: The first step to useful technical documentation is understanding the users’ needs, goals, and mental models when seeking new information. This is to ensure information structure aligns with users’ ways of thinking and searching.\nContent: This is the actual information behind the Information architecture. It consists of content structure, its organization, labeling, images and media used.\nContext: This focuses on the environment and circumstances where users access information so the technical article is readily usable in different situations.\nImportance of information architecture in technical documentation Information architecture plays a crucial role in technical documentation in multiple ways. It helps technical writers create clear and concise documents, promoting usability and strengthening comprehension of complex technical content for users.\nBelow are the key importance of information architecture in technical documentation.\nSound user experience: Information architecture ensures technical documentation is organized logically and intuitively, allowing users to access the required information quickly and efficiently. It adds structure and intuitive navigation to simplify complex information for users. This leads to greater user satisfaction and reduces frustration.\nConsistency: Technical documentation with good information architecture appears more consistent in terms of vocabulary, text formatting, and content style, which improves the document’s professionalism and reduces confusion among readers, particularly when dealing with complex technical concepts.\nEase of search: Technical documentation frequently uses jargon and complicated vocabulary. By implementing a well-structured, Information hierarchy and incorporating effective metadata and glossary, a well-executed search engine helps readers locate relevant information.\nAccessibility: Strong information architecture makes technical documentation accessible to everyone, including users with assistive technology. As a writer, anticipate readers with diverse needs. IA empowers you to build content by factoring in these user classes, and creating clear, labeled, and well-structured documentation for everyone.\nPromotes collaboration: Information architecture streamlines collaboration between technical writers and stakeholders, guaranteeing a unified approach to crafting user-centric documentation. This shared framework fosters cooperation and aligns contributions with the core objective.\nEncourages content reusability: Information architecture promotes the development of reusable and modular information pieces. This method simplifies the documentation process, reduces duplication, and guarantees uniformity among various forms of documentation.\nStrengthens understanding: Information architecture ensures information is arranged logically and sequentially, facilitating readers’ comprehension of the connections and context between various documentation sections. This facilitates understanding and makes it easier for readers to absorb technical ideas easily.\nInformation architecture taxonomy In Information architecture, taxonomy is crucial in organizing and labeling content using a hierarchical structure.\nIt is how information is segmented and labeled within a shared information environment. It helps organize topics, subtopics, and related content within manuals and guides.\nFigure 2: Taxonomy in use in The Atlantic website\nThe picture above is a taxonomy being used in The Atlantic to specify broad categories like “Technology”, “Business”, “Global”, “Health”. It makes information easily discoverable and also strengthens SEO\nThink of Information architecture as a clothing store; the taxonomy is the dedicated space where each shopper will find men\u0026rsquo;s, ladies\u0026rsquo;, children’s, and babies\u0026rsquo; shoes and accessories.\nThen the clothing store will have other subcategories where dresses, pants, jackets, and shirts are found within the ladies\u0026rsquo; clothing section.\nFigure 3: Information architecture and taxonomy working together to deliver content efficiently in an e-commerce platform\nThe picture above is a prime example of Jumia, an e-commerce platform that makes efficient use of taxonomy.\nThe items listed on the far left are termed as information architecture, On clicking any of the listed items and in this case “Fashion”, we could see the subcategories like “WOMEN’S FASHION”, “MEN’S FASHION”, “KID’S FASHION”, “WATCHES”, “SUNGLASSES”, and “TOP BRAND”.\nAnother example is the navigation menu on your favorite website. Each menu option serves as the taxonomy, and it could consist of a sub-menu where users can find similar information that relates to each other.\nNow that you understand what information architecture taxonomy is all about, let\u0026rsquo;s find out how to curate ours about information architecture.\nThe key steps for drafting an information architecture taxonomy are explained below.\nIdentify the audience: Understanding your audience is crucial for creating an effective taxonomy with their needs and expectations. Here are key aspects to consider when you want to identify your audience.\nRoles and responsibilities: You need to determine who would be using your technical documentation, the likely skill they intend on learning, their job role, and what task they will perform using the documentation. Answering these questions helps you understand their objectives and workflows, which aids you with structuring information accordingly.\nTechnical expertise: Your users\u0026rsquo; technical knowledge and experience will influence the terminology, complexity, and depth of information you include.\nInformation needed: You need to know the specific information your users need. Then, you categorize these needs into topics, subtopics, related topics, and references to other articles that could fill a gap, especially for those needing a certain skill before they can grasp the content of the technical documentation you are offering them.\nEnsure you prioritize the most essential information based on your users\u0026rsquo; needs.\nContext of use: Consider how users access the documentation, e.g., online, printed, or mobile. Also, consider In what environment it would be used.\nExpectations and user preference: Find out how users typically search for information which could range from keywords, exploration e.t.c. Find out what level of detail is expected and formatting preferences if possible.\nMethod of gathering information: You should review existing documentation feedback to know what users like and want as an improvement. You can also conduct surveys and web analytics and collaborate with subject matter experts to gather insights and validate assumptions.\nMap out user journey: Do a walk-through on the steps users will take when interacting with the documentation.\nNote down likely pain points users are trying to find answers to and the key decision point where they will find a solution to their probing question in your documentation.\nCreate content categories: To do this, you have to define the content goal. Do you want them to learn to perform a task successfully, find specific information, or troubleshoot? Figure 4: Table of content showing content category for easy navigation\nThe above image is an example of a technical documentation on hashnode. The content goal has been defined, which is an article on “Navigating AWS IPV4”.\nIf we then pay a closer look at the content category for this article, we can see how intentional the writer is with regards to enlightening his readers and what he wants them to learn when they read his article.\nOnce you have an answer to the question above, you can do the following.\nAnalyze existing content: Pay close attention to all content items, topics, format, and organization. Identify gaps and overlaps to know if any topic is missing or needs better coverage based on user feedback. Also, identify any redundant content.\nCard sorting: Understand how content items are grouped to understand categorization preferences.\nIdentify key concepts and relationships: Break down subject matter into topics and subtopics, forming a hierarchical Tree structure. Consider how each topic relates to the other such as the parent-child relationship, part of the topic, or sequential process.\nChoose category labels: Ensure chosen terms are clear and concise. Avoid technical jargon that might be unfamiliar at all costs.\nAlso, ensure you use consistent terminology throughout the taxonomy to avoid confusion on the user\u0026rsquo;s part.\nCreate content hierarchy: To do this, you should think like a user and structure content as a user would think when searching for information. Place essential topics at the top of the hierarchy and group related content together for easy access. Also, consider future changes and growth when curating your content hierarchy.\nDefine layout and navigation: Consider information density and visual hierarchy in your documentation. Use headings, spacings, and visual elements to guide users and signal importance. You should balance text with visuals (gifs, sketches, videos, images) to break up content and aid understanding. A user-friendly navigation system should also be considered.\nYou should consider the following navigation methods.\nGlobal navigation: Consistent top-level access to primary categories should be present throughout the documentation. Example: Kubernetes documentation makes good use of this by using a clear and consistent global navigation bar at the top of every page and it remains visible wherever you are on the page.\nIt also provides easy access to key sections of the documentation like “Getting started”, “Concept”, “Task”. And lastly, the user’s location within the documentation at any particular time is highlighted for easy tracking.\nFigure 5: Global navigation system of kubernetes documentation website\nLocal navigation: Provide navigation for lengthy contents such as breadcrumbs, \u0026ldquo;jump to\u0026rdquo; links, and table of contents.\nSearch functionality: Implement a robust search feature for quick content delivery.\nFigure 6: Local navigation and search functionality on kubernetes documentation website\nWhile still on the Kubernetes documentation example used in Global navigation, from the image above, we can see those highlighted texts in blue. They serve as a :jump to” links mentioned in the examples above.\nThey are useful when a user needs to read more about that particular piece of information. It also provides a well-integrated search feature on the page to enable users to discover relevant documentation based on keywords.\nFollowing these steps diligently will let you create a taxonomy that organizes information logically and resonates with your target audience.\nBenefit of taxonomy for your technical documentatiion Improved user experience: A well-defined taxonomy leads to a positive user experience by making it easier for users to find what they need and complete their tasks.\nDocumentation consistency: Using a consistent taxonomy ensures that similar information is always grouped, making it easier for users to understand the overall structure of the information.\nEfficient content management: A well-defined taxonomy makes organizing and managing large amounts of content easier.\nSearch result: By aligning the taxonomy with search keywords, you can ensure that users get more relevant results when they search for specific information.\nCheck your knowledge:\nQuestion 1:\rWhy is taxonomy important when building your information architecture for technical documentation?\nIt enhances user understanding by grouping related topics together\rIt eliminates the need for usability testing\rIt forces users to follow a specific path in the documentation It ensures all topic are covered\rQuestion 2:\rWhat is the primary goal of information architecture in technical documentation?\nTo reduce maintenance cost\rTo make technical documentation visually appealing\rTo replace the need for clear writing\rTo improve findability for users\rHow to create an information architecture for your technical documentation User research: Understanding the problem space is the first step in creating a good information architecture. It isn\u0026rsquo;t uncommon to see an article on a particular topic, but that article doesn\u0026rsquo;t explain succinctly what the users need. Research would let you know what knowledge gap you are trying to fill, how to approach the topic based on the reviews you\u0026rsquo;ve seen on existing content, how readers think when exploring digital repositories, and what type of reader is your target audience.\nUser research lets you define your audience and goals.\nContent inventory: This is where you collate all existing articles on a particular topic and then audit each one in order to gather insights on how useful and accurate the information is to readers, what is missing, and what needs to be added to make for a sound article that would help users find what they are looking for easily.\nInformation grouping and classification: After you must have settled for an area in which you want to focus your article on, the next logical step is to note down what each section of the article contains and what are their sub-sections. This would create a logical hierarchy and a seamless way for users to understand your thought process, the information you wish to impact on them, and how each sub-section relates to the main section.\nProper labeling and taxonomy: Create a clear and concise label that leaves no room for ambiguity. Users should understand what your label means at the first read without having to guess second what that section is all about.\nDefine hierarchy and navigation structure: Rank information based on its importance to the readers. A user who intends to read an article on a particular topic has a particular pain point they are trying to solve.\nYour duty is to instinctively know what that information is and place it where it would serve them best. You should also consider the best navigation structure for your content that would serve users well without any frustration, whether it is a table of content or another navigation style.\nGather feedback and iterate: Be sure to test your article /documentation with real users as well as your fellow technical writers to gather insight on what you have done right and what needs to be adjusted, and iterate based on feedback obtained.\nInformation architecture principles to consider when drafting your technical documentation Crafting effective information architecture is not a game of chance. It\u0026rsquo;s a disciplined process guided by established principles and methodologies.\nIt starts with a deep understanding of the application, content, and organizational goals, followed by the consistent application of established principles throughout the process.\nThe principle of objects: Content should be viewed as a living and breathing document with unique characteristics, lifecycle, behaviors, and attributes. Content is more than just static text as each piece of information evolves from creation to publication, revision, and eventual removal when it has served its use.\nThe principle of choices: Overloading users with too much information leads to a bad user experience. Humans have a short attention span; therefore, create pages that offer meaningful choices to users without them having to stress their brain.\nThe principle of disclosure: Present users with just enough information they can understand at a stretch and let them decide if they want to explore further. So technical articles often have an external link for readers who want to dive deeper. In summary, embrace a progressive disclosure approach by gradually unveiling more information as users dictate interest.\nThe principle of exemplars: Some sections are not self-explanatory for an average user when writing technical documents. Provide examples as an image to exemplify the content as images are more visually appealing than text, and your readers will grasp the initial text easily afterwards.\nThe principle of first doors: Not all users will get to read your article right from the start as some of your audience could come in contact with it through optimized keyword search. Therefore, provide a welcoming experience at every point with relevant information and clear navigation that would make the site accessible to them.\nThe principle of multiple classification: Accommodate diverse User preferences by providing multiple ways for users to search the content on your site. factoring keyword searches, top-level menus, and intuitive browsing mechanisms are some ways of doing this, but some users might wish to browse or move through the hierarchy, so make sure your information architecture meets their needs.\nThe principle of focused navigation It emphasizes the importance of clarity and consistency in navigation design. This would help readers understand the content structure and easily locate the needed information.\nThe principle of growth: Embrace flexibility and anticipate future expansion as there is every likelihood that the content you start with will evolve over time. Ensure it remains organized and scalable.\nExercise\nChoose a complex technical concept of your choice, research extensively and write on it. Ensure you apply all you\u0026rsquo;ve learnt about information architecture and adhere to all the tips and measures from this documentation.\nAfter review, tag @TechnicalWriti6 on Twitter to the link to your article.\nAnswer the following questions Loading...\r","date":"2023-06-15","id":25,"permalink":"/docs/technicalwritingcourse/information-architecture/","summary":"Technical writers are the architect of knowledge, but curating effective documentation requires more than just a clear prose. A well-crafted information architecture forms the foundation, ensuring users can navigate complex information with ease and find the answers they need quickly.","tags":[],"title":"Information  Architecture"},{"content":"","date":"2023-10-07","id":26,"permalink":"/docs/about-us/","summary":"","tags":[],"title":"About Us"},{"content":"\r","date":"2023-09-07","id":27,"permalink":"/docs/","summary":"\r","tags":[],"title":"Course"},{"content":"","date":"2024-05-01","id":28,"permalink":"/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"2024-05-01","id":29,"permalink":"/tags/content-marketing/","summary":"","tags":[],"title":"Content Marketing"},{"content":"","date":"2024-05-01","id":30,"permalink":"/categories/content-marketing/","summary":"","tags":[],"title":"Content Marketing"},{"content":"","date":"2024-05-01","id":31,"permalink":"/tags/content-strategy/","summary":"","tags":[],"title":"Content Strategy"},{"content":"","date":"2024-05-01","id":32,"permalink":"/categories/content-strategy/","summary":"","tags":[],"title":"Content Strategy"},{"content":"","date":"2024-05-01","id":33,"permalink":"/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":"","date":"2024-05-01","id":34,"permalink":"/contributors/rejoice-anodo/","summary":"","tags":[],"title":"Rejoice Anodo"},{"content":"","date":"2024-05-01","id":35,"permalink":"/tags/","summary":"","tags":[],"title":"Tags"},{"content":"","date":"2024-05-01","id":36,"permalink":"/tags/writing/","summary":"","tags":[],"title":"Writing"},{"content":"","date":"2024-05-01","id":37,"permalink":"/categories/writing/","summary":"","tags":[],"title":"Writing"},{"content":"","date":"2024-03-23","id":38,"permalink":"/tags/coding/","summary":"","tags":[],"title":"Coding"},{"content":"","date":"2024-03-23","id":39,"permalink":"/categories/coding/","summary":"","tags":[],"title":"Coding"},{"content":"","date":"2024-03-23","id":40,"permalink":"/contributors/etugbo-judith-ogheneujiro/","summary":"","tags":[],"title":"Etugbo Judith Ogheneujiro"},{"content":"","date":"2024-03-23","id":41,"permalink":"/tags/vs-code/","summary":"","tags":[],"title":"VS Code"},{"content":"","date":"2024-03-23","id":42,"permalink":"/categories/vs-code/","summary":"","tags":[],"title":"VS Code"},{"content":"","date":"2024-03-18","id":43,"permalink":"/tags/gsoc/","summary":"","tags":[],"title":"GSoC"},{"content":"","date":"2024-03-18","id":44,"permalink":"/categories/gsoc/","summary":"","tags":[],"title":"GSoC"},{"content":"","date":"2024-03-18","id":45,"permalink":"/tags/open-source/","summary":"","tags":[],"title":"Open Source"},{"content":"","date":"2024-03-18","id":46,"permalink":"/categories/open-source/","summary":"","tags":[],"title":"Open Source"},{"content":"","date":"2024-03-18","id":47,"permalink":"/contributors/prince-onyeanuna/","summary":"","tags":[],"title":"Prince Onyeanuna"},{"content":"","date":"2024-03-07","id":48,"permalink":"/tags/semrush/","summary":"","tags":[],"title":"Semrush"},{"content":"","date":"2024-03-07","id":49,"permalink":"/categories/semrush/","summary":"","tags":[],"title":"Semrush"},{"content":"","date":"2024-03-07","id":50,"permalink":"/tags/seo/","summary":"","tags":[],"title":"SEO"},{"content":"","date":"2024-03-07","id":51,"permalink":"/categories/seo/","summary":"","tags":[],"title":"SEO"},{"content":"","date":"2024-02-29","id":52,"permalink":"/tags/antora/","summary":"","tags":[],"title":"Antora"},{"content":"","date":"2024-02-29","id":53,"permalink":"/categories/antora/","summary":"","tags":[],"title":"Antora"},{"content":"","date":"2024-02-29","id":54,"permalink":"/tags/doc-as-code/","summary":"","tags":[],"title":"Doc as Code"},{"content":"","date":"2024-02-29","id":55,"permalink":"/categories/doc-as-code/","summary":"","tags":[],"title":"Doc as Code"},{"content":"","date":"2024-02-29","id":56,"permalink":"/tags/documentation/","summary":"","tags":[],"title":"Documentation"},{"content":"","date":"2024-02-29","id":57,"permalink":"/categories/documentation/","summary":"","tags":[],"title":"Documentation"},{"content":"","date":"2024-02-29","id":58,"permalink":"/tags/guide/","summary":"","tags":[],"title":"Guide"},{"content":"","date":"2024-02-29","id":59,"permalink":"/categories/guide/","summary":"","tags":[],"title":"Guide"},{"content":"","date":"2024-02-29","id":60,"permalink":"/contributors/wisdom-nwokocha/","summary":"","tags":[],"title":"Wisdom Nwokocha"},{"content":"","date":"2024-02-28","id":61,"permalink":"/tags/aws/","summary":"","tags":[],"title":"AWS"},{"content":"","date":"2024-02-28","id":62,"permalink":"/categories/aws/","summary":"","tags":[],"title":"AWS"},{"content":"","date":"2024-02-28","id":63,"permalink":"/tags/devops/","summary":"","tags":[],"title":"DevOps"},{"content":"","date":"2024-02-28","id":64,"permalink":"/categories/docker/","summary":"","tags":[],"title":"Docker"},{"content":"","date":"2024-02-28","id":65,"permalink":"/categories/eks/","summary":"","tags":[],"title":"EKS"},{"content":"","date":"2024-02-28","id":66,"permalink":"/categories/kubernetes/","summary":"","tags":[],"title":"Kubernetes"},{"content":"","date":"2024-02-20","id":67,"permalink":"/tags/writing-style-guide/","summary":"","tags":[],"title":"Writing Style Guide"},{"content":"","date":"2024-02-20","id":68,"permalink":"/categories/writing-style-guide/","summary":"","tags":[],"title":"Writing Style Guide"},{"content":"","date":"2024-02-20","id":69,"permalink":"/tags/writing-contest/","summary":"","tags":[],"title":"Writing Contest"},{"content":"","date":"2024-02-20","id":70,"permalink":"/categories/writing-contest/","summary":"","tags":[],"title":"Writing Contest"},{"content":"","date":"2024-02-12","id":71,"permalink":"/contributors/blessing-ene-anyebe/","summary":"","tags":[],"title":"Blessing Ene Anyebe"},{"content":"","date":"2024-02-12","id":72,"permalink":"/tags/google-season-of-docs/","summary":"","tags":[],"title":"Google Season of Docs"},{"content":"\rWriting for different audiences is necessary for every writer; it involves tailoring your content to ensure it is accessible, engaging, and comprehensible to the readers.\nModule content\nIn this Module, you will learn how to:\nIdentify your audience Tailor your writing to your audience Use plain language Avoid technical jargon Write for different levels of expertise Identifying your Audiences Identifying your audiences is the bedrock of successful communication; it involves knowing who your readers are and what they expect and tailoring your content to meet their needs.\nBut who exactly is your audience?\nWho is an Audience? An audience refers to the people who will engage with your content. They could be customers, users, or anyone interested in what you have to say.\nIdentifying your audience helps you create content that resonates with them, whether it’s a product manual, a blog post,\nIt is critical to paint a clear picture of who you are writing for since your readers are different; they may differ in education, interest, technicality, and many others. This is where audience analysis comes in.\nWhat is Audience Analysis? Audience analysis is a process of understanding, researching, and interpreting information about your intended audience.\nThis examination helps you tailor your writing to your audience\u0026rsquo;s needs, expectations, and characteristics.\nIt is a vital starting point for creating any technical document, whether an instructional manual for a device intended for a general audience or a tutorial for software developers.\nIn a nutshell, Audience analysis is a way for writers to get to know their audience.\nImportance of Audience Analysis Audience analysis is vital in technical writing; it makes it easier for you to write to reach your document\u0026rsquo;s goal.\nSome reasons why audience analysis is essential.\n1. Knowledge Transfer: The goal of technical writing is to help professionals convey knowledge to end-users. Technical writers can ensure that knowledge is efficiently delivered by streamlining the transfer by recognizing the audience\u0026rsquo;s level of expertise with the subject area.\n2. Effective Communication: Knowing your audience helps you to convey your message in a manner that is clear, concise, and relevant to them since communication is a two-way process.\n3. Empathy and Connection: Audience analysis enhances empathy; this entails putting them in your shoes, it goes beyond passing information, it creates a shared experience.\n4. Increased Engagement: An audience\u0026rsquo;s attention is captured, and engagement is sustained when your content speaks directly to their problems or is in line with their specific needs or interests.\n5. Preventing Miscommunication: Inability to understand your audience can lead to miscommunication and confusion; you can avoid using inappropriate language and assumptions by analyzing your audience.\n6. Building Credibility: Showing that you understand your audience builds credibility. Your audience is more likely to trust your information if they perceive you as knowledgeable about their needs and concerns.\nSteps in Audience Analysis There are several steps to conduct audience analysis; they include:\n1. Define the Purpose of Communication: Clarifying the purpose of your communication is an important step in audience analysis; it serves as a guiding principle regarding the content, tone, and delivery.\nYou need to know what you aim to achieve with your communication. Is your writing meant to inform, instruct, or persuade?\nFor example, are you writing a technical manual to guide users or writing content to promote a product?\nDefining your purpose lays the foundation for delivering an effective message that resonates with your audience.\n2. Gather Information about your Audience: Information gathering helps you find as much information as possible about the audience you are writing for.\nThe more information you gather, the easier it will be for your writing.\nSome of the questions you will ask to get the needed information are:\nWho is the audience?\nWhat do they need to know?\nWhen will they be reading?\nWhy will they be reading?\nHow will they be reading?\nYou can use tools like Typeform and Survey Monkey to gather information about your audience.\n3. Define Your Type of Audience: After gathering information about your audience, define your audience type based on the information.\nYour audience could be a professional, an expert, or a novice. Defining your audience will help you determine the existing knowledge of your readers.\nTypes of Audiences Audiences can broadly be categorized into two main groups;\nTechnical Audiences Non-Technical Audiences 1. Technical Audience: These individuals have a specialized understanding of a technical subject. They possess expertise gained through training, education, or professional experience in a particular field.\nThey include software developers, IT professionals, data analysts, and other specialized professionals. Communicating with technical audiences involves using precise technical languages and providing detailed documentation.\nTechnical audiences can be grouped into:\nLow-level Technical Audiences High-level Technical Audiences 2. Low-level Technical Audiences: This refers to individuals who have a foundational understanding of technical concepts within a specific domain.\nThey may be novice programmers, developers, entry-level technicians, or those with limited knowledge in a technical field.\nExamples of writing may include an introduction to html and CSS for beginners in web development.\nWriting for these audiences is foundational, which requires simpler and more detailed explanations to enable them to build their skills.\nBelow is an article written for low-level technical audiences.\nFigure 1.A Documentation written for low-level Technical Audiences\n3. High-level Technical Audiences: This refers to individuals with an advanced understanding of complex technical terms. They are often experts in their fields with extensive education, experience, and training.\nThey may include Subject matter experts, Senior engineers and Architects, advanced researchers, scientists, and cyber security specialists.\nWriting for these audiences requires a deep understanding of their specialized knowledge and ability to convey complex information clearly and precisely.\nExamples of writing meant for this audience are advanced programming and code documentation and complex algorithm Documentation in machine learning.\nBelow is an article written for high-level technical Audiences.\nFigure 2.An Article written for high-level Technical Audiences\n4. Non-Technical Audiences: This refers to individuals who lack specialized knowledge in a particular technical field; they include individuals from various backgrounds and professions who utilize a product or service but may not have a deep understanding of the underlying technology.\nNon-technical audiences include end users of software applications, educators, stakeholders, investors, and the general public.\nExamples of writing for this audience may be How to make a screenshot, How to use Google Meet, and How to save and transfer files.\nbelow is an example of an article written for the non-technical audience.\nFigure 3.An Article written for non-technical Audiences\nDefining your audience into the categories above will help you create appropriate documentation and communicate successfully.\nDevelop a Persona for your Audience: Personas are fictional characters used to represent members of a specific audience. Creating a persona can help you focus your writing on what\u0026rsquo;s important to your readers; your writing can be specific and interesting.\nWith the information you have gathered, you could create a fictional character with a name, gender, age, job title, location, etc.\nTailor your Writing to your Persona: Now that you have a persona in mind, you need to tailor your writing to suit your persona. They should dictate the language you use, the level of technicality, and what to include or exclude.\nWriting to meet your audience\u0026rsquo;s needs requires selflessness; you must learn to create explanations that satisfy your audience\u0026rsquo;s curiosity rather than your own.\nCheck your knowledge\nDoks is a documentation website toolkit built with Hyas. You can get started with this command:\nQuestion 1:\rOne of these is not a step in audience analysis\ninformation Gathering\rTailoring your writing to your persona\rTrust and Credibility\rQuestion 2:\rWhat is the Bedrock of a successful communication in technical writing??\nAudience Identification\rAudience Analysis\rAudience Characteristics\rTailoring your Writing to your Audience Once you have identified your audience, the next step is tailoring your writing to meet their needs and expectations.\nThis involves adapting your language, tone, format, style, and content to effectively communicate with your specific audience.\n1. Use Examples and Analogies: Examples are one of the ways to connect with your Audiences, especially in instructions. Make your writing relatable by using real-world examples and analogies. This will help your users grab complex content faster.\n2. Add Information Readers Need to Understand your Documentation: Review to see whether important information is missing, for example, A How to guide on a software application for beginners; definition of key terms, Step by step approach to ensure that your readers are not misled. You can also add glossaries and references for further reading.\n3. Select Appropriate Language: Use appropriate language for your audience, avoid technical jargon and idioms, and use acronyms properly. for example, acronyms like HTTP, API, and HTML should be written fully to help readers understand.\n4. Provide Context and Background: Present enough background information to help your audience understand the context of the message; don\u0026rsquo;t assume that your readers have the same knowledge as you on a particular topic. For example, an extensive introduction on a particular product which may include its history.\n5. Select the Right Style and Tone: Your document should be simple and easily understood, minimizing complex terms. Your writing should be formal, with clear headings and subheadings.\nUsing Plain Language What is Plain Language? The Plain Writing Act of 2010 defines plain language as clear, concise, well-organized writing that follows other best practices appropriate to the subject or field and intended audience.\nPlain language can also be known as plain writing or plain English.\nImportance of Using Plain Language Using plain language in technical writing is important to you and your readers.\nSome of its importance are;\n1. Clarity: Using plain language helps you reduce the risk of misunderstanding, errors, and miscommunication.\n2. Accessibility: Plain language makes your information accessible to a wider audience. Including those with various levels of education, language competence, and topic experience.\n3. Increased Engagement: Using plain language helps your readers engage and act on the information delivered, whether commercial materials or instructional content.\n4. Build Trust and Credibility: Using plain language helps build trust and credibility with your readers. When you write honestly and helpfully, you demonstrate concern for your readers and their needs.\nYou also show that you are informed about your topic and can effectively explain it.\n5. User-friendly Documentation: Using plain language improves the comprehension of manuals, guidelines, and instructions; this is essential for products and software where ease of use is a priority.\nPlain writing Tips and Techniques To write in plain language, there are some tips you need to apply to assist you in simplifying your writing; here are some of them:\n1. Write in Active Voice: Using active voice makes it easier for your readers to understand the intended meaning of a sentence. It is a valuable tip for achieving plain language in your writing.\nExample\nActive voice: \u0026ldquo;The team lead gave feedback\u0026rdquo;.\nPassive voice: \u0026ldquo;The feedback was given by the team lead\u0026rdquo;\nActive voice: \u0026ldquo;The Scrum master implemented changes to the Kanban board\u0026rdquo;\nPassive voice: \u0026quot; The changes to the Kanbaan board were implemented by the Scrum master.\n2. Use Short Sentences as much as Possible: Clear writing should have an average of 15 to 20 words, though every sentence must not be the same length. Stick one main idea in a sentence.\n3. Use Consistent Words: Avoid using different words with the same meaning to your readers. Use coherent words.\nExample:\nIf you use the word \u0026ldquo;For example\u0026rdquo; to refer to an illustration, don\u0026rsquo;t change it to \u0026ldquo;for instance\u0026rdquo; in another line of your documentation.\n4. Use Everyday Words: Use commonly used words that will not confuse your readers or give them a hard time grabbing the content of your documentation. If you must use technical terms, explain them first in your sentence.\nFor example, use \u0026ldquo;end\u0026rdquo; instead of \u0026ldquo;terminate\u0026rdquo;, and “use”\n5. Write Directly to your Readers: Use the second person point of view to refer to your readers, such as \u0026ldquo;you\u0026rdquo;, and \u0026ldquo;your\u0026rdquo;, remember you are writing for your readers, not yourself.\nExample;\nIn this documentation, you will learn how to create a hamburger using HTML and CSS.\nAvoiding Technical Jargon What is Technical Jargon? Technical jargon is a specialized term or expression specific to a particular profession, such as abbreviations and acronyms unfamiliar to most people.\nIt helps group members recognize other members and communicate reliably without explaining basic terms.\nThere are several jargon meant for occupational group use. Fields like engineering, medicine, and science all have their jargon.\nFor example, words like application programming interface(API), A/B Testing, and Augmented Reality(AR) are all jargon in information technology.\nJargon can be used if your audience is professionals in a field to establish authority, But if your audience is the general public or a layman, then you have to translate all your jargon into a common expression\nHow to Avoid Jargon Technical jargon can pose challenges to those who are not familiar with the specialized terminology, below are how to avoid it.\n1. Know your Audience: Understand the knowledge and expertise of your audience. it is okay to use jargon if your audience understands it, but if you speak to people outside your field or newbies, use generally understood terms or define words.\n2. Get a second person to read your work: It is best to have someone else proofread it and give you feedback. They can see which words are clear or confusing.\nTry to pick someone who is your target audience, ask them if there are words they don\u0026rsquo;t understand, and ask if the words compel them to take action on its purposes or if they are bored.\n3. Read your Writing out Loud: Read your writing out loud to notice words and phrases that may sound complex; this is because spoken words reveal complexities that may go unnoticed when reading silently.\nIt probably reads that way if it sounds awkward or unnatural. Rewrite it until it sounds like plain speech.\nEliminating confusing jargon and paying attention to your audience\u0026rsquo;s words will help you communicate more effectively and win their trust.\nWriting for Different Levels of Expertise When you write content for different levels of expertise, you need to adjust it to suit individuals with varying levels of knowledge and experience on the topic.\nThis approach acknowledges that your audience may consist of beginners, intermediate users, advanced practitioners, and experts.\nThe ultimate purpose is to ensure that everyone within your target audience can access and benefit from your content. Here\u0026rsquo;s a breakdown of what writing for different levels of expertise entails.\n1. Novice/Beginners: These individuals are new to a particular subject or technology. They have limited or no prior experience in the area being discussed. They may seek to understand the basics, grasp fundamental concepts, and learn to navigate or use a specific technology. They require Clear explanations and step-by-step instructions.\nFor Example, a \u0026ldquo;Docker for beginners\u0026rsquo;\u0026rsquo; documentation should contain a strong introduction, installation, basic commands, and how to use them.\n2. The Advanced Beginners: These individuals have moved past the novice stage and acquired some basic knowledge in a particular technology or field. Advanced beginners understand the subject matter and have gained the confidence to explore more advanced tasks.\nFor example, documentation on \u0026ldquo;Advanced React\u0026rdquo; should include real-world examples to enable them to gain hands-on experience.\n3. The Competent: These individuals possess a solid understanding of the technology or field. They are capable of handling more complex tasks independently. They have gained experience and are used to advanced terminology.\nWriting for the competent should be specific since they use the technical documentation for reference rather than relying on it for learning. The content should reflect their proficiency level.\n4. Proficient: These individuals have mastered a particular technology or field. They comprehensively understand the subject matter and possess advanced skills to navigate complex concepts easily. Writing for proficient users entails advanced insights, detailed technical analysis, and in-depth discussions of advanced cases.\n5. The Experts: These include users at the peak of knowledge and expertise in a particular field or technology. They have a deep understanding and extensive experience of complex concepts.\nTechnical documentation for experts should be advanced and sophisticated. It should reflect their advanced knowledge and expectations. It should provide insights beyond the basics and cater to professionals seeking the latest and most advanced information.\nNote\nExercise: Complete the following exercises before leaving this module.\nWrite an article on how to use VScode for a low-level technical audience\nFollow the instructions below;\nConduct an audience analysis to understand the needs and preferences of your readers. Create a table of contents that outlines the structure of your article. Your article should be at least 500 words long. Minimize the use of AI, and use simple language that is easy to understand. Include relevant images to support your content. Ensure that your article has no spelling, grammar, or punctuation errors. Lastly, please tag @Technicalwrit6 on Twitter and LinkedIn, stating that this is your exercise for module 2.\nAnswer the following questions.\nLoading...\r","date":"2023-10-15","id":73,"permalink":"/docs/technicalwritingcourse/writing-for-different-audiences/","summary":"Explore tailored strategies to engage diverse readers, whether you\u0026rsquo;re crafting content for end users, developers, managers, or regulatory authorities","tags":[],"title":"Writing for Different Audiences"},{"content":"","date":"2023-09-07","id":74,"permalink":"/privacy/","summary":"","tags":[],"title":"Privacy Policy"},{"content":" ","date":"2023-09-07","id":75,"permalink":"/","summary":" ","tags":[],"title":"Welcome to Technical writing mentorship program"},{"content":"\rTechnical writing is a field that requires clarity, and efficiency in communication. Writers rely on various tools and software applications to produce effective technical documentation.\nKrista Van Laan says\nTechnical writing is a continuous process of learning, carefully gathering, sifting, organizing, and assessing, all while trying to craft something that makes sense for a user\nWhat are technical writing tools? Technical writing tools are used in creating, editing, formatting, and managing technical content. These tools aid writing and save time.\nThere are different writing tools to assist technical writers in increasing productivity, correcting grammar errors, and designing images.\nTypes of Technical Writing Tools This lesson will cover the most popular tools for technical writing that every writer should use to make the most while curating content.\nGrammar tools Authoring tools Publishing tools Screen Capture tools Image Editing tools Plagiarism Integrated Development Environments (IDE) Portfolio Websites Documentation sites Search Engine Optimization (SEO) Productivity Highlighting Artificial Intelligence (AI) Tools Video editing tools Grammar Grammar tools are software applications that identify and fix spelling, punctuation, syntax, and usage mistakes in your writing.\nThey can assist you in making your write-up clear, accurate, and consistent.\nGrammarly\nExamples of grammar tools are Grammarly and Quillbot.\n1. Grammarly Grammarly is an AI application that provides writing advice in real-time. Grammarly is the most popular grammar tool. It offers tips and suggestions.\nGrammarly fixes mistakes and reduces time spent proofreading. It helps to increase writing quality and boost your confidence in writing.\n2. Quillbot Quillbot is a grammar checker, paraphraser, and summarizer tool that helps improve writing quality. Quillbot is very useful for reducing plagiarism. Quillbot provides writing suggestions; however, it is only sometimes accurate.\nPlagiarism According to the Oxford Dictionary, Plagiarism is the practice of taking someone else\u0026rsquo;s work or ideas and passing them off as one\u0026rsquo;s own.\nPlagiarism tools are used to check if you presented ideas from another source as your own, and it\u0026rsquo;s prohibited in all types of writing, including technical writing.\nSome plagiarism tools are Duplichecker, Quetext, and Plagiarism Detector.\n1. Duplichecker Duplichecker is a free tool used to identify plagiarized content. It is an essential and efficient tool for writers to identify text and documents that have been plagiarized.\nDuplichecker provides the links to the source text that has been plagiarized. Duplicker offers the free version and premium version. Duplicker’s free plan allows you to check plagiarized content for 1000 words.\n2. Quetext Quetext is a plagiarism detector used by academics, professionals, and writers. It allows 500 words for the free version and 100,000 words per month for Premium and Enterprise users.\nThe QueText checker is capable of processing languages beyond English. It can do plagiarism searches in multiple languages, including French, Spanish, Italian, Portuguese, German, Arabic, and Russian.\n3. Plagiarism Detector Plagiarism Detector is an accurate and free online plagiarism detector. All you have to do is copy and paste text to identify plagiarized content. Plagiarism Detector offers the free version and the Pro version.\nThe free version works for 1000 words for the free plan and $8 monthly for the premium version.\nPlagiarism Detector\nFeatures\nFile Upload Quick Search Deep Search Multiple languages Check up to 25k words Authoring tools Authoring tools are used to write text, add images, and compile your content in one place. Authoring tools are Microsoft Word, Google Docs, Notepad, and Evernote.\n1. Google Docs Google Docs is a cloud-based app for creating and editing documents. Google Docs is a part of Google Suite and is accessible to anyone with a Gmail account.\nAn advantage of using Google Docs is easy access to documents on any device anywhere. Google Docs works on the web and as a mobile app for Android and iOS devices.\n2. Microsoft Word Microsoft Word is a web, mobile, and desktop application built by Microsoft to create and edit documents. It can be accessed using Windows or a Mac.\nMicrosoft Word is a vast tool for creating and formatting technical documents. It offers capabilities like styles, templates, and a flexibility that help maintain document consistency and structure.\n3. Evernote Evernote is a user-friendly app for writers who want to jot down many ideas. Evernote is an excellent software for writers, and it is available for Android, iOS, Windows, and Mac.\nEvernote allows users to create notes from images and photos.\nImage Tools Image tools are used to edit and create images for your write-up and social media posts. Photoshop, Annotely, Canva, Microsoft Designer, and Adobe Illustrator are useful image tools.\n1. Photoshop Adobe Photoshop is a graphics design and photo editing software for images. Adobe Photoshop is a great fit for one who has experience with complex design tools.\nWith Photoshop, you can design pictures from scratch or use templates. Images and graphics are essential to make the readers and audience understand the writing process.\n2. Annotely Annotely is a free and easy tool to add comments and explain images. It is handy for you to add arrows and pointers to pictures for further emphasis.\nAnnotely\nYou can illustrate, blur, and highlight words in an image using Annotely.\n3. Canva Canva is an online graphic design tool for creating designs across social media platforms. Canva has free and Pro versions to access templates.\nIt helps design images for your write-ups, like cover photos, banners, Instagram posts, and YouTube covers. Canva has built-in templates for editing and creating graphics and images.\n4. Microsoft Designer Microsoft Designer is an AI tool for graphics and pictures to create designs based on the prompts.\nMicrosoft Designer creates images by using prompts and written descriptions. It can be used to make posters, logos, and postings for social networking platforms.\nMicrosoft Designer is available as a mobile app and web app.\nMicrosoft Designer\nMicrosoft built Designer based on this concept - \u0026ldquo;You can design anything if you can dream it.\u0026rdquo;\nIntegrated development environment (IDE) Integrated development environments (IDEs) are software applications for software development used to write codes. Some IDEs are Visual Studio code, Markdown Editor, Notepad++, Sublime Text, and Eclipse.\n1. Visual Studio Code (VSCode) VSCode is a code editor built by Microsoft and is suitable for web and desktop applications.\nIt is a robust platform that offers extensions and integrations to other platforms. VSCode has an extension marketplace to add and integrate apps and software.\n2. Notepad++ Notepad++ is a simple source code editor for Windows. It supports various programming languages, including Markdown. You can use Notepad++ to write codes to add to your write-up.\n3. Sublime Text Sublime Text is a sophisticated Windows, MacOS, and Linux code editor. Sublime Text supports many programming languages with text, html, javascript, and markdown extensions.\nScreen capture Screen capture tools capture images and videos to add to the writeups for better understanding. Technical writing requires using user-interactive videos, GIFs, and pictures.\nTo enhance and increase user engagement, these tools are exceptionally efficient and enable you to capture visually stunning images and videos are essential.\nScreen capture tools are\nSnipIt SnagIt Loom 1. Snipping Tool Snipping tool is a Windows tool that allows you to effectively capture your screen for images and videos as you work. The snipping tool is free, and easy to use.\n2. SnagIt SnagIt is a software application designed to capture and record screen activity on Windows and MacOS operating systems.\nSnagIt is an excellent tool for creating content and writing technical documentation. SnagIt is a paid tool for businesses, organizations, teams, and individuals.\n3. Loom Loom is a screen capture tool to record, edit, annotate, and share videos with anybody.\nWith Loom, anyone can easily make and distribute videos for social media, interact with online communities, and promptly send almost any professional message.\nLoom\nWith Loom, you can record your screen, audio, and voiceovers.\nVideo tools Video tools are useful for social media posting and increasing engagements to capture your writeups.\nSome video tools are\nInShot CapCut Premier Pro 1. InShot Inshot is a photo and video editing tool available for mobile devices. Creating videos for social media engagements and write-ups with Inshot is made easy.\n2.CapCut CapCut is a video editing tool for browsers, Windows, Mac, Android, and iOS. CapCut is an extensive tool for creating videos for social media.\n3. Premier Pro Premier Pro is a professional, powerful video editing tool designed by Adobe.\nPremier Pro is a suitable tool for individuals who can work with complex video tools.\nPublishing sites Publishing sites are essential for posting your writing samples, documents, solutions, and articles.\nPublishing sites\nWordPress, Wix, Medium, Hashnode, Adobe Framemaker, Robohelp, Madcap Flare, and Qblogger are publishing sites.\n1. WordPress WordPress is a content management system (CMS) that allows users to build websites. These websites can be used as blogs and sites to publish content.\n2. Madcap Flare Madcap Flare is a writing tool for publishing documentation, knowledge bases, user guides, and user manuals.\nWith Madcap Flare, you can write once and publish for printing, web, desktop, and learning management systems.\n3. Medium Medium is a free platform for publishing and sharing content. Medium is a powerful platform for writers to share ideas, engage with content, learn from other writers, and earn money through their partner programs.\nPortfolio Websites Portfolio websites are tools used to showcase your work to get writing gigs or jobs. Some portfolio websites are Linktree, Clippings, Wix, Concentre, and Disha.\n1. LinkTree LinkTree is a platform that serves as a landing page for social media handles and resumes. LinkTree is an incredible tool to showcase your writing samples.\nYou can add links to your social media handles, such as LinkedIn, WhatsApp, Instagram, and Facebook. You can link your resume using Google Docs.\n2. Wix Wix is a Content management system (CMS) that allows users to build portfolio websites and showcase their works.\nBuilding a Wix website as a portfolio is a professional way of showcasing your write-ups. You can build your website with Wix without having coding experience.\n3. Clippings Clippings is a software that allows you to add writing samples as a link for your portfolio. You can add links to your Medium, Hashnode, and LinkedIn articles.\n4. Concentre Concentre is a writing portfolio that allows you to link writing samples to platforms like Medium and Hashnode.\nConcentre works as a browser extension, enabling users to take notes and manage portfolios. Concentre integrates with WordPress, HashNode, DevTo, Strapi, Medium, and Notion. Concentre is free to use.\nStatic Site Generators Static Site Generators (SSGs) are tools that automate the creation of websites by generating pre-built HTML pages from content written in plain text formats like Markdown, reStructuredText, or AsciiDoc.\nThese generated pages are then hosted on a web server, eliminating the need for a complex backend database or server-side scripting.\nStatic Site Generators\nHugo, Mkdocs, Docusaurus, Gatsby, and Sphinx are static site generators.\n1. Hugo Hugo is a static site generator used for optimizing web pages within seconds. It is written in Go (also known as Golang).\nHugo\u0026rsquo;s offers integration with Google Analytics. Hosting can be done on Gitlab and Github.\nFeatures:\nCross-Platform Great Themes Fast Build Times Integration with Google Analytics 2. Sphinx Sphinx is used to create documentation. It is optimized for text formats to HTML. Sphinx is a popular Python documentation tool.\nFeatures:\nKnowledge Base Built-In Extensions 3. Gatsby Gatsby is a Progressive Web App (PWA) static generator. It is used to load react.js components. It is optimized to load HTML, CSS, and Javascript codes for the site to load quickly.\nFeatures:\nSearch Engine Optimization Speed Security 4. MkDocs Mkdocs supports building HTML pages. Mkdocs is a Python package used to develop and load web pages. A recent version of Python and Python Package Manager (pip) is required to install Mkdocs. Mkdocs is free to access and geared towards speed and simplicity.\nFeatures:\nUses Python for quick setup. Free to use. Supports Markdown. Search Engine Optimization (SEO) SEO Tools help you boost your website’s ranking on search engines like Google, Yahoo, and Bing.\nIt involves using keywords in your technical content. Keywords come in three main types - Head, Medium Tail, and Long Tail.\nSEO also has three categories - Technical, On-Page, and Off-Page.\nOn-page SEO ensures your web pages are relevant and useful relative to the phrases people are searching for.\nAccording to Semrush, off-page SEO shows Google that your website and pages are authoritative and trustworthy.\nTechnical SEO ensures your site is organized well, accessible to Google, and loads quickly.\nSEO\nCommon SEO tools are Semrush, Keyword Surfer, and Google Analytics.\n1. SemRush Semrush is a powerful, extensive tool for search engine optimization. Semrush provides analysis tools for websites and businesses.\nThey offer features to analyze competitors’ traffic, organic research, and domain overviews. Semrush has a keyword research tool to give insights on keyword overview, managing keywords, and organic traffic insights.\n2. Keyword Surfer Keyword Surfer provides content and keyword research for search engine optimization. SurferSEO created it to generate Google-ranking keywords.\nIts primary purpose is to assist users in optimizing published articles or content for search engines, including Google and Yahoo.\nKeyword Surfer calculates the anticipated monthly traffic for a domain in a specific geographical region in response to a query on Google involving a word or sentence.\nIt provides the precise frequency of occurrence for each phrase mentioned in the article and the word count of the article. Side by side, Keyword Surfer displays the overlap and volume of keyword suggestions.\n3. Google Analytics Google Analytics is a web analytics service that, among other things, can be used for search engine optimization (SEO) and marketing objectives.\nIt provides statistics and basic analytical tools. Google Analytics is a platform that, when connected to your websites and mobile apps, will collect data and compile it into reports that offer insights into businesses and companies.\nProductivity Productivity Tools are useful for keeping track of ideas and increasing efficiency. They help save time, set tasks, streamline workflows, and increase overall writing performance.\n1. Notion Notion is a web application built by Notion Labs Inc. It is a free tool for taking notes. It provides organizing capabilities such as task management, project tracking, to-do lists, and bookmarking, among other things. Notion is a tool that is useful for storing and organizing ideas.\n2. StayFocusd StayFocusd is a time management application. Writers encounter challenges such as procrastination, distractions from social media platforms, and an inability to concentrate.\nStayFocusd is a Chrome extension designed to assist you in managing your time, blocking unwanted websites, and enhancing productivity.\nThis way, you can focus on researching and writing instead of mindlessly scrolling on social media apps and websites.\n3. Google Calendar Google Calendar helps you to plan your writing schedule. With the calendar, you can set reminders to write. One significant aspect of writing is having an outline.\nWith Google Calendar, you can break down the different aspects of a writing project in weeks or days. Schedule your writing within your working hours on Google Calendar.\nThis will significantly improve productivity.\n4. Microsoft To-Do Microsoft To-Do is a cloud-based app for planning tasks. Microsoft To-Do is compatible with smartphones, tablets, and computers. Microsoft To-Do is a free Windows, Mac, and Android application. It helps users to stay organized and productive.\nHighlighting Imagine researching a topic on a website and finding multiple critical points to add to your write-up. You may need help with taking notes of everything.\nThis is where highlighting tools come in. They help you highlight text on websites and PDFs so you can easily refer back to them.\n1. Glasp Glasp is an online highlighter for the web. Glasp stands for \u0026ldquo;Greatest Legacy Accumulated as Shared Proof.\u0026rdquo;\nWith Glasp, users worldwide can highlight content on various websites and PDFs. Glasp is a mobile app for Android and iOS and an extension for web browsers.\nWith Glasp, you can see what other users highlighted on your profile page. Glasp offers an extension to highlight and copy transcripts of YouTube videos. Glasp is useful in highlighting online articles or videos. It helps organize thoughts and find online references.\n2. Weava Weava is a tool utilized to highlight PDFs and web documents. In contrast to Glasp, this application cannot highlight transcripts of YouTube videos. Weava is accessible through mobile applications on iOS devices.\n3. Liner Liner offers the option to highlight YouTube videos, articles, and PDFs with a timestamp. Liner offers three tiers of subscription services: pro, premium, and free.\nLiner is compatible with desktop and mobile applications (iOS and Android). Unlike Glasp, Liner does not support importing highlights into Kindle.\nArtificial Intelligence (AI) Tools The digital world is evolving with Artificial Intelligence (AI). AI tools can help with suggesting writing patterns and thought processes.\nAI\nSome AI tools are ChatGPT, Bard, and GrammarlyGo.\n1. ChatGPT OpenAI developed ChatGPT. ChatGPT is an excellent writing and AI software that helps you write outlines and articles based on the topics and prompts you give.\n2. Bard Google developed Bard, an AI tool to provide writing materials and resources. Bard references websites based on the content it offers for accuracy.\n3. GrammarlyGO Grammarly Go is an AI tool integrated with Grammarly to help you quickly write content for clients\u0026rsquo; emails, articles, and websites. It helps writers overcome writer\u0026rsquo;s block and generate sentences based on prompts.\nHow to use tech writing tools to create and edit technical documentation Now, let\u0026rsquo;s talk about how to use technical writing tools to create and edit technical documentation.\nTechnical Writing Tools are important to save time, increase productivity, and reduce errors.\nIn this section, you will learn how to use tools such as Grammarly, Duplichecker, Keyword Surfer, Snipping Tool and Annotely.\nGrammarly Grammarly works as a web app, a keyboard on mobile devices, and an extension for web browsers.\nTo use Grammarly for web browsers, follow these steps.\nAdd Grammarly as a Chrome extension. Open Google Chrome and go to the Chrome Extensions Store. Click \u0026ldquo;Add to Chrome\u0026rdquo; to start the download. With the extension, you can confidently write. When writing online, the Grammarly extension can be added to check grammar, style, tone, and syntax mistakes. Grammarly for mobile works as a keyboard and integrates across all applications. It is compatible with Android and iOS devices.\nSign up to Grammarly using grammarly.com with your Gmail to use the Grammarly web app. This automatically adds your account to Grammarly.\nYou can upload your files to Grammarly on the web app. Login to Grammarly’s website to use the web app, and upload the document to check for corrections.\nEditing Content on Grammarly To edit content on Grammarly,\nUpload the document saved on your PC, or click on “New” to paste the text. 2. This opens a new page with the text. Grammarly offers suggestions to corrections on the right-hand side. Click on “Accept” to make the changes.\r3. Check each suggestion it offers and accept it, if it fits in the context of your write-up.\r4. Download the document after making the changes and proofreading.\r5. Publish your write-up on your desired platform.\rDuplichecker Duplichecker works on the web to check plagiarism.\nTo use Duplichecker, follow these steps.\nCopy and paste the text in the box on the website. Check the Captcha, “I am not a robot,” Click “Check for plagiarism.” It takes a few minutes to load. Once it is complete, it shows the percentage of plagiarism. If a part of the text is plagiarized, it highlights the text and cites the source of the words. Using the free version shows a lot of ads on the page.\nAnnotely Annotely is very easy to use. Annotely does not require a sign-up with email.\nOpen your web browser, and visit Annotely’s website. Select “Start Annotating now.” Drag or drop the image from your device. Annotely has arrows, blur, and text options to add to the photos. Download the image once you’re done.\nSnipping Tool: How do you use the snipping tool on Windows? Follow the instructions to use the tool.\nOn your start bar, search for “snipping tool.” Select new and snip the page. Save it on your PC. Keyword Surfer Keyword Surfer works as an extension on the web. To use Keyword Surfer, follow these steps.\nDownload it from the Chrome extensions store.\nSelect “Add to Chrome.” Once it is added, it automatically starts working on the web browser.\nSearch for any keyword, and Keyword Surfer will provide the keywords required. Glasp Glasp can be downloaded on Windows and Mac OS desktops. It is currently available for Android and iOS. Glasp is a browser extension.\nPages can be highlighted in browsers with the addon. To install Glasp, go to Glasp website and register with your email. After signing up, click “Add to Chrome.” Add the extension via a pop-up. Glasp is free. It works on desktop PCs with Chrome, Safari, Edge, Brave, Vivaldi, and Opera.\nTo start highlighting with Glasp, follow these steps:\nOpen your desired article or PDF Choose words to highlight and select the highlight colour. Choose from four colours. Pink, yellow, green, and blue. Once the colour is selected, the text is highlighted. You can access the text highlighted on your profile page on Glasp Website. Exercise In this exercise, you will write an article covering everything about Google Docs and how to use it.\nDo the following:\nGenerate the table of content. Choose a suitable title. Write in Markdown. Watch this video to learn how to write in Markdown - Introduction to Markdown\nCreate a repo on GitHub. Create a new markdown file that will contain your assignment. Use VSCode to write and test your markdown (Send a screenshot of your vscode containing your assignment) Submit your Github repo URL. This article should have the following.\nArrange the order of the content. Attention to details. Work on the information architecture. It should be over 1000 words. No plagiarism. Don’t use AI-generated content. Your audience is a novice. Proper citation . No grammatical or spelling error. No repetitive and filler words. Must have necessary images. Use the Google Writing style guide. After review, tag @TechnicalWriti6 on Twitter to the link to your article.\nAnswer the following questions.\nLoading...\rCheck your knowledge\nQuestion 1:\rTechnical writing is a field that requires _____________, and __________in communication.\nAmbiguity, transparency\rClarity, efficiency\rOpacity, vagueness\rQuestion 2:\rWhich of the following is not a publishing site?\nMadcap Flare\rWordPress\rSphinx\r","date":"2023-08-15","id":76,"permalink":"/docs/technicalwritingcourse/using-technical-writing-tools/","summary":"This article explains the various types of technical writing software available in the market and how they can aid the writing process.","tags":[],"title":"Using Technical Writing Tools"},{"content":"\rIn this Module, you will learn:\nWhat is a writing style guide? How to create a writing style guide Why is it important for technical writers to have a writing style guide? Popular style guides and how to pick one for your project What is a writing style guide? A writing style guide, also known as a manual of style, is a document containing standards (rules) for writing and formatting documents. Its purpose is to assist writers in maintaining consistency in their writing style and ensuring that the documentation is clear and easy to understand.\nWhether crafting a blog article or collaborating with a documentation team, a style guide is crucial in maintaining a consistent brand voice and tone. Without this consistency in your writing style, your readers may struggle to grasp your intended message.\nFor instance, observe how the Google Developers documentation style guide utilizes its guide to maintain consistency.\nIn the following example, you\u0026rsquo;ll see clear guidelines on formatting lists. They not only provide clear guidelines but also examples on representing various list types in their documentation and how to introduce them.\nGoogle Developers Documentation Style Guide Sample\nIntroductory sentences for lists\nIntroduce a list with the appropriate context. In most cases, precede a list with an introductory sentence.\nThe sentence can end with a colon or a period; usually a colon if it immediately precedes the list, usually a period if there\u0026rsquo;s more material (such as a note paragraph) between the introduction and the list.\nIf the list doesn\u0026rsquo;t need any additional context other than the heading that immediately precedes the list, it\u0026rsquo;s OK to not introduce a list with an introductory sentence.\nIntroduce a list with a complete sentence, not a partial one that\u0026rsquo;s completed by the list items. You can also use the following as a noun phrase (see following in the word list).\nRecommended Use the Submit button for any of the following purposes:\nTo submit the form. To indicate that you\u0026rsquo;re done. To allow the next person to enter their data. To learn more about Google Developers Documentation style guide, visit Google Developers Documentation style guide.\nHow to create a writing style guide If you\u0026rsquo;re unable to find a pre-existing guide that aligns with your company\u0026rsquo;s style and brand, consider creating an in-house guide.\nThis allows you to tailor the guide to effectively communicate your company\u0026rsquo;s values, establish a desired voice and tone, and ensure the use of appropriate grammar and punctuation.\nIn this section, you\u0026rsquo;ll delve into these essential aspects and more for creating a comprehensive style guide.\nThe following are important attributes that must be contained in your style guide:\nEstablishing the Company\u0026rsquo;s Brand\nThe initial step in crafting an effective guide involves aligning the writer\u0026rsquo;s mindset with the company\u0026rsquo;s identity, values, and objectives.\nThis step is crucial as it enables the writer to comprehend the company\u0026rsquo;s brand and how to effectively communicate it to the reader.\nAddressing a company\u0026rsquo;s brand entails emphasizing its values, mission, and vision. Placing your company\u0026rsquo;s brand identity at the forefront of your style guide is essential, serving as a constant reminder for the writer.\nAn excellent illustration of effective brand communication is demonstrated by Slack. They clearly outline their identity, values and all they represent.\nFigure 1. Slack\u0026rsquo;s brand identity\nWhile a solo writer may find this step less critical, it becomes crucial when collaborating with a team of writers. Ensuring everyone is aligned with the company\u0026rsquo;s brand fosters consistency in communication.\nUtilize an Existing Publishing Guide\nWhile you embark on creating your own guide, it\u0026rsquo;s worth remembering that guides have a rich history, and there\u0026rsquo;s no need to reinvent the wheel. Consider using an existing publishing guide as a starting point for crafting your own.\nChoose a guide that aligns with your specific requirements. For instance, if you\u0026rsquo;re working on technical documentation, opt for a APA Style guide. If you\u0026rsquo;re crafting an academic document, consider using the MLA handbook.\nVoice and Tone\nUnderstanding voice and tone is crucial, yet it can be misunderstood by many writers. Voice represents the personality of your writing, while tone sets the mood.\nVoice and Tone tip\nIf you\u0026rsquo;re composing a blog post about a new product, aim for a friendly voice and an excited tone.\nFor companies with diverse social media outlets for customer communication, maintaining a consistent voice and tone is essential. This consistency plays a key role in building trust with customers.\nWhen determining the tone and voice for your company, consider asking a few key questions:\nAre you aiming to be formal or informal? Do you prefer a friendly or professional tone? Is your style more serious or humorous? Answering these questions will guide you in making decisions about the tone and voice that best represent your company.\nAn exemplary case of a company effectively communicating its voice and tone is Mailchimp. They provide extensive details on how their company engages with customers.\nFigure 2. Mailchimps voice and tone\nGrammar and Punctuation\nHaving defined the voice and tone, it\u0026rsquo;s now time to delve into the finer details of your guide. Consistent rules regarding grammar and punctuation are essential; otherwise, your documentation may become confusing for your readers.\nWhen determining the grammar and punctuation rules for your company, consider asking a few questions:\nDo you want to use the Oxford comma? Are you inclined towards the serial comma? Is the em dash or en dash your preference? Given the multitude of standards in this area, refer to Shopify\u0026rsquo;s style guide for a comprehensive example. They provide clear explanations with numerous examples to illustrate their grammar and punctuation rules.\nFigure 3. Shopify\u0026rsquo;s grammar and punctuation\nIn your guide, be sure to provide examples for every point you make. This practice aids your writers in understanding the intended message and application of the guidelines.\nFormatting\nWhile many guides combine the formatting and grammar sections, I\u0026rsquo;ve chosen to separate them due to their distinct nature. Formatting pertains to how you present content to your readers. Consider questions like whether to use bold or italics, headings or subheadings, lists or tables, etc.\nWhen establishing formatting rules for your company, pose key questions to guide your decisions;\nDo you prefer using bold or italics for emphasis? What is your approach to using headings or subheadings? Are lists or tables the preferred format? Asking these questions will aid in defining the formatting style for your documentation.\nA notable example of effective documentation formatting can be found in the Google Developer Documentation Style Guide. This guide provides comprehensive rules for formatting, covering areas such as headings, titles, numbers, lists, tables, and more.\nFigure 4. Google Developer Documentation Style Guide formatting section\nTerminology and abbreviations\nTo create the terminology and abbreviations section, compile a comprehensive list of all terms and abbreviations specific to your company. This list guides writers in using the correct terms and abbreviations in documentation.\nWhen deciding on terminology and abbreviations, consider key questions:\nShould two-letter initialisms have periods? How do you introduce abbreviations? What significance do italics and abbreviations hold for your company? Answering these questions aids in making informed decisions for your style guide.\nA commendable example of incorporating terminology and abbreviations into documentation can be found in The 18F Content Guide. This guide provides insights into when to use abbreviations, how to introduce them, and more.\nFigure 5. 18F\u0026rsquo;s Content Guide terminology and abbreviations section\nImages and diagrams\nWhile many companies have a separate design style guide for visuals and media content, it\u0026rsquo;s crucial to include essential information on how writers source images.\nCertain questions need answers if writers are responsible for creating images or diagrams. For instance:\nWhat is the preferred image format? Are there specific preferred dimensions? Should all images include a brand logo? Addressing these questions will provide clarity for writers creating visual content.\nProviding guidance on producing images aligned with the company\u0026rsquo;s goals is essential for writers. DigitalOcean serves as an excellent example, effectively communicating necessary information about incorporating images into content.\nFigure 6. DigitalOcean\u0026rsquo;s image and assets style guide section\nNote\nStriking the right balance is crucial for a style guide—it shouldn\u0026rsquo;t be excessively long, diverting writers\u0026rsquo; focus and resulting in subpar documentation, nor should it be too short, leading to random filling of missing parts and conflicts in style. An optimal style guide typically spans three to five pages, offering sufficient, focused information for writers.\nCheck your knowledge:\nQuestion 1:\rAll of the following are components of a style guide EXCEPT:\nVoice and tone Grammar and punctuation Typography Formatting guidelines Question 2:\rWhat does the section on \"Voice and Tone\" in a style guide address?\nRules for grammar and punctuation Choosing the right image format\rEstablishing the company's brand Defining the personality and mood of writing Utilize a Template If you prefer not to start from scratch or are on a tight deadline to create a company style guide, consider using a template.\nTemplates serve as boilerplate guides where you can input your company\u0026rsquo;s information, including vision, mission, and all the necessary sections discussed above.\nWhile a quick Google search yields several style guide templates, Writers.com offers a particularly neat and recommended template.\nDownloading this template provides a solid starting point for creating your style guide.\nAlways keep in mind that consistency is the key to a good style guide. Adhere consistently to the standards and rules you adopt.\nWhy is it important for technical writers to have a writing style guide? The primary aim of a style guide is to enhance communication between the writer and the reader. With a well-defined style guide, writers can uphold consistency throughout their documents, thereby reducing the cognitive load on readers.\nBelow are few reasons why adopting a style guide is beneficial:\nEstablishing a distinct brand representation: Take popular blogs like MDN or DigitalOcean, for instance. You can quickly identify an article as theirs simply by observing the writing style. This is made possible by their adherence to a style guide, ensuring a consistent brand voice and tone.\nMDN Writing Style Guide Sample\nHow to add images and media\nTo add an image to a document, add your image file to the document\u0026rsquo;s folder, and then reference the image from within the document\u0026rsquo;s index.md file using Markdown image syntax or the equivalent HTML element.\nTo learn more about MDN writing style guide, visit MDN Web Docs.\nThis is crucial as it contributes to building trust with your readers. When readers trust you, they are more inclined to return for more content. This is particularly significant for technical writers aiming to establish a brand or companies seeking to cultivate a community around their product.\nMinimize readers\u0026rsquo; cognitive load: A style guide enables you to sustain consistency in your writing style, simplifying the understanding of your documentation for readers. Without a style guide, readers would need to invest more time deciphering your documentation due to inconsistency of content.\nThe longer it takes for readers to comprehend your documentation, the higher the likelihood they\u0026rsquo;ll leave. This is detrimental for your blog or company, as it translates to potential loss of subscribers or customers.\nSimplified editing process: A style guide streamlines the editing of your documentation for your editors. With a clear set of guidelines, they know exactly what to look for during the editing process. Without a style guide, editors would spend more time figuring out what needs editing.\nThe longer editors spend searching for useful information to edit your documentation, the greater the chance of making mistakes. These errors can have significant repercussions on the credibility of your documentation.\nSingle Source of Truth (SSOT): It serves as a centralized point of reference containing all information related to your documentation. SSOT encompasses grammar and punctuation rules, formatting guidelines, terminologies, abbreviations, as well as visual elements like images and diagrams.\nThe lack of a style guide means that your writers will invest more time figuring out how to format their documents. This is due to the absence of a trustworthy source containing all the necessary information for editing their documentation.\nPopular style guides and how to pick one for your project While you can create your own style guide (which we\u0026rsquo;ll discuss later), there are advantages to relying on an existing guide.\nUsing an existing style guide saves time since you don\u0026rsquo;t have to create one from scratch; you can simply choose one that fits your needs and start using it immediately.\nStyle guides are categorized based on the type of content they address. Examples include style guides for technical documentation, academic writing, open source documentation, and more.\nHere are details about some of the most popular style guides, aiding you in selecting the one suitable for your project.\n1. Publishing style guides Publishing style guides are employed by publishers to uphold consistency in their publications. They encompass aspects such as grammar, punctuation, formatting, and more. Here are details about some of the most popular publishing style guides:\nThe Chicago Manual of Style The Associated Press Stylebook The MLA Style Manual The APA Style Guide 2. Technical writing style guides Technical writing style guides assist technical writers in ensuring consistency in their documentation. They address aspects like punctuation, terminology, abbreviations, images, diagrams, and more. Here are details about some of the most popular technical writing style guides:\nMicrosoft Manual of Style Google Developer Documentation Style Guide Apple Style Guide IBM Style Guide 3. Content style guides Many blogs and companies utilize concise style guides to uphold consistency in their content. These guides cover various aspects to ensure uniformity. Here are details about some of the most popular content style guides:\nMDN Web Docs DigitalOcean The Red Hat Style Guide The Mailchimp Content Style Guide 4. Open source style guides Guides governing technical content in open source projects are crucial for maintaining consistency. Here are details about some of the most popular open source style guides:\nGnome Documentation Style Guide Open SUSE Documentation Style Guide 5. Government and Academic style guides Government agencies and academic institutions rely on style guides to uphold consistency in their content. Here are details about some of the most popular government and academic style guides:\nPrinceton University Style Guide Gov.uk Style Guide Plainlanguage.gov Note\nWhen using a style guide, make sure to follow it persistently throughout your documentation. Don\u0026rsquo;t mix and match different style guides because the representation of information can confuse your readers.\nExercise\nComplete the following exercises before procedding to the next module.\nImagine you\u0026rsquo;ve been tasked with creating a comprehensive writing style guide for a tech company. Use the information provided in this section to complete the following tasks:\nStyle elements identification: Identify and list at least five key style elements that should be addressed in the writing style guide. These may include grammar rules, punctuation conventions, formatting guidelines, tone considerations, and use of industry-specific terminology.\nExplanation and examples: For each style element identified, provide a clear and concise explanation of why it\u0026rsquo;s important and how it should be applied. Include at least two examples demonstrating both correct and incorrect usage.\nVisual Design: Design a visually appealing layout for the style guide document. Include appropriate headings, subheadings, bullet points, and other formatting elements to improve readability and usability.\nAdhere to all the tips and measures from this documentation. After review, tag @TechnicalWriti6 on Twitter to the link to your style guide.\nAnswer the following questions.\nLoading...\r","date":"2023-07-15","id":77,"permalink":"/docs/technicalwritingcourse/writing-style-guide/","summary":"Understanding the importance of style guides and how to create one.","tags":[],"title":"Writing style guide"},{"content":"\rModule content In this Module, you will learn:\nHeadings Example of good and bad headings Lists Tables Figures and Images How to use formatting to improve the readability and clarity of your technical documentation Formatting - Definition Formatting refers to how visually organized a document is arranged on the page. Formatting covers a wide range of things, including font size, font selection, lists, indentation, margins, alignment, spacing, etc. Technical documents must be reader-centered.\nThe information should be explained and presented in a style that is readable and easy to understand. Formatting is one of the core elements of all technical documents.\nA format should show a hierarchical structure of information that guides the reader through the text.\nRegarding technical writing, ensuring that the document is reader-friendly and follows a clear organizational pattern is important.\nThink of it like visiting a friend\u0026rsquo;s apartment or going on vacation, where everything is in the wrong place. It can be frustrating and confusing to navigate through.\nSimilarly, if a technical document is not properly formatted, it can be difficult for readers to understand the content.\nCertain guidelines should be followed to write a well-formatted and reader-centered technical document.\nThe information should be presented in a style that is easy to read and understand. Formatting is one of the core elements of all technical documents, and it should show a hierarchical structure of information that guides the reader through the text.\nCommon formatting elements for technical documentation: The coming section explores Headings, Key Guidelines for Headings, and Levels Of Heading .\nHeadings Most technical articles and documents follow a particular hierarchy from introduction to conclusion. Often, the structure depends on the type of article or technical document.\nHeadings and subheadings are important elements of technical writing. They make your content more organized and help your readers navigate through what you have written.\nProper use of headings and subheadings increases the accessibility of your documents. One very important practice is writing descriptive and concise headings highlighting each section\u0026rsquo;s main idea\nHeadings are really important features in technical writing; they alert your readers about upcoming topics and subtopics and help readers skip and go to what they are interested in, in the case of long technical articles or documentation.\nIt can help you organize your content into large sections [major headings] and smaller sections [sub-headings]. Headings are formatted by level [first level, second level, third level], which can vary in position and formatting.\nAvoid using vague headings that do not convey any specific information. Headings should clearly state what your readers should expect from your content. Additionally, keywords in your headings help you optimize your technical document or article for search engines.\nKey Guidelines for Headings Always make your headings descriptive; using headings like ‘’Django plugins” does not convey the right message. Your headings should inform the reader of the content of each section.\nAlways make headings parallel in phrasing. This helps readers know if the sections are similar to the preceding ones. It is always best practice to use parallel construction to structure the phrases similarly. If one headline begins with a verb, all headlines should also begin with a verb. Example; “Conquer Your New Year\u0026rsquo;s Resolutions with These Simple Tips”\nEnsure that your headings maintain consistency. Use type size, style, color, italics, alignment, bold, etc. These guidelines can help you design headings effectively.\nFormat headings so that they indicate their level. Always use a hierarchical format when writing headings; generally, first-level headings are larger and bolder than second and subsequent-level headings.\nAlways use a consistent style of capitalization. Headings can be capitalized using several approaches. It is important to note that the same capitalization style should be used for each heading and each subheading within the document.\nLevels Of Heading First Level Headings The first level heading is the highest or main level heading. It is usually best practice for first-level headings to be the largest and should be bold.\nLevel Two Headings The second level heading is a subheading of Level 1. Second-level headings are usually smaller and different from first-level headings. When formatting, it’s usually best practice to indent the heading and align the subsequent blocks of text.\nLevel Three Headings Level 3 is the subheading of Level 2. Third-level headings are usually smaller than level-two headings. It should either be italicized or indented.\nExamples of Good and Bad Heading Good headlines help you draw attention to your audience. Headings are a quick way to capture people’s attention and encourage them to read more.\nExamples of good and bad headings to illustrate key principles.\nGood Headings “Introduction to Data Analysis” Indicates the main topic section\n“Key Benefits of Eating Balanced Diets” conveys the main points to be discussed\n“Methods for improving productivity as a student” Describes the section\u0026rsquo;s content and provides a clear focus\nBad Headings “Jewelry I found” Vague and lacks specificity, leaving readers uncertain about the content.\n“Chapter 1” Generic and Uninformative: readers can\u0026rsquo;t discern the content without more context\n“Random Stuffs” Similar to “Random Facts”, it lacks specificity and doesn’t guide the reader\nThe coming section explores list, Guidelines for Creating Lists in Technical Writing, and List Types .\nList In technical writing, it is important to convey information clearly and concisely. Using lists while writing can be a helpful tool in highlighting important points, properly structuring your paragraphs and sentences, and organizing your document.\nListing in technical writing can make a technical document more readable and simplified. Even with formatting a list correctly, your articles could be clearer to your readers. It is important to understand how to format a list properly.\nGuidelines for Creating Lists in Technical Writing Do not split a list over two pages; try as much as possible to ensure the list stays on one page.\nTry not to overuse lists; most importantly, a list should have complementary explanatory text to add more information about the list and its importance.\nEnsure that the first letter of each of the list items is capitalized.\nAt least 2-8 items should be included in a list; ensure that you have at least two items in a list, or it might not be considered a list. Also, having more than 8 items in a list is too much; if the information can be merged, it will make it readable and well formatted.\nAdd spacing to the list to enhance the readability of the technical documents.\nAlways use parallel phrasing / parallel construction.\nList Types Just as different items in a kitchen have different purposes, different kinds of lists also serve different purposes. In this section, we will look at five commonly used types of lists.\n1. Bullet List Bullet lists are the most commonly used type of list. They typically emphasize two or more items when a specific order is unimportant.\nBullet lists can also add whitespace to a document to improve readability. However, they are generally short and should not be used for items longer than a few words.\nExamples of how bullet lists can be used: To list the ingredients for a recipe To outline the steps in a procedure To summarize the key points of a presentation, To create a checklist of tasks 2. Numbered List Numbered lists should be used when the order of the listed items is important, and ideas must be expressed in chronological order.\nFor example, numbered lists often provide instructions, outline steps in a process, or present a sequence of events. Use of numbered lists helps convey a sense of order and progression, making it easier for readers to follow the presented information. Here is a simple, numbered list providing a clear and concise set of instructions on baking cookies\nGather the necessary ingredients. Preheat the oven to 375 degrees Fahrenheit. Combine the dry ingredients in a large bowl. In a separate bowl, cream the butter and sugar together. Beat in the eggs one at a time. Gradually add the dry ingredients to the wet ingredients, mixing until combined. Stir in the vanilla extract. Drop rounded tablespoons onto ungreased baking sheets. Bake for 10-12 minutes, or until golden brown. cool on baking sheets for a few minutes before transferring to a wire rack to cool completely. For optimal clarity, strive to keep your numbered lists within eight items. Consider dividing your list into stages or phases if it exceeds eight items.\nSubsequently, review your documents and check for formatting to enhance readability.\n3. In-sentence lists Sentence lists are typically employed when you have only two to four items and desire to preserve sentence structure and paragraphing. For instance, you could utilize a sentence list to list the ingredients for a simple recipe or the key points of a brief presentation.\nExample of a sentence list:\nThe ingredients for this recipe are flour, sugar, eggs, and milk. The key points of my presentation are the importance of communication, teamwork, and adaptability. As you can see, sentence lists allow you to maintain a cohesive flow while presenting a short list of items. 4. Labeled lists Are employed when the listed items require further explanation or elaboration. For instance, you could utilize a labeled list to define key terms or outline the steps involved in a complex process.\nExample of a labeled list:\nComponents of a Computer: Hardware: the physical components of a computer, such as the CPU, RAM, and hard drive. Software: The programs that enable a computer to function, such as the operating system and application software. As you can see, labeled lists provide a clear and structured way to present information that requires additional explanation.\nNested Lists Nested lists are commonly used when list items have sub-lists, which are lists within a larger list. This structure can help organize and present complex information, particularly when hierarchical relationships between the items exist.\nExample of a nested list:\nFruit\nCitrus\nOrange\nLemon\nGrapefruit\nBerries\nRaspberry\nStrawberry\nBlueberry\nTropical\nMango\nPineapple\nBanana\nLists are crucial features of technical writing. They enhance readability, improve clarity, and ensure that ideas are conveyed accurately and effectively.\nIt break down complex information into digestible chunks, making it easier for readers to grasp and retain key points. They also help to organize and structure content, creating a logical flow that guides the reader through the material.\nThe coming section explores tables, steps to prepare tables in a technical document, and formatting guidelines for creating tables .\nTables A table is a structured arrangement of rows and columns that presents information in a tabular format. It is often used to present selection, comparison, or study information.\nWell-designed tables in technical writing can make information clear and readable and create a visual representation of results, making them more concise and organized.\nTables predominantly present numerical data, such as comparing characteristics like height and depth or listing product prices.\nTables do make it easy to compare information. It can show trends or patterns of increasing or decreasing activity.\nSteps to Prepare Tables in a Technical Document Identify your audience\nWrite a clear outline\nCreate a template for your table\nDesign the Table Layout\nDetermine the Number of Columns Required\nSelect appropriate cell borders\nChoose an appropriate font style that will be used across the documents\nAdd text elements\nThe following guidelines will help you to create and format tables efficiently;\nFormatting Guidelines for Creating Tables Each column in a table should be properly labeled with a meaningful header.\nA table cell should not hold more than two sentences\nIntroduce each table with a sentence that tells the readers what the list or table represents.\nAlways use parallelism within individual columns.\nThe data in the table should be properly explained so that readers don’t find it difficult to understand.\nTables should be simplified to the amount of data that illustrates your point.\nA footnote proves useful for elaborating on specific aspects of one or more items in the table rather than cluttering the table with excessive information.\nAlways include enough data to illustrate your point without misrepresenting it.\nAn example of a table with appropriate introductory text and format\nTable 1: The following table identifies States and Capitals in Nigeria and Their Slogans with Current Governor S/N State Capital Slogan Current Governor 01 Abia Umuahia God’s Own State Alex Otti 02 Adamawa Yola Land of Beauty Ahmadu Umaru Fintiri 03 Akwa - Ibom Uyo Land of Promise Umo Eno In summary, tables should be introduced and referenced in the text beforehand. They should be numbered sequentially and have concise, descriptive, and easy-to-understand captions.\nCheck your knowledge:\nQuestion 1:\rAll of these are steps to prepare tables in a Technical Document except?\nIdentify your audience\rWrite a clear outline.\rCreate a template for your table.\rDo not number your table\rQuestion 2:\rWhich of these is the most commonly used type of list?\nNumbered list\rBullet list\rIn-sentence list\rLabeled list The coming section explores figures, key guidelines for figures, and types of figures in technical writing .\nFigures A figure can be considered any visual element or presentation incorporated into a technical document. Figures can encompass photographs, sketches, schematics, line graphs, and various other forms of visual representation.\nIn most instances, figures present data clearly and concisely. When the need arises to convey quantitative information in a visually appealing way, figures should be employed to enhance the reader\u0026rsquo;s understanding and comprehension.\nFigures should be simple and clear; avoid adding borders, grid lines, background patterns, and 3-D effects.\nKey Guidelines for Figures Figures should exhibit high-quality image resolution, ensuring clarity and visual appeal.\nEach figure in a technical report should be assigned a unique identifier, enabling seamless referencing throughout the document.\nFigure 3.4.2 Sales Strategy for three demo projects about to be launched\nExamine Figure 3.4.2 has a unique identifier for easy reference.\nAll figure elements, including labels, captions, and legends, should incorporate a combination of letters and numbers to ensure unambiguous identification and reference throughout the technical document.\nFigures should be simplified and explanatory, enhancing the clarity and comprehension of the presented information.\nAvoid using overly complex or intricate figures that may obscure the intended message. Instead, opt for clear, concise, and well-organized figures that effectively convey the intended information to the reader.\nUtilize contemporary tools to produce engaging visuals that improve technical writing. Take advantage of the features of Microsoft Office and other specialized software to design graphics that are visually attractive but also informative and efficient in communicating intricate technical ideas.\nAdd a clear, concise, and descriptive image description, and include all necessary information.\nTake a close look at Figure 3.5.2 below. Do you understand what information it conveys?\nFigure 3.5.2\nIf you take a closer look at Figure 3.5.2, you can interpret the image. However, the lack of a descriptive caption makes it difficult to be certain.\nFigure 3.5.3 A Budget Bar Chart showing the percentage of T-shirt sales\nFigure 3.5.3 has a numbered caption and a descriptive title. With this added information, the reader will have a clearer and more informative view of the figure.\nTypes of Figures There are many types of figures in technical writing, including but not limited to.\nDiagrams: They are often used to represent a model or an object. These images can be manually designed or drawn using computer software. Diagrams represent objects such as buildings, vehicles, and tools.\nFlow Chart: They are visual representations used to document and design processes or programs. It is also a pictorial representation of a process in sequential order.\nPie Chart: They are graphics often used to communicate varying percentages or values to each other.\nHistogram: A histogram is a graphical representation that organizes a group of data points into user-specified ranges.\nThe coming section explores Images, General Guidelines to Consider While Adding an Image to a Technical Document, and Pictures in Documentation; “The What and What not” .\nImages As a technical writer, you aim to craft clear, understandable, and readable documents. The goal is to provide your readers with the best possible assistance for using a product.\nOne excellent way to achieve this is by incorporating images into your writing. These images may include photos, screenshots, graphics, and illustrations. It improve content clarity, particularly when writing installation guides, instruction manuals, or introducing new products.\nIncorporating screenshots of the process enhances clarity and comprehension when crafting technical documents, such as user manuals, how-to guides, or release notes.\nWhen guiding a user to use a new application, it is important to ensure the instructions are clear and easy to understand. One effective way to achieve this is using images to support the text.\nOutlining the steps without an image might not be as descriptive and understandable as one with an image. Images can help users visualize what they are expected to do, making it easier to follow the instructions.\nExample 1 To seamlessly utilize this app, follow these steps:\nNavigating the Home Screen: The initial screen presents various sections allowing you to select a class based on your preferred subject. Upgrading to VIP Membership: If you wish to unlock the app\u0026rsquo;s additional benefits, click the \u0026ldquo;Upgrade Now\u0026rdquo; button to become a VIP member. Accessing the Finance Class: For those interested in finance, click the \u0026ldquo;Join Class\u0026rdquo; button to commence the course. From example 1, you can see that the steps for seamlessly using the application were well-aligned and structured.\nHowever, one thing is missing. Can you make a guess? Let’s look at the next example.\nExample 2 To seamlessly utilize this app, follow these steps:\nNavigating the Home Screen: The initial screen presents various sections, allowing you to select a class based on your preferred subject.\nUpgrading to VIP Membership: If you wish to unlock the app\u0026rsquo;s additional benefits, click the \u0026ldquo;Upgrade Now\u0026rdquo; button to become a VIP member.\nAccessing the Finance Class: For those interested in finance, click the \u0026ldquo;Join Class\u0026rdquo; button to commence the course.\nAs you can see, the example with visuals gave a better, more readable, and more understanding explanation than the one without visuals.\nSo, there are several good reasons for adding visuals to technical documentation. Images make the content easier to understand, and they aid in the speed at which the information presented is processed.\nIt also makes complex documentation clear and concise. How and where you will use images in your documentation depends on many elements.\nIndeed, images and illustrations can greatly enhance the clarity and understanding of technical documentation.\nHowever, it is important to note that there may be restrictions on using images in certain technical documents, particularly if they contain sensitive or confidential information.\nCreating professional-quality images for technical documentation often requires specialized tools and expertise that may only be available to some.\nTranslating illustrations can be costly, so it is important to carefully consider the need for images before incorporating them into a technical document.\nGeneral Guidelines to Consider While Adding an Image to a Technical Document The following guidelines are best practices for adding an image to your article.\nThe image included should be relevant to the steps you are trying to clarify.\nEnsure you add a description and reference an image before its placement.\nAlways use appropriate and descriptive captions and labels\nAlways credit image owners and use an image containing copyrighted information\nAlways add clear images, especially while adding screenshots, either in a technical manual or release note; endeavor to use a screenshotting tool to get good screenshots.\nPictures in Documentation; “The What and What not” Best Practices for Adding Images to Technical Documentation\nImages are an essential part of technical documentation, as they can help illustrate complex concepts or procedures and provide additional information that may not be easily conveyed through text.\nSome best practices for adding images to technical documentation:\nChoose the right image format: When selecting an image format, consider the type of image you are working with and its intended use. Common image formats in technical documentation include JPEG, PNG, and GIF. JPEGs are best for photographs, while PNGs and GIFs are better suited for screenshots or diagrams.\nOptimize image size and resolution: Keep image sizes as small as possible without compromising quality. Large images can slow down the loading time of online documentation, while overly compressed images can affect their clarity and readability. As a general rule of thumb, aim for a resolution of 72 dpi for web-based documentation and 300 dpi for print.\nUse descriptive image titles and alt text: Provide descriptive titles for images that accurately reflect their contents. This can help users quickly identify the image\u0026rsquo;s purpose and relevance. Additionally, provide alternative text (alt text) for each image to ensure accessibility for visually impaired users.\nPlace images near relevant text: Place them near the relevant text or instructions they illustrate to ensure that images are helpful and not confusing. This will help users understand the relationship between the image and the text and avoid confusion.\nLabel images clearly: Use labels or captions to provide additional context or information about an image. For example, if you use a screenshot to illustrate a process, label each step with a descriptive caption.\nUse consistent formatting: To ensure consistency throughout your documentation, use the same formatting for all images. This includes size, resolution, and placement.\nHow to use formatting to improve the readability and clarity of your technical documentation Readability is simply communicating ideas in a clear and accessible way.\nConsistency is very important in technical writing. You should use uniform styles, sizes, and formats for all elements to make your document easy to read and understand. Creating a hierarchy with fonts, colors, and alignment is also crucial in technical writing. It helps readers quickly scan the document and find the necessary information.\nAnother important thing you should consider is your audience. Always tailor your content to your readers and understand who you\u0026rsquo;re writing for. This will help you determine the appropriate language, tone, and level of technicality to use in your document.\nOrganizing your content in a hierarchical format is also essential. Creating an outline is a key tool for organization in technical writing. It helps you to organize your content and create an easier user experience for your readers.\nFinally, simplicity is key in technical writing. Always use clear and straightforward language and write short sentences. This will help you convey your information concisely and ensure your readers can easily understand your content.\nExercise:\nComplete the following exercises before procedding to the next module.\nWrite a blog post incorporating the different formatting techniques discussed in this module.\nconsider:\nSentence length and structure: Are the sentences concise and varied?\nParagraph structure: Are the paragraphs focused and well-organized?\nHeadings and subheadings: Are they used effectively to break up the text and guide the reader?\nBullet points and numbered lists: Are they used appropriately for clarity and conciseness?\nImages and other visuals: Are they relevant and well-placed?\nCall to action: Does the post end with a clear call to action for the reader?\nAfter review, tag @TechnicalWriti6 on X(Twitter with the link to you published submission.)\nAnswer the following questions. Loading...\rThe next module explores editing in technical writing.\n","date":"2023-05-15","id":78,"permalink":"/docs/technicalwritingcourse/formatting/","summary":"Module content In this Module, you will learn:\nHeadings Example of good and bad headings Lists Tables Figures and Images How to use formatting to improve the readability and clarity of your technical documentation Formatting - Definition Formatting refers to how visually organized a document is arranged on the page.","tags":[],"title":"Formatting"},{"content":"\rEditing is a vital aspect of the technical writing process. It gives technical document accuracy, consistency, clarity, and better user comprehension. With editing, you check for organization, navigation, paragraph structure, style, tone, and overall content.\nEveryone can coin a write-up, but what makes a valuable document is its conciseness and correctness, edited to fit all required criteria (Such as style, tone, audience needs, and so on).\nRobert Cormier says - “The beautiful part of writing is that you don\u0026rsquo;t have to get it right the first time, unlike, say, a brain surgeon. You can always do it better; find the exact word, the apt phrase, the leaping simile.\nEditing is the other layer of work that makes your technical documentation better.\nIn this Module, you will learn:\nThe importance of editing, The different types of editing, and How to edit for; Clarity Conciseness Correctness Importance of Editing Editing is an essential step in the documentation process for several reasons: It ensures clarity, conciseness, and accuracy in a technical document, but we will explore this aspect in the coming sections of this module.\nOther vital importance of editing in technical documentation include;\nError Prevention and Correction: Technical editing ensures meticulous proofreading to identify and correct errors in grammar, spelling, punctuation, and technical details. Documentation must be error-free to maintain credibility.\nConsistency in Style and Terminology: Editing ensures consistent terminology, style, and formatting use throughout the document. Consistent language helps readers understand and interpret technical information, reducing the risk of confusion or misinterpretation.\nAlignment with Standards and Guidelines: Organizations have specific standards and guidelines for technical documentation, and editing ensures the document aligns with these standards. It aids compliance and adherence to the organizations\u0026rsquo; regulations.\nEnhancement of Readability and Accessibility: Technical editing involves breaking down complex ideas into digestible chunks, using appropriate headings and subheadings, and incorporating visual elements. Enhanced readability makes technical content more user-friendly for a diverse audience.\nLogical Organization of Information: Technical editing involves assessing the document\u0026rsquo;s structure and organization. Editing ensures a logical arrangement of information, following a clear and coherent flow. A well-organized document facilitates efficient information retrieval and supports the reader\u0026rsquo;s understanding of complex concepts.\nThe coming section talks about the various aspects of editing.\nDifferent types of editing Ernest Hemingway says - \u0026ldquo;The first draft of anything is shit.\u0026rdquo; These emphasize the importance of the editing process in refining initial drafts; there are different kinds of editing in some technical documentation.\nYou may use all the various methods for one documentation; in others, you may pair one of each to meet your editing goals.\nThis section explores Proofreading, Copy editing, and substantive editing.\nProofreading Proofreading focuses on finding and correcting errors within writing, grammar, tense, language, typography, spelling, and punctuation.\nIt is carefully examining your work for any remaining mistakes.\nWith proofreading, it is important to slowly and carefully read through your work.\nAn in-depth look at how proofreading works in the context of technical documentation:\nIdentifying and Correcting Typos: One primary objective of proofreading is to catch and correct typographical errors or \u0026ldquo;typos\u0026rdquo; in the document.\nIt includes instances where you omit or duplicate letters or words. Proofreading goes through the document to spot and rectify such mistakes.\nChecking for Spelling Errors: Spelling errors are common in technical documentation and undermine the credibility of the content.\nProofreading carefully reviews the document to identify and rectify any misspelled words. It includes common words and industry-specific terminology.\nCorrecting Grammatical Mistakes: Proofreading involves the correction of grammatical errors. It includes issues such as, subject-verb agreement, verb tense consistency, pronoun-antecedent agreement, and sentence structure. Proper grammar is essential for clear and effective communication.\nAddressing Punctuation Issues: Correct punctuation gives clarity to technical documentation. Proofreading ensures punctuation marks such as commas, semicolons, colons, and periods work correctly.\nThey also check for consistent formatting with quotation marks, parentheses, and other special characters.\nCross-Referencing and Hyperlinks: You have cross-references and hyperlinks to related sections or external resources. Proofreading reviews these elements to ensure they are accurate and functional.\nBroken links or incorrect references disrupt the reader experience and undermine the document\u0026rsquo;s reliability.\nFormatting and Layout: Proofreading pays attention to the document\u0026rsquo;s formatting and layout, including issues like line spacing, margins, and alignment. They ensure the document is visually appealing and adheres to any formatting guidelines.\nConsistency in Abbreviations and Acronyms: Proofreading verifies that abbreviations are consistently applied throughout the document and are defined or explained upon first use.\nExample of proofreading;\n1Original: 2 3The studnet\u0026#39;s preformance on the experiment was exceelent, demnstrating a thorough understandng of the scientific methode.\r1Proofread Version: 2 3The student\u0026#39;s performance in the experiment was excellent, demonstrating a thorough understanding of the scientific method.\rNotice how (student\u0026rsquo;s), (excellent), and (demostrating) were wrongly spelt in the orginal.\nIt\u0026rsquo;s important to note that proofreading needs a keen eye for detail, a strong command of language, and a thorough understanding of the subject matter. While proofreading can enhance the overall quality of technical documentation by eliminating surface-level errors, it is just the first step in the editing process.\nSubsequent editing stages, such as copy and substantive editing, focus on more comprehensive aspects of the document, such as content clarity, style, and overall structure.\nCopy Editing Copy editing involves shaping the technical documentation. It ensures factual and stylistic consistency across the technical document, improves readability, improves sentence flow, and corrects tone inconsistencies.\nCopy editing is a factor that makes sure a piece of writing is accurate, clear, and correct.\nCopy editing ensures the document adheres to a specific style guide, maintains a consistent voice, and presents technical information in a manner that is accessible and engaging for the target audience.\nHow copy editing works in technical documentation:\nStyle and Consistency: Copy editing enforces a consistent style throughout the document. It includes ensuring elements such as headings, subheadings, font styles, and formatting adhere to a predefined style guide (industry standard or organizational guideline).\nTone and Voice: Copy editing focuses on maintaining a consistent tone and voice throughout the document. It ensures the documentation tone aligns with the audience expectations. The tone is more formal and informative for technical documentation but may need to be adjusted to fit the specific audience.\nEliminating Redundancy: Redundant information clutter technical documentation. Esther Freud says - “Editing is everything. Cut until you can cut no more.\u0026quot; Copy editing helps you trim excesses and refine your work to its essential components. You identify and eliminate unnecessary repetition or redundant content to ensure the document is concise.\nConciseness and Efficiency: Copy editing makes documentation more concise by removing wordiness and unnecessary tenses. Concise writing is essential for maintaining readers interest and conveying information efficiently.\nSentence and Paragraph Structure: Copy editing evaluates sentences and paragraph structure to ensure information logically flows. It may reorganize paragraphs or suggest changes in the sentence structure to enhance the overall coherence of the document.\nVisual Elements: Copy editing reviews visual elements such as tables, figures, diagrams, and captions to ensure correct labeling, format, and reference within the text. It also checks if visual elements are consistent with the overall style of the document.\nReferences and Citations: If the document includes references, citations, or footnotes, copy editing verifies their accuracy and consistency with the chosen citation style, such as APA, MLA, or a specific industry standard.\nExample of copy editing;\n1Original: 2 3The company\u0026#39;s marketing strategy is good. They aim to reach a wide audience and their products are superior than others in the market.\r1Copy Edited Version: 2 3The company\u0026#39;s marketing strategy is effective. They aim to reach a broad audience, and their products are superior to others in the market.\rNotice how copy editing fixed the sentence structure and the tone/voice.\nCopy editing ensures the document conveys accurate technical information clearly, concisely, and engagingly, enhancing its usability and effectiveness.\nSubstantive Editing Substantive editing is a more in-depth and comprehensive stage of the editing process. It involves shaping the consistency, cohesiveness, and conciseness of technical documentation.\nWith consistency, substantive editing ensures that information presented in diverse parts of the document does not contradict each other. Take the example of having “producer” and “manufacturer” in the same document.\nWith cohesiveness, it ensures information flows logically. You can use a where you may have:\nlogical arrangement alphabetical arrangement Start Accelerate Accelerate Brake Brake Start Stop Stop Substantive editing checks the intended use, organization, flow, and content strength.\nYou can also check if too much or too little information is present and if similar information is presented consistently across documentation.\nBut it is always better to use less information. Thomas Jefferson says - “The most valuable of all talents is that of never using two words when one will do.\u0026quot;\nHow substantive editing works in technical documentation:\nContent Evaluation: It evaluates the overall documentation content to ensure it aligns with the documentation purpose and target audience. It assesses whether the content is relevant, accurate, and comprehensive.\nStructural Reorganization: It involves reorganizing the document\u0026rsquo;s structure for optimal clarity. You suggest changes to the order of sections, headings, and subheadings to ensure a logical flow of information. This restructuring makes complex technical concepts more accessible to readers.\nContent Expansion or Reduction: Depending on the documentation purpose, substantive editing may recommend adding more detailed explanations or examples for better clarity. Conversely, it might require condensing overly thorough content to maintain conciseness while preserving essential information.\nTone and Voice Adjustment: It fine-tunes the documentation tone and voice. It ensures the content is better pitched (for end-users, technical experts, or other stakeholders). The adjustment helps maintain the readers engagement.\nEnhancing Clarity: It makes the technical content clear, rephrases sentences, simplifies complex language, and provides concise simplification for technical terms and concepts. The goal is to ensure readers with limited technical knowledge grasp the information.\nFact-Checking and Accuracy: It pays meticulous attention to the accuracy of the information presented. Substantive editing verifies data, statistics, references, and technical details to ensure they are up-to-date and accurate. The fact-checking is essential for maintaining the documentation’s credibility.\nConsistency in Terminology: It confirms that terminology and technical jargon work consistently throughout the documentation. It may create a glossary to define all technical terms and ensure the definition or explanation of the terms upon first use.\nCross-Referencing and Citations: It checks the accuracy and consistency of cross-references, citations, and footnotes. Substantive editing ensures correct formatting of all references according to the chosen citation style, such as APA, MLA, or a specific industry standard.\nVisual Elements: Substantive editing reviews and suggests improvements to visual elements, such as tables, figures, diagrams, and captions. It confirms if these elements enhance the content\u0026rsquo;s clarity and integrate effectively into the text.\nUsability and Accessibility: It considers the usability and accessibility of the document. It includes assessing its navigational aids, such as headings, bulleted lists, and links, to ensure readers easily find information. Ensuring better accessibility of the document to individuals with disabilities in compliance with relevant accessibility standards.\nExample of substantive editing;\n1Original: 2 3In this report, we discuss various aspects of climate change. The first section is about causes, the second is about effects, and the third is about solutions.\r1Substantive Edited Version: 2 3This report comprehensively explores climate change, covering its causes, effects, and potential solutions in three distinct sections.\rNotice how substantive editing fixed the overall structure, organization, and content.\nSubstantive editing is a critical step in producing high-quality technical documentation. It ensures the documentation communicates accurate technical information but does so in a way that is clear, well-structured, and tailored to the needs of the intended audience, ultimately enhancing its value and impact.\nCheck your knowledge:\nQuestion 1:\rWhat is the purpose of proofreading in technical writing?\nTo correct grammatical errors\rTo rewrite the entire document\rTo add more technical details\rQuestion 2:\rWhy is editing considered a vital aspect of the technical writing process?\nTo add complexity and confusion to technical documents.\rOnly to correct spelling errors.\rTo ensure accuracy, consistency, clarity, and better user comprehension of technical documents.\rThe coming section explores editing technical documentation for clarity, conciseness, and accuracy (correctness).\nEditing Technical Documentation for Clarity, Conciseness, and Correctness (Accuracy) Editing for clarity, conciseness, and correctness is a standard for producing credible and quality technical documentation. The section details how to edit technical documentation with the 3Cs.\nClarity Clarity refers to the quality of being clear, transparent, and easily understood. It involves expressing ideas, information, or instructions in a way that is easy for the audience to comprehend.\nA clear message is free from ambiguity, confusion, or unnecessary complexity.Editing for clarity ensures easy understanding for its target audience.\nHow to edit for clarity:\nUnderstand Your Audience: Before you begin the editing process, clearly understand your target audience. Are you writing for technical experts, beginners, or a mixed audience? Knowing your audience knowledge level, interests, and expectations is the first step in editing for clarity.\nSimplify Technical Jargon: Technical documentation often contains specialized terminology and jargon unfamiliar to non-experts. Edit by explaining technical terms and consider using simpler synonyms. Clarity helps you strike a balance between technical accuracy and accessibility.\nOrganization and Structure: Review the organization and structure of the document. Ensure the logical presentation of information. Headings and subheadings help readers navigate through the content. Group related information and use a clear hierarchy to show the relationships between sections.\nConsistency: Consistency in terminology, style, and formatting is essential for clarity. Ensure the consistent use of the same terms throughout the documentation. Formatting elements such as fonts, headings, and lists should follow a uniform style.\nActive Voice: Active voice sentences are more direct and easier to understand. Passive voice may make sentences more complex and less clear. Editing for clarity ensures the use of active voice in your sentences.\nAvoid Ambiguity: Ambiguity can lead to confusion. Review your content for ambiguous terms, phrases, or sentences. Be explicit in your explanations, and avoid leaving room for multiple interpretations. If there\u0026rsquo;s room for misunderstanding, clarify.\nVisual Aids: Consider using visual aids like diagrams, charts, and illustrations. These help clarify complex concepts and make the content more accessible. Ensure proper labeling of visual aids and integration into the text.\nExamples and Analogies: Provide real-world examples and analogies to explain technical concepts. Analogies bridge the knowledge gap and make abstract or complex ideas more relatable.\nRevision and Iteration: Editing for clarity is an iterative process. After making initial edits, revisit the document multiple times to refine and enhance its clarity. Each revision brings the content closer to your clarity goals.\n1Original: 2 3The new software update has implemented changes to the user interface, providing users with a more seamless and user-friendly experience.\r1Clarity Edit: 2 3The latest software update has improved the user interface, making it more seamless and user-friendly.\rNotice how clarity edit gave better understanding and easy readability to the text.\nBy applying these principles and techniques, you can effectively edit technical documentation for clarity, making it more accessible and understandable for your intended readers, regardless of their level of technical expertise.\nClarity in technical documentation is vital to its usability and effectiveness.\nConciseness Conciseness refers to the quality of expressing ideas in a precise manner without unnecessary elaboration or redundancy.\nConcise technical documentation conveys information using the most efficient/effective language, avoiding unnecessary words or details that do not contribute to the main message.\nEditing for conciseness is also an essential aspect of creating better technical documentation. A concise document is more engaging, easier to read, and communicates information more efficiently.\nHow to edit for conciseness:\nIdentify Redundant Information: Review your document to identify redundant content. Check for repeated information, ideas, and unnecessary phrases and eliminate redundancy to make the document more concise.\nRemove Unnecessary Words: Carefully examine each sentence and paragraph to identify and remove unnecessary words. Examples include filler words, redundant adjectives, and overly complex sentence structures. Simplify sentences to convey the same meaning with fewer words.\nAvoid Wordiness: Check for wordy phrases you can shorten without losing meaning. For example, replace\n\u0026ldquo;due to the fact that\u0026rdquo; with \u0026ldquo;because\u0026rdquo; \u0026ldquo;in order to\u0026rdquo; with \u0026ldquo;to.\u0026rdquo; Reducing wordiness is a quick way to increase conciseness.\nUse Active Voice: Passive voice sentences are wordier than active voice sentences. Rewrite passive voice sentences to make them active. It shortens sentences and makes them more direct and engaging.\nCut Down on Qualifiers: Qualifying words and phrases like \u0026ldquo;very,\u0026rdquo; \u0026ldquo;extremely,\u0026rdquo; \u0026ldquo;quite,\u0026rdquo; and \u0026ldquo;somewhat\u0026rdquo; can often be eliminated without affecting the meaning of a sentence. Reducing qualifiers leads to more concise and assertive statements.\nCondense Lists: Lists may become lengthy and cumbersome. Edit lists to be more concise by\nRemoving unnecessary items, Combining related items, Presenting the information in a more organized format, such as a table or chart. Use Abbreviations and Acronyms Judiciously: Abbreviations and acronyms help reduce the length of technical terms. However, carefully use them and ensure it suits your target audience. Always spell out the full term on first time and include the abbreviation in parentheses. An example is the Technical Writing Mentorship Program (TWMP).\nFocus on Key Information: Prioritize the most critical information and eliminate less vital details. Your documentation should deliver the essential information without overwhelming the reader.\nUse Bullet Points and Headings: Bullet points and headings can break up dense paragraphs and provide concise, organized information. Use them to present key points and create a visually appealing document.\nExample of editing for conciseness;\n1Original: 2 3It is important to note that the primary reason for the increase in sales is due to the fact that our marketing strategies have been highly effective.\r1Conciseness Edit: 2 3The increase in sales is primarily due to our highly effective marketing strategies.\rNotice how concise edit eliminated unnecessary words/information and made the content more direct. to the text.\nEditing for conciseness is a better balance between preserving essential information and removing unnecessary content.\nA concise document saves the writer and the reader time and enhances the documentation overall readability and impact.\nCorrectness (Accuracy) Correctness refers to the quality or state of being accurate, free from errors, and following established standards, rules, or facts. In technical documentation, correctness is a measure of accuracy and appropriateness.\nEditing for correctness is another critical aspect of technical documentation. Ensuring the information in your documentation is precise and error-free is essential to maintain the credibility of the content.\nHow to edit for correctness:\nFact-Checking: Verify the accuracy of data, statistics, references, and any technical details. Ensure the information is up-to-date and consistent with current knowledge and industry standards.\nCross-Reference Sources: If your document cites external sources or references, cross-reference these sources to confirm the accuracy of the information. Check that citations are correctly formatted and lead to the intended source.\nCheck Technical Details: Pay close attention to technical details. Double-check codes, calculations, formulas, and specific measurements to ensure accuracy. Even minor errors in technical details have significant consequences.\nGrammar and Syntax: Accurate grammar and syntax are essential for clear and precise communication. Review the document for grammatical errors, such as subject-verb agreement, verb tense consistency, and sentence structure. Incorrect grammar can lead to misunderstandings.\nCheck Spelling and Typographical Errors: Even a single typographical error casts doubt on the accuracy of your document. Proofread the document carefully to catch spelling mistakes and typographical errors. Spelling errors can change the meaning of a word or term, leading to confusion.\nMaintaining accuracy in technical documentation is paramount, as errors lead to misunderstandings, misinterpretations, or potentially dangerous consequences.\nThoroughly editing for accuracy helps ensure your document is a reliable and trustworthy source of information.\nExample of editing for correctness;\n1Original: 2 3The experiment was conducted on April 25th, 2022, and the results were published in the June 2022 edition of the journal.\r1Correctness Edit: 2 3The experiment was conducted on April 25, 2022, and the results were published in the June 2022 edition of the journal.\rNotice how correctness edit ensured the document is accurate and free from errors.\nEditing improves the quality of your technical documentation, making it a valuable resource that communicates concisely and accurately to your target audience.\nExercise: Complete the following exercises before procedding to the next module.\nCarefully edit this technical document for all of the diferent types and aspects of editing discussed in this module. After review, tag @TechnicalWriti6 on X(Twitter with the link to you published submission.)\n1Growth, an ever-present facet of the human experience, manifests in myriad dimensions throughout our lives. It transcends physicality, weaving into personal development, knowledge acquisition, emotional resilience, and societal progress. As we traverse life\u0026#39;s intricate tapestry, growth emerges as our guiding compass through uncharted territories of potential. 2Growth is a dynamic process, an intricate dance between aspiration and realization. It encapsulates evolution, a continuous journey unfolding in response to external stimuli, internal reflections, and the interplay of resilience and adaptability. In personal development, growth mirrors a seedling breaking through soil, reaching for the sun, driven by an innate desire to thrive. 3The journey of growth often commences in the crucible of challenges. Adversity, far from being an obstacle, serves as fertile ground where seeds of potential sprout and resilience takes root. Challenges are not adversaries but catalysts for growth, urging us to stretch beyond perceived limitations, fostering courage, and fortifying resolve. It is through the crucible of challenges that character is forged, and latent capacities within us unfurl. 4Educational pursuits exmeplify transformative arenas for growth. The acquisition of knowledge, skills, and perspectives propels individuals toward intellectual maturity and a deeper understanding of the world. Growth in education is not confined to the classroom; it permeates every facet of life, shaping critical thinking, problem-solving abilities, and a nuanced appreciation for diverse viewpoints. 5Beyond personal development, societal growth emerges from collective endeavors to address challenges, innovate, and build a more equitable and sustainable future. Societal growth is a tapestry woven by the collaborative efforts of individuals and communities, each contributing unique threads to the fabric of progress. It encompasses advancements in technology, improvements in infrastructure, and the evolution of cultural norms that reflect an ever-changing collective consciousness. 6Economic growth, a pivotal aspect of societal progress, is not merely measured in monetary terms but also in the expansion of opportunities, the reduction of inequalities, and the enhancement of overall well-being. A flourishing economy is one that fosters innovation, embraces diversity, and ensures that the benefits of growth are inclusive, reaching all segments of society. 7The dynamisc of growth extend into the intricate realm of emotional and spiritual maturation. Embracing vulnerability, cultivating empathy, and navigating complex landscapes of human relationships contribute to profound personal growth. Emotional resilience, forged through life\u0026#39;s trials, enables individuals to weather storms with grace and emerge stronger, more compassionate beings. 8In the natural world, growth is evident in the cycles of seasons, where flora and fauna undergo transformations, demonstrating the cyclical nature of life. Trees, with roots delving deep into the earth, symbolize stability, while their branches reaching skyward epitomize the ceaseless pursuit of higher aspirations. Nature, with its intricate ecosystems, teaches us the interconnectedness of growth—a reminder that individual and collective flourishing are intertwined. 9The metaphor of growth extends to the corporate landscape, where businesses navigate competitive climates and market fluctuations. Sustainable growth in business involves strategic foresight, adaptability to changing market dynamics, and a commitment to ethical practices. Organizations that prioritize innovation, employee development, and societal responsibility contribute not only to their growth but also to the broader fabric of societal advancement. 10Growth, however, is not a linear trajectory but a mosaic of peaks and valleys, successes and setbacks. It necessitates reflection on failures as opportunities for learning and refinement. The willingness to reassess goals, recalibrate strategies, and pivot in response to evolving circumstances is integral to sustained growth. 11In the pursuit of growth, the concept of self-discovery assumes paramount significance. Knowing oneself—acknowledging strengths, confronting weaknesses, and understanding one\u0026#39;s passions—forms the bedrock for intentional personal and professional growth. This introspective journey fosters authenticity, aligning individual aspirations with actions that propel growth. 12As we navigate the myriad dimensions of growth, it is crucial to recognize that the pursuit of progress is not a solitary endeavor. Collaborative growth, where individuals, communities, and societies uplift each other, catalyzes a collective ascent toward shared ideals. Growth becomes not only a personal quest but a shared commitment to building a world that reflects our highest aspirations. 13In conclusion, growth is the rhythmic heartbeat that animates the human experience. It is the unfurling of potential, the refinement in the crucible of challenges, and the collective endeavor to create a better world. Embracing the dynamics of growth requires resilience, adaptability, and a steadfast commitment to continuous learning. In this intricate dance of evolution, we discover the profound beauty of becoming—who we are meant to be and who we are continually striving to become.\rAnswer the following questions.\nLoading...\rThe next module explores in-depth the use of diagrams in technical documentation.\n","date":"2023-04-15","id":79,"permalink":"/docs/technicalwritingcourse/editing/","summary":"Editing is a vital aspect of the technical writing process. It gives technical document accuracy, consistency, clarity, and better user comprehension.","tags":[],"title":"Editing"},{"content":"\rVisual elements like diagrams, images, and illustrations are effective tools for making your documentation engaging and easy to understand.\nThey\u0026rsquo;re great for explaining complex concepts, processes, or workflows. Additionally, they break up large chunks of text and improve readability.\nUsing diagrams is an effective way to communicate complex ideas. They present information visually, making it easier to understand and remember compared to lengthy paragraphs.\nDiagrams also illustrate relationships between concepts, helping you grasp the bigger picture. Incorporating them into your work can save time, simplify communication, and enhance documentation clarity.\nIn this Module, you will learn:\nWhy you need diagrams in technical documentation, Tools to diagrams, How to create effective diagrams, and Do\u0026rsquo;s and don\u0026rsquo;ts for using images in technical documentation. Why do you need diagrams in your documentation? Diagrams in your documentation can enhance communication. Consider using them for the following reasons:\nVisual clarity: People learn and understand information differently. Diagrams provide a visual representation, clarifying complex concepts and making information accessible.\nSimplify complexity: Technical documentation often involves intricate systems. A well-crafted diagram breaks down complexity, making it easier for readers to grasp.\nEnhance comprehension: A picture is worth a thousand words. Diagrams can replace lengthy text, showing relationships between components and improving comprehension.\nQuick reference: Diagrams serve as quick guides for troubleshooting or processes. Users can glance at them for guidance instead of reading through paragraphs.\nTime-saving: In the fast-paced world of technology, time matters. Diagrams help users quickly find information, reducing the time spent searching through extensive documentation.\nDid you know?\nDid you know that most installation manuals use images to guide users through the process instead of text? Utitlizing this method allows these manuals to be used by people who speak different languages.\nDiagrams are useful for conveying messages in various technical documentation forms, such as API documentation, how-to guides, tutorials, or a simple README file. However, creating diagrams may be challenging without design skills or proper tools.\nTools you can use to create diagrams Effective diagrams require the right tools. Numerous tools are available, but not all are equal. Here are some options:\nFigma: Known for interface design, Figma is also great for diagrams. Its user-friendly interface and collaborative features make it ideal for technical documentation.\nDraw.io: Specifically designed for graphs and diagrams, this tool supports collaboration and is free to use.\nLucidchart: Popular in cloud engineering, Lucidchart is free and excellent for creating architecture diagrams of complex systems.\nExcalidraw: This tool creates sketch-like diagrams with a freehand feel, offering a natural and authentic look.\nMicrosoft Visio: If you use Microsoft Office, Visio is a powerful tool for professional-looking diagrams.\nAll these tools can export diagrams in various formats (SVG, PNG, JPG), making it easy to insert them into your documentation.\nHow to create effective diagrams Creating understandable diagrams is crucial. If your diagram is too complex, readers may struggle to follow your message. Here are tips for effective diagram creation:\n1. Keep It Simple, Yet Informative: Simplify your diagram for clarity. Each element should directly contribute to understanding the concept. For instance, in cloud engineering, architectural diagrams should present a high-level view without overwhelming details.\nFigure 1. Architectural diagram displaying clear information\n2. Embrace Consistency: Consistency is key. Use uniform shapes, colors, and formatting throughout. In web development, consistent symbols in user flow diagrams make it easier for developers and designers to interpret user journeys across different parts of a website.\nFigure 2. User flow diagram displaying image design consistency\n3. Thoughtful Use of Labels and Annotations: Guide the reader with clear labels and annotations. In data science, well-placed annotations in process flow diagrams highlight critical steps, aiding data scientists in understanding and optimizing workflows.\nFigure 3. Data flow diagram displaying proper use of labels\n4. Align with Audience Expectations: Tailor your diagrams to your audience. In network security, align a network topology diagram with security professionals\u0026rsquo; expectations. Highlight security layers, emphasize attack vectors, and use familiar conventions for effective communication.\n5. Utilize Visual Hierarchy: Guide the reader\u0026rsquo;s eye with visual hierarchy. In plain diagrams explaining conceptual ideas, use size, color, or placement to emphasize key elements. This enhances understanding, whether illustrating a decision-making process or showcasing relationships between concepts.\nIt\u0026rsquo;s not just about creating a diagram but creating one that works. Keep it simple, consistent, and aligned with your audience\u0026rsquo;s needs. Your diagrams, when simple and aligned, become powerful tools for communication in any technical domain. Embrace the visual language, and let your diagrams tell a compelling story!\nDo\u0026rsquo;s and Don\u0026rsquo;ts for effective technical diagrams As with any concept, usage rules apply. Consider the following when creating diagrams for technical documentation:\nDo\u0026rsquo;s for Using Images in Technical Documentation:\nUtilize alt text: Include descriptive alt text for images. This boosts SEO and ensures accessibility for screen reader users, enhancing inclusivity.\nThe following is an example of alt text in markdown:\n1 ![alt text](/path/to/image.png)\rFigure descriptions: Accompany images with clear figure descriptions. This helps readers, especially in scenarios like network security diagrams.\nThe following is an example of a figure description in markdown:\n1 Figure [NUMBER]. [DESCRIPTION]\rGive credit: Provide proper attribution when using images created by others. This maintains ethical standards in content creation, crucial in web development.\nThe following is an example of image attribution in markdown:\n1 ![alt text](/path/to/image.png) 2 Figure [NUMBER]. [DESCRIPTION] 3 Image source: [SOURCE]\rOr you can give credit in the figure description:\n1 Figure [NUMBER]. [Image source] from [image author]\rHigh resolution: Maintain high-quality images for clear and legible details, benefiting both technical writers and developers.\nUnified formats: Stick to consistent image formats for a polished look. Whether you\u0026rsquo;re a technical writer or developer, using a unified format enhances professionalism and readability.\nCheck your knowledge:\nQuestion 1:\rAs a technical writer creating diagrams, I should do the following EXCEPT:\nUse consistent\rdesign elements Use poor quality\rimages Utilize alt text\rfor images Provide\rhigh-resolution images Question 2:\rWhy is it important to give proper attribution when using images created by others in technical documentation?\nIt has no impact\ron ethical standards It ensures\rexclusivity for image creators It maintains\rethical standards in content creation It increases\rconfusion for readers Don\u0026rsquo;ts for Using Images in Technical Documentation:\nAvoid overcomplicating images: Steer clear of overwhelming your audience with overly complex images. Whether you\u0026rsquo;re a developer illustrating code architecture or a technical writer creating process flow diagrams, prioritize simplicity. Avoid unnecessary details that might confuse rather than clarify.\nAvoid unclear figure descriptions: Ensure figure descriptions are clear and concise. Technical writers and editors should provide enough information for readers to understand the image\u0026rsquo;s relevance. Ambiguous descriptions can lead to misinterpretation.\nAvoid including personal information: Be cautious not to include personal information in diagrams or screenshots, especially when showcasing your codebase. Prevent exposing sensitive information to the public.\nDon\u0026rsquo;t Neglect Consistency in Style: Maintain a consistent style throughout your technical diagrams. Whether you\u0026rsquo;re a developer illustrating system interactions or a technical writer creating documentation, inconsistency in style can lead to confusion. Stick to a unified design language to ensure a cohesive and professional appearance across all your visual elements.\nExercise\nComplete the following exercises before procedding to the next module.\nNavigate to the Technical Writers Mentorship Program YouTube page and complete the following exercises:\nWatch the Introduction to Git and Github part 1 \u0026amp; 2 videos. Create an article on any blog of your choice explaining the steps to create a Github account. Make sure to include visual representation that guides a user at each step. You must use an annotation tool such as Annotely to create your diagrams.\nAlso, adhere to all the tips and measures from this documentation. After review, tag @TechnicalWriti6 on Twitter to the link to your article.\nAnswer the following questions.\nLoading...\r","date":"2023-03-15","id":80,"permalink":"/docs/technicalwritingcourse/use-of-diagrams/","summary":"This article explains the use of diagrams in technical documentation. It also provides tips for creating effective diagrams and do\u0026rsquo;s and don\u0026rsquo;ts for using images in technical documentation.","tags":[],"title":"Use of diagrams"},{"content":"\rIntroduction Information gathering in the context of technical writing is the process of collecting and organizing the information you would want to share in your technical document.\nIt is focused on acquiring specific knowledge about a particular technology, process, or software you want to write on.\nIn this Module, you will learn how to:\nDefine your audience and purpose.\nIdentify your sources of information:\nSubject matter experts (SMEs) Technical documentation (e.g., user guides, white papers, API documentation) Industry publications and blogs Online forums and communities Develop a research plan\nGather information.\nEvaluate and synthesize the information you have gathered.\nReview and revise your information.\nDefine Your Audience And Purpose The first step in information Gathering is defining the scope of your document, which will guide your information selection and presentation.\nTo correctly do this you need to define your audience and the purpose of your document.\nDefining your audience and purpose will help you accurately define your document\u0026rsquo;s scope, guiding you while gathering information or refining your information gathering.\nDefining Your Audience Defining your audience involves determining who you are writing the technical document for and the knowledge gap you want to fill.\nYou need to understand your audience\u0026rsquo;s technical knowledge, background, and expectations to do this.\nYou can check out Module 2 of this course to learn more about defining your audience.\nDetermining The Purpose Of Your Document This involves answering the question: \u0026ldquo;What do I aim to achieve with my technical document?\u0026rdquo;.\nHere are some steps to take to define the purpose of your document:\n1. Identify the Goal: Identify the primary goal of your document. Are you informing, instructing, or persuading your audience? Your goal will determine the structure and tone of your document.\n2. Define The Outcome: After reading your document, what should your user be able to do? Would you want them to be able to implement a specific Technology? Or would you want them to understand a complex concept? Or do you want them to be able to make an informed decision based on the information gained from your document?\n3. Content Scope: With your goal and outcome clearly defined, you can draft out the scope of your document\u0026rsquo;s content based on the technical background of your audience. What information should your audience have already, and what information do you want them to gain from your document?\nFormula for a good documentation\nAccording to Google’s Technical Writing course:\nA Good documentation = knowledge and skills your audience needs to do a task − your audience's current knowledge and skills\nAligning your information gathering with your document\u0026rsquo;s purpose ensures your technical document\u0026rsquo;s relevance and effectiveness.\nIdentify your sources of information The scope of your documentation will determine the sources you can gather information.\nThere are various information sources, each having its unique strengths and limitations.\nHere are some key sources of information:\n1. Subject Matter Experts (SMEs): A subject-matter expert is a person with deep knowledge, experience, and prowess in a particular field called \u0026ldquo;the subject\u0026rdquo;. They are a valuable and reliable source for:\nAccurate and insightful information, Best practices, and Everyday solutions to real-world problems, etc. Within that subject/field. You can get information from SMEs through:\nInterviews, Meetings, and Consultations. Apart from being a source of valuable information, SMEs can also help validate the accuracy and relevance of your content.\nHere are some helpful tips when engaging with an SME:\nAsk open-ended questions. This way, you are giving the expert room to provide detailed explanations. Follow up the discussion with a summary of your thoughts to be sure you didn\u0026rsquo;t miss anything and confirm you got everything right. Build a collaboration with the SMEs to help with future support and review. 2. Technical Documentation: Technical documentation is a document that provides instructions, explanations, and reference materials for a specific technical product, system, or process. It helps you understand how to use, debug, and learn more about the technical subject matter.\nYou can refer to already existing technical documentation that is current and relevant to your subject matter, such as:\nUser guides, White papers, API documentation, Research Papers, Technical Specifications, Glossary of Terms, FAQs, etc. While gathering information from these sources, a good practice is to cross-reference across multiple documents to verify the consistency of information.\nYou can always use Technical documents as a starting point and then complement their information with other sources, such as SMEs, as discussed above.\n3. Industry Publications and Blogs: You can also get valuable information from credible industry publications and blogs to supplement your content.\nWhen extracting information from this source, here are a few things to note:\nEnsure that the authors of these publications are from reliable sources. Remember that most blogs and publications reflect the trends and state of the art at the time of publication. Use this to assess the relevance of the information to your document\u0026rsquo;s objective. Blogs mostly reflect people’s personal opinions and experiences; you can always verify and cross-reference these different views to have a balanced perspective in your writing. 4. Online Forums and Communities: Online forums and communities relating to your Subject matter are great places to get different opinions from fellow community members on real-life experiences, fixes to common challenges, and feedback.\nYou can also get to ask questions and gather insights from community members. Again, you should verify the credibility of the information before using it to supplement your document.\n5. Additional Sources of Information: Other sources of information include but are not limited to:\nSocial Media and Podcasts, Competitor Analysis, User Feedback and Reviews, Tutorial Videos, etc. Always verify the credibility of the information obtained from these sources and cross-reference them to get reliable and accurate content.\nTaking a deeper approach to gathering information from various sources can significantly increase the quality and credibility of your technical writing.\nCheck your knowledge:\nQuestion 1:\rWhich of the following is NOT a recommended source of information for technical writing?\nSubject matter experts (SMEs)\rUser forums with anonymous contributors\rWhite papers from reputable organizations\rQuestion 2:\rWhat are the two key factors to consider when defining your audience for a technical document?\nThe writer's expertise and interests.\rThe document's length and complexity.\rThe audience's technical knowledge and expectations.\rDevelop a research plan You can maximize your information-gathering process by developing a research plan. Your research plan should generally have:\nThe Document\u0026rsquo;s objective, Information Sources, Timelines and Deadlines. Setting Clear Objectives 1. Be Specific: Clearly outline the goals and objectives of your technical document by answering the question: \u0026ldquo;What specific information(s) do you want to deliver to your audience?\u0026rdquo; This will serve as a roadmap in your information-gathering process.\nAn example of a general and specific goal:\n1 General goal: 2 3 Understanding Programming Principles\r1 Targeted goal: 2 3 Understanding SOLID principle in Kotlin\rThis way, you have mapped out what software principle and programming language you will show examples.\n2. Prioritize: Based on your audience analysis, you can prioritize what topics are most important, thus focusing your research efforts on areas that will have the greatest impact on your audience. In our previous example: “Understanding SOLID principle in Kotlin”, you don\u0026rsquo;t need to research what Kotlin programming language is and its history because your audience is expected to be already familiar with Kotlin programming language.\n3. Use the Question-Driven Approach: Create specific questions that your audience should be able to answer after reading your document. This will act as a guide and help your technical document to stay focused and relevant.\nTime Management 1. Set Deadlines: Break down your research process into different phases and allocate realistic deadlines for each phase.\n2. Balance Depth and Breadth: From your audience analysis, allocate time based on how important and complex a topic is.\n3. Schedule Reviews: Have review sessions to assess your progress against the roadmap and timelines you set and make adjustments when needed.\nGather Information After creating a research plan, the next step will be to gather information from the various sources you mentioned in your research plan.\nThere are various methods and techniques you can employ when gathering information, some of which are:\n1. Systematic Data Collection: i. Follow your Research Plan: Your research plan already includes the goal of your document, the specific topics you would cover, and the questions your document should answer. Follow these systematically, collecting information according to them. This will help you stay organized and on track, ensuring you cover all the necessary areas.\nii. Adapt: Information is always evolving, so be prepared to alter your research plan as new information emerges.\niii. Have a Documentation Strategy: There are various ways of documenting your findings. Choose one and stay consistent with it. This will make it easier and quicker to recover and reference information later.\n2. Note-Taking and Organization i. Effective Note-Taking Techniques: Implementing the Cornell method or mind mapping can make your note-taking process more efficient. You can even choose to combine them, whichever works best for you. This will help you in documenting and retrieving information effectively.\nii. Categorization and Tagging: Using categories, tags, or labels to organize your notes will make it easier to find information, identify knowledge gaps, and connect information.\n3. Cross-verification and Fact-Checking Cross-verification confirms the accuracy of information obtained from a particular source by comparing it with different sources.\nIt is best practice to cross-verify your information to ensure consistency and highlight inconsistent areas for further research and investigation. When in doubt, you can also contact SMEs for further clarification.\nThis can help resolve ambiguities and ensure the accuracy of your information.\n4. Active Learning When writing about software or a tool, use them yourself and try out different use cases or scenarios with them.\nThis will give you firsthand experience and a deeper understanding of the subject, which will help you to write valuable insights that supersede theoretical research.\nDoing this may expose you to questions and challenges your audience might face.\nEvaluate and synthesize the information you have gathered. Information Evaluation After gathering information for your technical document, you must read through the technical document and critically analyze its:\n1. Accuracy and Credibility: By ensuring the information is correct, reliable, current, and error and bias free. Also, evaluate that your information source is reliable, from an expert, or a reputable publication.\n2. Relevance: Confirm that the information answers the questions you stated your document should answer in your Research Plan. This ensures that your document satisfies its purpose and objectives and is suitable for your audience. You can remove irrelevant information from your writing to maintain the focus of the writing.\nSynthesize your Data: After evaluating, you must organize your technical writing in a logical and orderly manner that is easy to read through and understand. You can do this by:\n1. Connecting the Dots: Identify the key themes and concepts and extract the central and unifying ideas. Look beyond the individual bits of information but see how they relate. One way to do this is by linking theoretical concepts with their real-world application or comparing the new technology with a technology your audience is familiar with.\n2. Organize the information into a logical structure: Structure your document so that each piece builds to the next. Highlight important points and findings while ensuring an uninterrupted flow of information in your document. Identifying repeating concepts in your documents can help you structure complex information in an easy-to-understand way.\n3. Storytelling and Engagement Strategies: An example of a storytelling approach is relating abstract concepts in your document to physical, relatable things or systems. Including real-world examples or hypothetical scenarios to illustrate important points will also help to make your document more engaging.\nReview and revise your information. The final step in information gathering is to review and revise your document to ensure that it is:\nClear, Concise, and free of unnecessary details. Based on facts and not personal opinions. Consistent and complete, having all the information that satisfies the purpose and objective of the document. Here are some review techniques you can employ:\n1. Self-Review You should read through your technical document as a first-time user and assess technical terms\u0026rsquo; logical progression and accuracy. Look for complex terms and sentences that can be simplified too.\nAlso, try to answer the questions you listed when setting your document\u0026rsquo;s goals and objectives to ensure your writing is relevant.\n2. Peer Review Share your technical document with peers that suit your audience description or SMEs for review and feedback. While doing this, you can make specific feedback requests by asking your reviewers how engaging or clear your technical document is to get more focused and useful feedback. You can make specific feedback requests by asking your reviewers how engaging or clear your technical document is to get more focused and useful feedback.\nYou can also ask them if your document answers the questions you listed when setting the goals and objectives to ensure that it is relevant. To get a thorough view of your document\u0026rsquo;s effectiveness, you can share it with reviewers having different perspectives or expertise levels.\nMake sure to address any gaps or inconsistencies identified during the review process, boosting the quality of your technical document.\n3. Incorporating Feedback and Revision: Analyze the feedback from your reviewers to determine which feedback will be implemented and revise your document based on this.\nYou can employ a revision strategy. An example may be addressing vital structural changes before moving to more detailed grammar changes.\nWhile analyzing and incorporating feedback, keep track of the changes you have made in case you need to revisit previous versions.\n4. Consistency Check and Final Proofreading Pay attention to the voice and style of your writing and ensure that you are adhering to a specific style guide like APA, MLA, or Google’s writing style guide.\nEnsure that the format for the headings, lists, etc in your document is consistent throughout the document.\nWhen proofreading, be on the lookout for grammatical errors and typos. You can use Grammar checkers, but be careful not to rely entirely on them.\n5. Practical Testing and Validation If your technical document includes hands-on instructions or coding, follow through with them yourself to ensure they work as expected.\nYou can also have your peer reviewers test the hands-on instructions or coding to be sure it\u0026rsquo;s simple and easy to follow.\nBe ready to revise the document, as this may reveal issues you might not have anticipated.\nComplete the following exercises before proceeding to the next module.\nExercise: Develop a Research Plan Objective In this exercise, you will practice your knowledge in information gathering and research on an emerging technology relevant to your field.\nInstructions: 1. Choose an Emerging Technology: Select a technology within your field of expertise that is still in its early stages of development but has the potential for significant impact. Ensure it is a topic that requires gathering information from various sources.\n2. Define Your Audience and Purpose: Clearly identify your target audience for the technical document: Determine who would benefit most from understanding this technology. Consider factors like existing knowledge, potential applications, and decision-making power. Define the purpose of your document - whether it is to inform, instruct, or persuade. 3. Research Sources: Identify at least four different sources of information for your chosen topic. These can include SMEs, technical documentation, industry publications, online forums, etc. Explain why each source is relevant and how it will contribute to the overall understanding of the topic. 4. Develop a Research Plan: Clearly outline the goals and objectives of your technical document. Prioritize the topics based on their importance to your audience. Formulate at least five specific questions that your document should answer. 5. Time Management: Break down your research process into different phases. Set realistic deadlines for each phase. Balance the depth and breadth of your research, allocating time based on the importance and complexity of each topic. 6. Gather Information: Use systematic data collection methods following your research plan. Implement any effective note-taking technique (Cornell method, mind mapping, etc.). Cross-verify information obtained from different sources for consistency. 7. Evaluate and Synthesize Information: Evaluate the accuracy, credibility, and relevance of the information gathered. Organize the information into a logical structure, identifying key themes and concepts. 8. Review and Revise: Conduct a self-review of your technical document. Share your document with a peer or SME for review and feedback. Incorporate feedback into the document and revise accordingly. 9. Final Proofreading: Conduct a final proofread, checking for clarity, consistency, and correctness. Ensure you follow a specific style guide. 10. Reflection: Write a brief reflection on the challenges faced during the information gathering process and how you addressed them. Highlight any adjustments you made to the research plan based on evolving information. Submission: Submission\nHost your developed research plan and a brief reflection on the challenges and adjustments made during the process on our blog or any other blog you wish to. Make a post and tag us on Twitter at @TechnicalWriti6 Quiz: Answer the following questions.\nLoading...\r","date":"2023-02-15","id":81,"permalink":"/docs/technicalwritingcourse/information-gathering/","summary":"Learn how to find the knowledge you need for your documentation.","tags":[],"title":"Information gathering"},{"content":"\rFigure 1. The concept of writing for User Experience (UX).\nModule content\nThis module contains the following;\nWhat is user experience (UX)? Why is UX important for technical writing? What are UX principles? How to write user-friendly technical documentation. User experience, otherwise known as UX, is used to describe the emotional sentiment of an individual when they use a product. This product can be of any form - physical or digital.\nIt is also the sum of techniques employed by design and developer teams to make a product easy to use by the target audience.\nUX is concerned with how the user (the reader in this context) can use the product according to its functionalities to fulfill their tasks, how well they understand its unique capabilities, and whether they have an overall pleasant experience.\nThere are common misconceptions attached to writing for user experience. This module will discuss them to clarify doubts with detailed explanations.\nThe first is this:: user experience (UX) and user interface (UI) are the same.\nUser experience (UX) is often and wrongly interchanged with the user interface (UI). Although both concepts complement each other, they have different components and, therefore, can not be used in place of one another.\nThe user interface (UI) is the part of the product where the user can see, touch, and interact.\nThe second is this: writing for user experience and UX writing are the same.\nThis is untrue; here’s why. Writing for user experience is aimed at creating content that improves the usability of products for users, while UX writing is the written aspect of user interface design.\nFigure 2. Understanding user satisfaction in technical writing.\nIt involves crafting words, phrases, and sentences to fit a user interface. It is meant to make text clear, readable, concise, and user-friendly.\nThese concepts, user interface (UI), user experience (UX), and writing for user experience have one goal in common: user satisfaction.\nNow that you understand the meaning of user experience, let us learn why it is important for technical writing.\nWhy is UX important for technical writing? Technical writing involves creating specialized content to convey information about a product to its prospective and continuous users.\nTechnical writing can be found in virtually every field, from medicine, telecommunication, sports, and media to software development.\nTechnical writers are adequately trained to curate content with the key terms of each field they specialize in.\nNote\nThe role of a technical writer can be likened to the function of a bridge. This person connectsvthe user and the product.\nIf the content created by the technical writer concerning a product does not explain all of its features, the user might not use the product properly.\nIt also takes away the anticipated consumer satisfaction and reduces their productivity.\nJudging from the sensitive position of a technical writer, it is important to prepare written content so that users can understand and adequately describe the product’s features. This is where writing for user experience comes in.\nWriting for user experience is applying UX principles when curating written content. For instance, most software development tools and frameworks have steep learning curves and can be tasking, even for users with knowledge of similar products.\nThe technical writer\u0026rsquo;s role is to ensure they apply all the UX principles necessary while creating clear and concise documentation for users.\nWhat are these UX Principles? As with UX design, UX principles are a set of instructions that designers use to create products for users with the aim of ease of use and positive experiences.\nThere are a lot of UX principles, and this module will discuss them in the context of technical writing.\nThese are some UX principles.\nAccessibility This is a means of designing products users can access despite their disabilities.In technical writing, this means that written content should be made accessible for all readers, despite their disabilities.\nIt is not advisable to assume all product users are free from neurological and physical impairments.\nWriting for accessibility can be achieved by splitting large paragraphs and adding diagrams and charts. Alternative texts should be included in images for description. Link texts should carry meaningful information.\nAudio content in form of transcripts can be added at the top of content pages. Captions should be added to enhance multimedia identification.\nConsistency As with popular brands, they can be associated with a particular slogan or color. A particular thing comes to mind whenever you hear or think of that brand. This is possible because the brand has created associated traits for themselves.\nNote\nFor example, Docker has the image of a whale carrying a stack of containers on its way to customers, closely related to their services. This can be found on their website, blog, documentation and social media pages. This way, whenever a reader sees their logo, their mind instantly thinks of Docker.\nConsistency is maintaining the language, feel, and look of written content for a product across different marketing channels, on the website, blog, and official documentation.\nIt can be achieved by maintaining using a style guide. An ideal publication or company has a unique style guide that tells its technical writers how to construct their official documentation and other related documents.\nThis covers all aspects of written content, from grammar and composition, use of pronouns, addition of backlinks, SEO optimization, and others. A style guide prevents a disruption in the flow of content transmission, especially with the change of writers. A popular example of one is Google\u0026rsquo;s writing style guide.\nUsability As it sounds, the usability of a product is ranked on how easy users find it to use. In technical writing, it refers to written content that can be understood and implemented by all product users, old and new.\nUsability can be achieved by testing already written content on brand-new users and noting their reactions and the rate of their learning curves. It can also be improved by conducting anonymous surveys, correcting loopholes, and permitting open-source contributions for users.\nHierarchy Hierarchy is the methodical arrangement of written content to suit an acceptable narrative. We know that when we pick up a book, the first word or phrase we expect to see is the title, followed by the author\u0026rsquo;s name.\nAfter that, the table of contents follows, then the main content/body of the content. Technical writing is a vast space as it covers proposals, white papers, tutorials, SDKs, and API documentation, all of which have different approaches.\nThe technical writer can achieve hierarchy with written content by writing it according to its requirements or outline.\nNote\nFor example, if you were to write a tutorial, you would write a title, add a cover image and prerequisites needed by the reader, and then the main body of the tutorial, assisted by visual aids to ensure they are on the right track.\nThe writer would add headings and sub-headings as needed (from h1-h5), bullet points, numerical or alphabetical lists for key points, and adequate paragraph spacing to make the content easy to read.\nContext This is an important principle that cuts across different sectors aside from technical writing. By creating documentation within context, users have access to specific information related to the concepts of a particular product.\nNote\nIf a product caters to users with macOS and iOS devices and gadgets, writing troubleshooting guides and user guides that include Android and Linux-based devices may not be useful to the users.\nFindability This is the ease at which a specific piece of information can be found in written content so that users can easily find what they want using a search bar or keywords.\nFindability can be achieved by implementing hierarchy and information architecture to aid ease of use. Headings segment the content and make in-content searches easy to carry out.\nCheck your knowledge:\nQuestion 1:\r______ is the sum of techniques design and developer teams use to make products easy for consumers to use. Usability\rConsumer protection\rUser experience\rQuestion 2:\rWhich of these is not an element of typographical emphasis?\nfull stop\rbacktick\rstrikethrough\rUp next: writing user-friendly technical documentation!\nHow to Write User-Friendly Technical Documentation There are several ways to create user-friendly documentation. These steps are as follows:\nKnow Your Audience Figure 3. Know your audience before creating content.\nBefore creating content for users, it is important to research the background of the users. For example, tutorials for new users would differ from those curated for existing product users.\nTutorials for new users can be tagged “beginner guides”, such as “a beginner’s guide to creating Kubernetes clusters”, “everything you need to know about using headless CMS platforms”,“how to migrate from x to y as a newbie”, and similar titles.\nAs they are named, they should provide detailed information, carefully explain concepts, and name all the prerequisites for the user to follow the tutorial properly.\nExisting users with some experience with the product in question would not need to be coddled so much. Explaining concepts they are familiar with would only bore them, but adding prerequisites, visual aids, and aids for troubleshooting issues is still necessary.\nIt is necessary to apply tact when choosing how to write for your audience, as a single misstep can cause user dissatisfaction. This eludes the aim of catering towards a positive user experience.\nImplement Information Architecture Figure 4. Implement information architecture while creating technical written content.\nInformation architecture is the process of organizing written content for ease of use and navigation. It can be implemented by making optimal use of white space.\nThis prevents the content from looking clumped and bulky. Readers often lose interest in written content when it looks bulky, as it plants a notion they would not finish.\nAlso, with the advent of information being delivered at very short intervals, lengthy sentences and paragraphs tend to receive less positive treatment. Arrange your content accordingly in a manner that permits easy navigation. An easy way to do this is to create an outline and use it as a framework for the final result.\nThis outline can then be split into a main heading, the title, and sub-headings for new points. Use lists (alphabetical lettering, bullet points, numbers, and Roman numerals) for information breakdown.\nIt is necessary to arrange your content properly to aid your reader\u0026rsquo;s search for specific bits of information. It also helps them to follow step-by-step instructions without needing clarification.\nUse Consistent Formatting Figure 5. Make use of consistent formatting.\nUse consistent formatting while writing. Do not mismatch the arrangement of written content while writing. For example, using images of different sizes and dimensions in the same piece could be less visually appealing and tends to put the reader off balance.\nUsing a variety of listings is not recommended as well. If you start the article with alphabetical lettering, stick to it. If you prefer numbers, stick to that also. Mixing them up makes your work look unarranged, giving off this unco-ordinated feeling.\nUse a particular font, and only use elements of typographical emphasis like capitalization, bold, italics, backtick, code blocks, and strikethrough where necessary, as these are used to draw attention to a particular word or phrase.\nWhere writing style guides are given, adhere to all its instructions and the minute details included. Maintaining consistent formatting while curating written content is important as it gives off a professional outlook.\nUse Plain Language Figure 6. Make use of plain language.\nTechnical writing means something other than that the content would be filled with technical jargon and hard-to-read sentences. Write in plain text and avoid using technical terms unless necessary.\nWhere technical terms are needed, explain them or relate them to familiar words. Use examples to break down complex concepts so readers can fully grasp them.\nDo not use vague, unfamiliar words. Do not use ambiguous text. Do not use trendy words or terms associated with only a particular region.\nDo not use offensive language, indigenous language, or broken language. Use editing tools to brush up on your grammar and composition skills if they need to be improved.\nInteractive Elements Figure 7. Make use of interactive elements.\nThese can include GIFs, memes (only when allowed), short videos, and simulations embedded in the content for further elaboration.\nThese will help readers assimilate faster and visualize without being taught physically.\nAdding frequently asked questions (FAQs), hyperlinks, and information from other official sources can also help readers get an unbiased view of a product and its competitors.\nThis can aid a product’s market standing, as users can compare and contrast products with similar features.\nNote that these elements should only be used in the content context. Anything other than that would be considered a distraction and look out of place.\nUser Feedback and Content Update Figure 8. Make use of user feedback and content update.\nLeave room for comments so the readers can talk about the content. This will help the writer know if their work had a positive impact.\nMost companies have a “Was this page helpful?” button, which users can click to indicate whether the content fulfilled its purpose.\nNote\nFor example, BMC documentation has a detailed explanation of how to create an avenue for readers to provide feedback and how to view feedback for written content. Read more about it here.\nThis will also aid in implementing needed corrections. Users can contribute to the content through open-source contributions.\nProducts will not remain the same for a long time. Their features can be updated to suit modern trends, and the product needs to be updated.\nIt is necessary to replace outdated information with current information throughout the product\u0026rsquo;s lifetime. This will prevent a steep learning curve for users and promote ease of use.\nNote\nFor example, medusajs, a headless CMS e-commerce platform, was formerly known as an open-source alternative to Shopify. At the start of 2023, this descriptive title was changed, and now they are known as an open-source platform, providing digital blocks for digital commerce.\nAny form of written content bearing the former description: an open-source alternative to Shopify is clearly outdated and counts as spreading misinformation to readers.\nWhy is Writing for User Experience (UX) Important in Technical Writing? Writing for user experience (UX) is an essential skill for technical writers. Writing aims to ensure users enjoy a product’s capabilities and derive a positive experience while using it.\nThis module explained the meaning of user experience and highlighted popular misconceptions about it. It further discussed why user experience is important for technical writing and the UX principles writers can apply.\nWriting user-friendly documentation is no mean feat, but as with every skill, it can be learned. Applying the methods taught will be sure to give you positive results.\nNote\nExercise: Complete the following exercises before leaving this module.\nWrite an article on Caisy, a headless CMS platform. Introduce it to users and highlight the features that set it apart from other CMS platforms.\nYour article should be between 1,500-2,000 words. Make use of the Google writing style guide, ensure to implement all the UX principles taught in this module, and make sure your content is user-friendly, according to what you have been taught.\nPublish the article on Hashnode, share the link on Twitter and LinkedIn. Tag @caisyio and @TechnicalWriti6 on X (Twitter) with the link to your published submission.\nAnswer the following questions.\nLoading...\r","date":"2023-01-15","id":82,"permalink":"/docs/technicalwritingcourse/writing-for-user-experience-ux/","summary":"Understanding user experience (UX) prinicples and how to implement them in technical writing.","tags":[],"title":"Writing for User Experience (UX)"}]