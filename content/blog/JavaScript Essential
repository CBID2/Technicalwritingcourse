JavaScript is a popular versatile language that helps developers to create dynamic and interactive web applications. Variables and Data types are 2 fundamental concepts of JavaScript essential for storing and manipulating information within your code.
This article will provide an in-depth look into variables, how to declare and assign values to variables, the different data types available and how to effectively use them. Mastering these concepts gives you a solid foundation for building powerful and efficient JavaScript applications.

## Understanding Variables

Variables acts as a container that hold and store data (values) for later use. They allow you to assign names to values, thereby, making your code more readable and manageable.
The `Var`, `Let` and `Const` keywords are used to declare variables. They hold different data types such as numbers, string, booleans, arrays, objects, and more. let's take a look at each of them

### 1. Var

The `Var` keyword is an old method of declaring a variable and it's not recommended due to its hoisting and scope concerns. Using `Var` can lead to accidental reassignment of variables. `Var` has a function-scoped (accessible only within a specific function) or globally-scoped (accessible anywhere withiin the JavaScript code) behavior.

```
var x = 5;
var name = "Sophie";

```

```
var x = 10;
var y = 20;
var z = x + y;
var name = "Dave";

console.log(x);    // 10
console.log(y);   // 20
console.log (z);  // 30
console.log(name);  // Dave

```

### 2. Let

The `let` keyword is block-scoped (accessible within the curly braces they are declared in) and is the most common way of declaring a variable. This keyword is a good choice for declaring variables whose values will be reassigned.

```
let color = "Red";
color = "Blue";  // values can be reassigned

console.log (color);  // Blue

```

```
let x = 10;
let y = 20;
let z = x + y;

console.log(x);    // 10
console.log(y);   // 20
console.log (z);  // 30
```

### 3. Const

The `const` keyword is block-scoped and it is used to create variables whose values you won't reassign.  
Note that values of variables declared with `const` can't be changed.

```
const pi = 3.14159;

```

They are useful for variables that should remain constant throughout their lifetime. This helps prevent accidental changes to your code and improves code maintainability.

## Understanding Data Types
Data Types are another fundamental building blocks of JavaScript. The most common ones are the primitive and complex data types.
The primitive data types consists of Numbers, String, Boolean, BigInt, Null and  Undefined while the Complex data types consist of Arrays and Objects.

## Primitive Data types
### Number : Numeric values
Numbers represent numerical values. They could be intergers or floating-point numbers and are also used to perform mathematical operations.

```
let person1Age = 16;
let person2Age = 20;
let pi = 3.14159
let totalAge = person1Age + person2Age;

console.log (person1Age);  // 16
console.log(person2Age);   // 20
console.log (pi); // 3.14159
console.log(totalAge);  //36

```
### Strings : Textual data
Strings represent sequences of characters and textual data. They are enclosed within a single (' ') or double (" ") quotes.

``` 
let name = "Patricia Lawson";
let greeting = "Hello, world!";

console.log(name); // Patricia Lawson
console.log(greeting); // Hello, world!

```

### Booleans : True or False 
Booleans represents logical values either true or false.  The are often used for conditional statements and logical operations.

```
let isWeekend = true;
let isRaining= false;

```

### BigInt : large Integers
BigInt are used to store numbers that are too large to be stored in the `Number` data type. They provide precise calculation for large intergers. To create a `BigInt`, add n to the end of an integer or call `BigInt()`

```
let largeNumber = 1234567890234567890987654321n;
let y = BigInt (1234567890987654321345678890)

console.log(largeNumber); //  1234567890234567890987654321
console.log(y); // 1234567890987654321345678890

```

### Null :  Absence of a value
Null is used to explicitly state the intentional absence of a value. 

```
let emptyValue = null;

console.log(emptyValue); // null

```

### Undefined :  Uninitialized variable
Undefined represents  variable that has been declared but has not yet been assigned a value. 

``` 
let name;

console.log(name);  //  undefined

```

## Complex Data types